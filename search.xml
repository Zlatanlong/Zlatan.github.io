<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(转)ThreadLocal原理</title>
    <url>/2018/09/30/(%E8%BD%AC)ThreadLocal%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="【多线程】ThreadLocal原理"><a href="#【多线程】ThreadLocal原理" class="headerlink" title="【多线程】ThreadLocal原理"></a>【多线程】ThreadLocal原理</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; threadLocalA= <span class="keyword">new</span> ThreadLocal&lt;String&gt;(); </span><br><span class="line"></span><br><span class="line">threadLocalA.set(<span class="keyword">new</span> String(<span class="string">"A"</span>)); </span><br><span class="line"></span><br><span class="line">String str = threadLocalA.get();</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在每个线程的内部有个数据结构为<code>Map</code>的<code>threadLocals</code>变量，以<code>&lt;ThreadLocal,Value&gt;</code>的形式保存着线程变量和其对应的值。</p>
<p>当使用<code>set()</code>方法时：</p>
<ol>
<li>获取到当前线程的<code>threadLocals</code>，类型为<code>Map</code></li>
<li>将这值放到这个<code>Map</code>结构的变量中，key为ThreadLocal对象，value为所有存放的值</li>
</ol>
<p>当使用<code>get()</code>方法时：</p>
<ol>
<li>获取到当前线程的<code>threadLocals</code>，类型为<code>Map</code>。</li>
<li>以<code>ThreadLocal</code>对象为Map的key获取到它的<code>value</code>值。</li>
</ol>
<p>因为ThreadLocal对象作为Map的key，所以一个ThreadLocal对象只能存放一个值，当存放多个时，会将新值覆盖旧值。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>数据结构：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">ThreadLocalMap map = getMap(t);<span class="comment">//当前线程为入参，获取当前线程的threadLocals变量 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">//入参为this，也就是说key为ThreadLocal对象</span></span><br><span class="line"></span><br><span class="line">map.set(<span class="keyword">this</span>, value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">createMap(t, value);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">Thread t = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">ThreadLocalMap map = getMap(t);<span class="comment">//当前线程为入参，获取当前线程的threadLocals </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">//入参为this，也就是说key为ThreadLocal</span></span><br><span class="line"></span><br><span class="line">ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; </span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"></span><br><span class="line">T result = (T)e.value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> setInitialValue(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t.threadLocals;<span class="comment">//threadLocals为线程的变量 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">Entry e = table[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key) </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> e; </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> getEntryAfterMiss(key, i, e);<span class="comment">//避免内存泄漏，下文有提。 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h2><p>ThreadLocalMap结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">```</span></span><br><span class="line"><span class="comment">* The entries in this hash map extend WeakReference, using</span></span><br><span class="line"><span class="comment">* its main ref field as the key (which is always a</span></span><br><span class="line"><span class="comment">* ThreadLocal object). Note that null keys (i.e. entry.get()</span></span><br><span class="line"><span class="comment">* == null) mean that the key is no longer referenced, so the</span></span><br><span class="line"><span class="comment">* entry can be expunged from table. Such entries are referred to</span></span><br><span class="line"><span class="comment">* as "stale entries" in the code that follows.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">```</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123; </span><br><span class="line"></span><br><span class="line">Object value; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Entry(ThreadLocal&lt;?&gt; k, Object v) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>(k); <span class="comment">//key，这个是一个弱引用，如果没有强引用来引用key(也就是ThreadLocal)，则key会被回收，形成了key为null的Entry。 </span></span><br><span class="line"></span><br><span class="line">value = v;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>threadLocals变量是在线程内部的，故没有多个线程去访问它，所以不存在线程不安全的说法，同时只要线程被回收了就不会存在内存泄漏。</p>
<p>ThreadLocal对象被回收时(key为null)，没有办法获取到value，而线程又不会被回收时则value一直占用空间导致内存泄漏。线程不会被回收的常见场景是线程池。</p>
<p>JDK在此做了一个优化，在调用get(),set(),remove()方法会做额外处理来清理ThreadLocalMap中key为null的value，以减少内存泄漏的影响。但是如果key未使用弱引用，即使ThreadLocal被回收了，key也不为null，也就是说是没法判断哪个value需要回收的，最终造成内存泄漏。所以此处的弱引用key是内存泄漏的一个优化处理方式。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在实际项目中，可以用来减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度，因为servlet是单例多线程的，每个请求执行的操作都是同一个线程中。比如：可以用ThreadLocal来存每一次请求用户的信息，定义了一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserContextHolder</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;User&gt; userContextHolder = <span class="keyword">new</span> ThreadLocal&lt;&gt;(); </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">setUser</span><span class="params">(User user)</span></span>&#123; </span><br><span class="line"></span><br><span class="line">userContextHolder.set(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">getUser</span><span class="params">()</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> userContextHolder.get(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> userContextHolder.remove(); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当用户每次请求进来时，在拦截器中获取用户信息调用<code>UserContextHolder.setUser()</code>将其放到<code>userContext</code>中，无论在哪我们只要调用<code>UserContextHolder.getUser()</code>可以很轻松的获取到用户的信息，而不用在函数调用时一层一层的传递。同时在拦截器结束时调用<code>UserContextHolder.remove()</code>移除掉即可。</p>
<blockquote>
<p>转载自简书: <span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vdS9hMGU5YjdjMzZmZGQ=" title="https://www.jianshu.com/u/a0e9b7c36fdd">eejron<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)vue+axios上传文件</title>
    <url>/2018/08/20/(%E8%BD%AC)Vue%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E7%9A%84%E9%A6%96%E5%B1%8F%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p>对于单页应用，要在一个页面上为用户提供产品的所有功能，在这个页面加载的时候，首先要加载大量的静态资源，这个加载时间相对比较长。所以我们需要做一些相应的优化，减少响应时间，尽快把首屏显示出来。</p>
<a id="more"></a>

<h3 id="1、压缩代码"><a href="#1、压缩代码" class="headerlink" title="1、压缩代码"></a>1、压缩代码</h3><p>无论是否为单页应用，代码的压缩都是要做的。<br>对于vue-cli生成的项目，在Webpack配置文件中使用了UglifyJsPlugin进行代码的压缩：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//webpack.prod.conf.js</span></span><br><span class="line">plugins: [</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">      uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">          warnings: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: config.build.productionSourceMap,</span><br><span class="line">      parallel: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure>

<h3 id="2、框架和插件按需加载"><a href="#2、框架和插件按需加载" class="headerlink" title="2、框架和插件按需加载"></a>2、框架和插件按需加载</h3><p>对于项目中用到的一些UI框架，比如 Onsen UI 、Mint UI 等等。如果我们只使用框架的部分组件，那么可以不要引入整个框架，按需引入用到的组件。<br>以Mint UI为例：</p>
<h4 id="引入全部组件"><a href="#引入全部组件" class="headerlink" title="// 引入全部组件"></a>// 引入全部组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Mint <span class="keyword">from</span> <span class="string">'mint-ui'</span>;  </span><br><span class="line"><span class="keyword">import</span> <span class="string">'mint-ui/lib/style.css'</span>  </span><br><span class="line">Vue.use(Mint);</span><br></pre></td></tr></table></figure>

<h4 id="按需引入部分组件"><a href="#按需引入部分组件" class="headerlink" title="// 按需引入部分组件"></a>// 按需引入部分组件</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CellSwipe &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span>;  </span><br><span class="line">Vue.component(CellSwipe.name, CellSwipe);</span><br></pre></td></tr></table></figure>


<p>对于一些插件，比如表单验证插件Vuelidate，如果只是在个别组件中用的到，也可以不要在main.js里面引入，而是在组件中按需引入</p>
<h4 id="main-js中全部引入"><a href="#main-js中全部引入" class="headerlink" title="// main.js中全部引入"></a>// main.js中全部引入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuelidate <span class="keyword">from</span> <span class="string">'vuelidate'</span></span><br><span class="line">Vue.use(Vuelidate)</span><br></pre></td></tr></table></figure>

<h4 id="组件中按需引入"><a href="#组件中按需引入" class="headerlink" title="// 组件中按需引入"></a>// 组件中按需引入</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; validationMixin &#125; <span class="keyword">from</span> <span class="string">'vuelidate'</span></span><br></pre></td></tr></table></figure>

<h3 id="3、框架和插件从cdn中引入"><a href="#3、框架和插件从cdn中引入" class="headerlink" title="3、框架和插件从cdn中引入"></a>3、框架和插件从cdn中引入</h3><p>在开发过程中，我们其实不会要去更改这些第三方库，所以可以把它们放到cdn中，不参与打包。<br>在 index.html 中使用cdn引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.example.com/vue/2.5.3/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.example.com/vuex/3.0.1/vuex.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.example.com/axios/0.17.1/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>在webpack.config.js（webpack.base.config.js）中添加externals，表示这些文件可以被引用，但不参与打包。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">  <span class="string">'vuex'</span>: <span class="string">'Vuex'</span>,</span><br><span class="line">  <span class="string">'axios'</span>: <span class="string">'axios'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>这样配置之后，我们依然可以用<code>import Vuex from &#39;vuex&#39;</code>来引入模块。</p>
<p>具有外部依赖<code>(external dependency)</code>的 bundle 可以在各种模块上下文(module context)中使用，例如 CommonJS, AMD, 全局变量和 ES2015 模块。</p>
<p>externals也支持string、array、object、function和regex等各种语法，详情参见webpack Externals中文文档。</p>
<h3 id="4、路由懒加载"><a href="#4、路由懒加载" class="headerlink" title="4、路由懒加载"></a>4、路由懒加载</h3><p>官方文档在此，更详细的内容参见文档。</p>
<p>路由懒加载也就是 把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件。<br>结合 Vue 的异步组件和 Webpack 的代码分割功能，轻松实现路由组件的懒加载。<br>在router中，我们平时是这样引入组件的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foo <span class="keyword">from</span> <span class="string">'./Foo.vue'</span></span><br></pre></td></tr></table></figure>

<p>文档中指出，如下定义一个能够被 Webpack 自动代码分割的异步组件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./Foo.vue'</span>)</span><br></pre></td></tr></table></figure>

<p>在路由配置中什么都不需要改变，只需要像往常一样使用 Foo：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>暂时先记下这四种方法，优化这件事，还要在项目里好好钻研~</p>
<blockquote>
<p>版权声明：本文为CSDN博主「latency_cheng」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xhdGVuY3lfY2hlbmcvYXJ0aWNsZS9kZXRhaWxzLzgwMDMxMjgz" title="https://blog.csdn.net/latency_cheng/article/details/80031283">https://blog.csdn.net/latency_cheng/article/details/80031283<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>体积优化</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)vue打包压缩体积</title>
    <url>/2018/09/13/(%E8%BD%AC)vue%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9%E4%BD%93%E7%A7%AF/</url>
    <content><![CDATA[<p>作为一个做 SPA 起家的框架，Vue 的开发学习曲线较为平缓，相对来说，开发体验属于上乘。但不少初学者会发现，自己的站点，随随便便打包文件就有 10M ！难以置信，其实这跟 Vue 的性能没有太大关系，我们可以通过配置文件来大大改善这一情况。</p>
<p>减少打包后文件体积的方法：</p>
<ol>
<li>采用懒加载</li>
<li>启用 Gzip 压缩</li>
<li>将依赖库挂到 CDN 上</li>
<li>减少不必要的库依赖</li>
</ol>
<a id="more"></a>

<h2 id="准备知识："><a href="#准备知识：" class="headerlink" title="准备知识："></a>准备知识：</h2><blockquote>
<ol>
<li>如何用 vue-cli 创建 Vue 应用，并对其有一定了解，否则，请移步<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvaW5zdGFuY2UuaHRtbA==" title="https://cn.vuejs.org/v2/guide/instance.html">官网<i class="fa fa-external-link"></i></span></li>
<li>对 Webpack 有了解，知道它是一个打包工具，并且它的四大要素：entity、output、。进一步理解 webpack，移步<span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy8=" title="https://webpack.js.org/">这里<i class="fa fa-external-link"></i></span></li>
</ol>
</blockquote>
<h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>官网上对懒加载的解释是这样的：</p>
<blockquote>
<p>当打包构建应用时，Javascript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p>
<p>结合 Vue 的异步组件和 Webpack 的代码分割功能，轻松实现路由组件的懒加载。</p>
</blockquote>
<p>它的作用是实现延迟加载，避免一次性加载过大的文件，增加首页渲染时间，影响用户体验。</p>
<h4 id="如何实现？"><a href="#如何实现？" class="headerlink" title="如何实现？"></a>如何实现？</h4><p>要实现懒加载很简单，我们只需要改变组件的导入方式：</p>
<p><strong>before:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Article from &#39;@&#x2F;components&#x2F;Article&#39;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p><strong>after:</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const Article &#x3D; () &#x3D;&gt; import(&#39;@&#x2F;components&#x2F;Article&#39;)</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h4 id="原理是什么？"><a href="#原理是什么？" class="headerlink" title="原理是什么？"></a>原理是什么？</h4><p>本质上，它是利用了 Promise，具体请见：<span class="exturl" data-url="aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sIyVFNSVCQyU4MiVFNiVBRCVBNSVFNyVCQiU4NCVFNCVCQiVCNg==" title="https://cn.vuejs.org/v2/guide/components.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">异步组件<i class="fa fa-external-link"></i></span></p>
<h3 id="启用-Gzip-压缩"><a href="#启用-Gzip-压缩" class="headerlink" title="启用 Gzip 压缩"></a>启用 Gzip 压缩</h3><p>vue 默认不启用 Gzip 压缩，但我们知道，压缩后的文件体积会大大减少，这适用于线上部署。 如何启用也很简单： 首先，在 <code>config</code> 中将 <code>build.productionGzip</code> 设置为 <code>true</code> 然后，确认 <code>webpack.prod.conf.js</code> 中有如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (config.build.productionGzip) &#123;</span><br><span class="line">  const CompressionWebpackPlugin &#x3D; require(&#39;compression-webpack-plugin&#39;)</span><br><span class="line"></span><br><span class="line">  webpackConfig.plugins.push(</span><br><span class="line">    new CompressionWebpackPlugin(&#123;</span><br><span class="line">      asset: &#39;[path].gz[query]&#39;,</span><br><span class="line">      algorithm: &#39;gzip&#39;,</span><br><span class="line">      test: new RegExp(</span><br><span class="line">        &#39;\\.(&#39; +</span><br><span class="line">        config.build.productionGzipExtensions.join(&#39;|&#39;) +</span><br><span class="line">        &#39;)$&#39;</span><br><span class="line">      ),</span><br><span class="line">      threshold: 10240,</span><br><span class="line">      minRatio: 0.8</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>如果有的话，下面只要使用 <code>npm install --save-dev compression-webpack-plugin</code> 安装 webpack 插件，这样，你在 build 项目时，webpack 会帮你压缩文件。 如果没有的话，你只要把上面代码复制到 webpack 配置文件的 <code>plugins</code> 下即可。 如何方面查看build之后的文件大小呢？我们可以使用另外一个 webpack 插件：<code>webpack-bundle-analyzer</code> ，如何使用呢？默认 Vue 会导入这个插件，我们只需要调用即可：在 <code>package.json</code> 文件中增加以下命令：<code>&quot;analyzer&quot;: &quot;NODE_ENV=production npm_config_report=true npm run build&quot;</code>，运行 <code>npm run analyzer</code> ，等待一会，就可以看到整个项目的打包情况了。</p>
<h3 id="将依赖库挂到-CDN-上"><a href="#将依赖库挂到-CDN-上" class="headerlink" title="将依赖库挂到 CDN 上"></a>将依赖库挂到 CDN 上</h3><p>如果你对首屏响应速度要求比较高，那么，CDN 也不失为一种好方法。 它的原理是将一些依赖库挂载到 CDN 上，通过在 html 文件 <code>script</code> 便签引入的方式进行加载，减少的打包文件，从而缩小了体积。</p>
<p>以 element 为例：</p>
<p>首先，在 html 中引入库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;demo-vue-project&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;element-ui&#x2F;2.0.8&#x2F;theme-chalk&#x2F;index.css&quot;&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;app&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;!-- built files will be auto injected --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;element-ui&#x2F;2.0.7&#x2F;index.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>然后在 <code>webpack.base.conf.js</code> 中移除对这三个库的依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">    &#39;vue&#39;: &#39;Vue&#39;,</span><br><span class="line">    &#39;vue-router&#39;: &#39;VueRouter&#39;,</span><br><span class="line">    &#39;element-ui&#39;: &#39;ELEMENT&#39;</span><br><span class="line">  &#125;,</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>这样我们就可以愉快地享受 CDN 了。</p>
<h3 id="减少不必要的库依赖"><a href="#减少不必要的库依赖" class="headerlink" title="减少不必要的库依赖"></a>减少不必要的库依赖</h3><p>这一点就是见仁见智了。如果你使用了上面提到的 <code>webpack-bundle-analyzer</code> ，你会发现占用你的包的大部分是你引用的一些库，诸如：Element-ui、lodash、highlight 等等。不知道你们看到是什么心情，反正我都想删掉它们，自己写需要的功能了，毕竟我只需要它们其中的一小部分功能，却牺牲了大量的带宽！</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>webpack 是一个强大的打包工具，这篇文章写于 V3.4 的时候，现在 V4 已经出来了，配置文件更加地简单，值得一看！本文写得粗糙，如果不对之处，欢迎批评指正！</p>
<blockquote>
<p> 作者：allenWang</p>
<p> 链接：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YWJiYTY4Y2YyNjVkYTIzOWM3YjZiZGM=" title="https://juejin.im/post/5abba68cf265da239c7b6bdc">https://juejin.im/post/5abba68cf265da239c7b6bdc<i class="fa fa-external-link"></i></span></p>
<p> 来源：掘金</p>
</blockquote>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>体积优化</tag>
        <tag>Vue.js</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)vue-router中query和params传参(接收参数)router和route的区别</title>
    <url>/2018/08/27/(%E8%BD%AC)vue-router%E4%B8%ADquery%E5%92%8Cparams%E4%BC%A0%E5%8F%82(%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0)router%E5%92%8Croute%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>今天做项目时踩到了vue-router传参的坑（query和params），所以决定总结一下二者的区别。</p>
<h2 id="直接总结干货！！！"><a href="#直接总结干货！！！" class="headerlink" title="直接总结干货！！！"></a>直接总结干货！！！</h2><h3 id="1-query方式传参和接收参数"><a href="#1-query方式传参和接收参数" class="headerlink" title="1.query方式传参和接收参数"></a>1.query方式传参和接收参数</h3><a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">传参: </span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">        path:<span class="string">'/xxx'</span>,</span><br><span class="line">        query:&#123;</span><br><span class="line">          id:id</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  </span><br><span class="line">接收参数:</span><br><span class="line"><span class="keyword">this</span>.$route.query.id</span><br></pre></td></tr></table></figure>

<p>注意:传参是this.$router,接收参数是this.$route,这里千万要看清了！！！</p>
<p><strong>this.router和this.route有何区别？</strong></p>
<ul>
<li>1.router为vuerouter实例，想要导航到不同，则使用router.push方法</li>
<li>2.$route为当前router跳转对象，里面可以获取name、path、query、params等</li>
</ul>
<h3 id="2-params方式传参和接收参数"><a href="#2-params方式传参和接收参数" class="headerlink" title="2.params方式传参和接收参数"></a>2.params方式传参和接收参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">传参: </span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">        name:<span class="string">'xxx'</span>,</span><br><span class="line">        params:&#123;</span><br><span class="line">          id:id</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">  </span><br><span class="line">接收参数:</span><br><span class="line"><span class="keyword">this</span>.$route.params.id</span><br></pre></td></tr></table></figure>

<p>注意:params传参，push里面只能是 name:’xxxx’,不能是path:’/xxx’,因为params只能用name来引入路由，如果这里写成了path，接收参数页面会是undefined！！！</p>
<p>另外，二者还有点区别，直白的来说query相当于get请求，页面跳转的时候，可以在地址栏看到请求参数，而params相当于post请求，参数不会再地址栏中显示</p>
<p><strong>vue的自学之路还得继续走，坑还会继续踩，下一个坑会是神马…</strong></p>
<blockquote>
<p>转载自</p>
<p> <span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjczNTE2OA==" title="https://segmentfault.com/a/1190000012735168">https://segmentfault.com/a/1190000012735168<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>Vue-router</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)vue+axios上传文件</title>
    <url>/2018/09/04/(%E8%BD%AC)vue+axios%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="单独上传文件："><a href="#单独上传文件：" class="headerlink" title="单独上传文件："></a>单独上传文件：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/png,image/gif,image/jpeg"</span> @<span class="attr">change</span>=<span class="string">"update"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">      update(e)&#123;</span><br><span class="line">        <span class="keyword">let</span> file = e.target.files[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">let</span> param = <span class="keyword">new</span> FormData(); <span class="comment">//创建form对象</span></span><br><span class="line">        param.append(<span class="string">'file'</span>,file);<span class="comment">//通过append向form对象添加数据</span></span><br><span class="line">        <span class="built_in">console</span>.log(param.get(<span class="string">'file'</span>)); <span class="comment">//FormData私有类对象，访问不到，可以通过get判断值是否传进去</span></span><br><span class="line">        <span class="keyword">let</span> config = &#123;</span><br><span class="line">          headers:&#123;<span class="string">'Content-Type'</span>:<span class="string">'multipart/form-data'</span>&#125;</span><br><span class="line">        &#125;; <span class="comment">//添加请求头</span></span><br><span class="line">        <span class="keyword">this</span>.$http.post(<span class="string">'http://127.0.0.1:8081/upload'</span>,param,config)</span><br><span class="line">          .then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response.data);</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="Form表单上传文件："><a href="#Form表单上传文件：" class="headerlink" title="Form表单上传文件："></a>Form表单上传文件：</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">v-model</span>=<span class="string">"age"</span> <span class="attr">placeholder</span>=<span class="string">"请输入年龄"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> @<span class="attr">change</span>=<span class="string">"getFile($event)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"submitForm($event)"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">      name: <span class="string">''</span>,</span><br><span class="line">      age: <span class="string">''</span>,</span><br><span class="line">      file: <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      getFile(event) &#123;</span><br><span class="line">        <span class="keyword">this</span>.file = event.target.files[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.file);</span><br><span class="line">      &#125;,</span><br><span class="line">      submitForm(event) &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">        <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">        formData.append(<span class="string">'name'</span>, <span class="keyword">this</span>.name);</span><br><span class="line">        formData.append(<span class="string">'age'</span>, <span class="keyword">this</span>.age);</span><br><span class="line">        formData.append(<span class="string">'file'</span>, <span class="keyword">this</span>.file);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">let</span> config = &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.$http.post(<span class="string">'http://127.0.0.1:8081/upload'</span>, formData, config).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(response.data);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>版权声明：本文为CSDN博主「帅气的梧桐述」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2gzNjM2NTk0ODcvYXJ0aWNsZS9kZXRhaWxzLzc5MDM1Mzg4" title="https://blog.csdn.net/h363659487/article/details/79035388">https://blog.csdn.net/h363659487/article/details/79035388<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
      <tags>
        <tag>iView</tag>
        <tag>axios</tag>
        <tag>上传文件</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)Java List 排序 Collections.sort()</title>
    <url>/2018/10/07/(%E8%BD%AC)java%20List%20%E6%8E%92%E5%BA%8F%20Collections.sort()/</url>
    <content><![CDATA[<h3 id="用Collections-sort方法对list排序有两种方法第一种是list中的对象实现Comparable接口，如下："><a href="#用Collections-sort方法对list排序有两种方法第一种是list中的对象实现Comparable接口，如下：" class="headerlink" title="用Collections.sort方法对list排序有两种方法第一种是list中的对象实现Comparable接口，如下："></a>用Collections.sort方法对list排序有两种方法第一种是list中的对象实现Comparable接口，如下：</h3><a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据order对User排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">User</span>&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> Integer order;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> order;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Integer order)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.order = order;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(User arg0)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.getOrder().compareTo(arg0.getOrder());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125; 测试一下：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         User user1 = <span class="keyword">new</span> User();</span><br><span class="line">         user1.setName(<span class="string">"a"</span>);</span><br><span class="line">         user1.setOrder(<span class="number">1</span>);</span><br><span class="line">         User user2 = <span class="keyword">new</span> User();</span><br><span class="line">         user2.setName(<span class="string">"b"</span>);</span><br><span class="line">         user2.setOrder(<span class="number">2</span>);</span><br><span class="line">         List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">         <span class="comment">//此处add user2再add user1</span></span><br><span class="line">        list.add(user2);</span><br><span class="line">         list.add(user1);</span><br><span class="line">         Collections.sort(list);</span><br><span class="line">         <span class="keyword">for</span>(User u : list)&#123;</span><br><span class="line">             System.out.println(u.getName());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下<br>a</p>
<p>b</p>
<h3 id="第二种方法是根据Collections-sort重载方法来实现，例如："><a href="#第二种方法是根据Collections-sort重载方法来实现，例如：" class="headerlink" title="第二种方法是根据Collections.sort重载方法来实现，例如："></a>第二种方法是根据Collections.sort重载方法来实现，例如：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据order对User排序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123; <span class="comment">//此处无需实现Comparable接口</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">     <span class="keyword">private</span> Integer order;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.name = name;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> Integer <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> order;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrder</span><span class="params">(Integer order)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">this</span>.order = order;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> 主类中这样写即可(HastSet——&gt;List——&gt;sort进行排序)：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user1 = <span class="keyword">new</span> User();</span><br><span class="line">        user1.setName(<span class="string">"a"</span>);</span><br><span class="line">        user1.setPrice(<span class="number">11</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User();</span><br><span class="line">        user2.setName(<span class="string">"b"</span>);</span><br><span class="line">        user2.setPrice(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        Set&lt;User&gt; Hset = <span class="keyword">new</span> HashSet&lt;User&gt;();</span><br><span class="line">        Hset.add(user2);</span><br><span class="line">        Hset.add(user1);</span><br><span class="line"> </span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.addAll(Hset);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        Collections.sort(list,<span class="keyword">new</span> Comparator&lt;User&gt;()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(User arg0, User arg1)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> arg0.getPrice().compareTo(arg1.getPrice());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(User u : list)&#123;</span><br><span class="line">            System.out.println(u.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<p>a<br>b</p>
<p>默认为升序，将。return arg0.getOrder().compareTo(arg1.getOrder()); 改为：<br>return arg1.getOrder().compareTo(arg0.getOrder());<br>就成降序的了。</p>
<blockquote>
<p>转载自: <span class="exturl" data-url="aHR0cHM6Ly9tZS5jc2RuLm5ldC96eHlfc25vdw==" title="https://me.csdn.net/zxy_snow">csdn zxy_snow<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)修改iview默认样式,不影响全局</title>
    <url>/2019/01/08/(%E8%BD%AC)%E4%BF%AE%E6%94%B9iview%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F,%E4%B8%8D%E5%BD%B1%E5%93%8D%E5%85%A8%E5%B1%80/</url>
    <content><![CDATA[<p><code>&lt;style scoped&gt;</code>只作用于当前组件</p>
<p><code>&lt;style&gt;</code>作用于全局</p>
<a id="more"></a>


<p>1、找到表格，右键检查元素</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ivu-table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f8f8f9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2、到需要修改的页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.mytable</span> <span class="selector-class">.ivu-table</span> <span class="selector-tag">th</span>&#123;</span></span><br><span class="line">    background-color: black;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>说明，其他样式还是写在<code>&lt;style scoped&gt;</code>，此元素写在<code>&lt;style scoped&gt;</code>没有作用，写在<code>&lt;style&gt;</code>里面又会全部都修改。<br> 给组件外面包一层，然后再选。注意的是，名字要取好，因为此时。mytable是全局<br> 3、iview的modal遮罩层样式修改<br> class-name  设置对话框容器.ivu-modal-wrap的类名，可辅助实现垂直居中等自定义效果<br> 全局style，因为.ivu-modal-wrap在body里面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Modal</span> <span class="attr">class-name</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;<span class="name">Modal</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"> <span class="selector-class">.test</span>&#123;<span class="attribute">background-color</span>: <span class="number">#1890FF</span>;&#125;&lt;<span class="selector-tag">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>转载自:<span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9hM2E0NTczZjA2YzQ=" title="https://www.jianshu.com/p/a3a4573f06c4">懒羊羊3号<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Vue.js</category>
        <category>iView</category>
      </categories>
      <tags>
        <tag>iView</tag>
        <tag>修改样式</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统工具文件命令大全(持续更新)</title>
    <url>/2019/05/03/Mac%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a>homebrew</h3><p>配置brew镜像：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 替换brew.git:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 替换homebrew-core.git:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 重置brew.git:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 重置homebrew-core.git:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="string">"<span class="variable">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core"</span></span><br><span class="line">git remote <span class="built_in">set</span>-url origin https://github.com/Homebrew/homebrew-core.git</span><br></pre></td></tr></table></figure>



<a id="more"></a>

<h3 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h3><p>扩展使用：可以把非公共插件全部禁用，然后根据项目在扩展禁用栏中选择启动至工作区，这样即可以按需引入插件。</p>
<p>使用<code>Setting Sync</code>插件，将配置同步至github gist中，在切换设备时完美找回之前的配置</p>
<p><code>git lens</code>无与伦比的git插件。</p>
<p><code>shift + command + p</code> 命令行快捷键，有你想要的<br><code>command + p</code> 快速跳转文件，禅模式下很爽</p>
<h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><p>iTerm2</p>
<p>zsh</p>
<p>oh-my-zsh</p>
<p>.zshrc  tree配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="built_in">alias</span> tree=<span class="string">"find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"</span></span><br><span class="line">PATH=/bin:/usr/bin:/usr/<span class="built_in">local</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure>

<h3 id="Alfred4"><a href="#Alfred4" class="headerlink" title="Alfred4"></a>Alfred4</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="gif图制作：igif-builder"><a href="#gif图制作：igif-builder" class="headerlink" title="gif图制作：igif builder"></a>gif图制作：igif builder</h4><h4 id="截图：jietu"><a href="#截图：jietu" class="headerlink" title="截图：jietu"></a>截图：jietu</h4><p>这个工具是Tencent集成到Mac版qq中的，其中保存到粘贴板，可以直接用来粘贴到typora中写博客，并且图片质量刚刚好。</p>
<p><img src="/2019/05/03/Mac%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7%E6%80%BB%E7%BB%93/image-20200306230921579.png" alt="百度爬到"></p>
<h4 id="ftp-sftp传输：-filezilla"><a href="#ftp-sftp传输：-filezilla" class="headerlink" title="ftp/sftp传输： filezilla"></a>ftp/sftp传输： filezilla</h4><h4 id="视频播放：mpv"><a href="#视频播放：mpv" class="headerlink" title="视频播放：mpv"></a>视频播放：mpv</h4><h4 id="数据库GUI：Sequel-Pro-开发版本"><a href="#数据库GUI：Sequel-Pro-开发版本" class="headerlink" title="数据库GUI：Sequel Pro (开发版本)"></a>数据库GUI：Sequel Pro (开发版本)</h4><p>开发版本解决了sequel在高版本Macos中每次关闭报错。</p>
<h4 id="接口测试：postman"><a href="#接口测试：postman" class="headerlink" title="接口测试：postman"></a>接口测试：postman</h4><h4 id="系统管理：lemon"><a href="#系统管理：lemon" class="headerlink" title="系统管理：lemon"></a>系统管理：lemon</h4><p>Tencent推出的系统清理管理工具lemon，你问我为什么不用cleanmyMacX ？lemon免费</p>
<h4 id="magnet-pro"><a href="#magnet-pro" class="headerlink" title="magnet pro"></a>magnet pro</h4><p>这是一款控制窗口大小位置的好用app</p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><p>😎呼出emoji选择器：(control + command + space)</p>
<p>切换全屏应用：control + ←/→</p>
<p>调度中心：control + ↑</p>
<p>finder快速goto：command + shift + g</p>
<h2 id="常用文件位置"><a href="#常用文件位置" class="headerlink" title="常用文件位置"></a>常用文件位置</h2><ul>
<li><p>host: <code>/etc/hosts</code></p>
</li>
<li><p>~/.bash_profile: <code>/Users/zlatan</code></p>
</li>
</ul>
<p>~代表你的/home/用户明目录</p>
<p>假设你的用户名是x，那么~/就是/home/x/</p>
<p>.是代表此目录本身，但是一般可以不写</p>
<p>所以cd ~/. 和cd ~ 和cd ~/效果是一样的</p>
<p>但是.后面有东西又是另外一个问题，点在文件名头部，代表一个隐藏文件</p>
<p>~/.local是你的主目录下一个.local的文件夹的路径，</p>
<p>并且从.可以看出，这是一个饮藏文件，</p>
<p>如果不用ls -a的话，一般ls是无法看到的</p>
<ul>
<li><p>xcode命令行工具：<code>/Library/Developer/CommandLineTools/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xcode-select install</span><br><span class="line"></span><br><span class="line">xcode-select --switch /Library/Developer/CommandLineTools</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><code>chsh</code>: Linux chsh命令用于更改使用者 shell 设定。</p>
<p>使用权限：所有使用者。</p>
<h2 id="常见文件名"><a href="#常见文件名" class="headerlink" title="常见文件名"></a>常见文件名</h2><p><code>文件名带rc</code></p>
<p>在Linux中，最为常用的缩略语也许是“rc”，它是“runcomm”的缩写――即名词“run command”(运行命令)的简写。rc是任何脚本类文件的后缀，这些脚本通常在程序的启动阶段被调用，通常是Linux系统启动时。如/etc/rc（连接到/etc/rc.d/rc）是Linux启动的主脚本，而.bashrc是当Linux的bash shell启动后所运行的脚本。</p>
<p><code>.bashrc</code></p>
<p>的前缀“.”是一个命名标准，它被设计用来在用户文件中隐藏那些用户指定的特殊文件;“ls”命令默认情况下不会列出此类文件，“rm”默认情况下也不会删除它们。许多程序在启动时，都需要“rc”后缀的初始文件或配置文件，这对于Unix的文件系统视图来说，没有什么神秘的。</p>
]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Mac工具</tag>
        <tag>Mac命令</tag>
        <tag>Mac快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>hanoi塔算法理解</title>
    <url>/2020/02/24/hanoi%E5%A1%94%E7%AE%97%E6%B3%95%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>最近回忆起一个经典的递归题，汉诺塔，捋顺一下思路和代码。</p>
<p>前提：用abc代表汉诺塔的三根柱子，要求从a搬到c。</p>
<p>首先抽象出一个方法<code>hanoi(n, ori, mid, last)</code>,参数n是共计n层hanoi，ori是最初在哪根上，last是最后移到哪根上。</p>
<a id="more"></a>

<h3 id="现在聚焦a-gt-c过程中最底下的盘子n，将整个搬移步骤分位三步："><a href="#现在聚焦a-gt-c过程中最底下的盘子n，将整个搬移步骤分位三步：" class="headerlink" title="现在聚焦a=&gt;c过程中最底下的盘子n，将整个搬移步骤分位三步："></a>现在聚焦a=&gt;c过程中最底下的盘子n，将整个搬移步骤分位三步：</h3><ol>
<li><p>将上面共n-1层一起移动到柱b，这样就会呈现a柱只有第n层，b柱有共n-1层，c柱没有</p>
</li>
<li><p>将n层从a=&gt;c</p>
</li>
<li><p>再将b上的共n-1层移动到c。</p>
</li>
</ol>
<h3 id="上面三步正好可以转化成如下的动作："><a href="#上面三步正好可以转化成如下的动作：" class="headerlink" title="上面三步正好可以转化成如下的动作："></a>上面三步正好可以转化成如下的动作：</h3><ol>
<li>hanoi(n-1, a, c, b)</li>
<li>a=&gt;c</li>
<li>hanoi(n-1, b, a, c)</li>
</ol>
<p>具体的思考过程还可以通过n不断变大来递推，上面两段相当于直接告诉了提示的答案。</p>
<h2 id="递归小练习"><a href="#递归小练习" class="headerlink" title="递归小练习"></a>递归小练习</h2><p>为了趁热打铁，想起了一个好的例子，比如之前配置的<code>tree</code>命令，打印出当前目录下所有文件，这个就是一个递归的好例子。废话不多说看代码</p>
<p>这里levelCount 代表以当前文件夹等级为第一级，每一代子文件加一级，这样就可以根据等级显示|有多少个了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DirTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> levelCount = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * print this line's information, use | as file level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str file name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printLine</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        StringBuffer thisLine = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        thisLine.append(<span class="string">"|"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; levelCount - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            thisLine.append(<span class="string">" |"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        thisLine.append(<span class="string">"--"</span> + str);</span><br><span class="line">        System.out.println(thisLine);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * the recursive function</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fPath a absolutely file path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getDir</span><span class="params">(String fPath)</span> </span>&#123;</span><br><span class="line">        File currentFile = <span class="keyword">new</span> File(fPath);</span><br><span class="line">        <span class="keyword">if</span> (currentFile.isDirectory()) &#123;</span><br><span class="line">            String[] childrenFileNameLists = currentFile.list();</span><br><span class="line">            <span class="keyword">if</span> (childrenFileNameLists.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                levelCount++;</span><br><span class="line">                <span class="keyword">for</span> (String childrenFileName : childrenFileNameLists) &#123;</span><br><span class="line">                    File childrenFile = <span class="keyword">new</span> File(fPath + <span class="string">"/"</span> + childrenFileName);</span><br><span class="line">                    printLine(childrenFileName);</span><br><span class="line">                    <span class="keyword">if</span> (childrenFile.isDirectory()) &#123;</span><br><span class="line">                        getDir(fPath + <span class="string">"/"</span> + childrenFileName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                levelCount--;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"不是目录"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DirTree dirTree = <span class="keyword">new</span> DirTree();</span><br><span class="line">        System.out.println(<span class="string">"请输入想打印的文件目录"</span>);</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String filePath = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(filePath);</span><br><span class="line">        System.out.println(<span class="string">"."</span>);</span><br><span class="line">        dirTree.getDir(filePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行效果如下:</p>
<p><img src="/2020/02/24/hanoi%E5%A1%94%E7%AE%97%E6%B3%95%E7%90%86%E8%A7%A3/48697D36-D378-4CB9-ABA0-49D53A00270F.png" alt="结果"></p>
<p>和文件结构一样，运行成功。</p>
]]></content>
  </entry>
  <entry>
    <title>2月8日与18级同学分享直播</title>
    <url>/2020/02/08/208share/</url>
    <content><![CDATA[<h1 id="简单谈编程动手能力（软件为主）"><a href="#简单谈编程动手能力（软件为主）" class="headerlink" title="简单谈编程动手能力（软件为主）"></a>简单谈编程动手能力（软件为主）</h1><h2 id="前言：谈谈锻炼动手能力的用处"><a href="#前言：谈谈锻炼动手能力的用处" class="headerlink" title="前言：谈谈锻炼动手能力的用处"></a>前言：谈谈锻炼动手能力的用处</h2><p>保研，考研，出国，工作</p>
<a id="more"></a>

<h2 id="1-关于课内"><a href="#1-关于课内" class="headerlink" title="1. 关于课内"></a>1. 关于课内</h2><p>上机考试尽量满分，课内掌握好才能课外做东西</p>
<p>有大作业的科目, 如c++,  数据库，java，计算机网络，要加以重视，对于作业完成的速度和质量。</p>
<p>需要强调的是，由于课内的大作业比较简单，而且问题比较具体化，因此遇到问题尽最大努力个人解决，卡得太久了再考虑百度。</p>
<p>如果对于作业整体没有概念，找视频学习。</p>
<h2 id="2-关于小学期"><a href="#2-关于小学期" class="headerlink" title="2. 关于小学期"></a>2. 关于小学期</h2><p>尽量使用老师提供的技术，看看能做出来什么东西，或以此为基础添加其他技术，不要跨越它。</p>
<p>比如大二小学期，jsp。</p>
<p>课内，小学期扎实的是基础，还有短期内的学习能力，不要好高骛远，因为以后很少有锻炼基础的机会，当然基础好的同学除外。</p>
<h2 id="3-大创，课外比赛"><a href="#3-大创，课外比赛" class="headerlink" title="3.大创，课外比赛"></a>3.大创，课外比赛</h2><p>题目+技术</p>
<h3 id="a-先有题目考虑技术"><a href="#a-先有题目考虑技术" class="headerlink" title="a. 先有题目考虑技术"></a>a. 先有题目考虑技术</h3><p>视频入门+多看文档</p>
<h3 id="b-先有技术想题目"><a href="#b-先有技术想题目" class="headerlink" title="b. 先有技术想题目"></a>b. 先有技术想题目</h3><h2 id="4-关于软硬件学习比重问题"><a href="#4-关于软硬件学习比重问题" class="headerlink" title="4. 关于软硬件学习比重问题"></a>4. 关于软硬件学习比重问题</h2><p>根据个人爱好，都有好的比赛，课程都别落下，毕竟软+硬是我们通信工程的特色，要好好利用起来。</p>
<h2 id="5-学习方法"><a href="#5-学习方法" class="headerlink" title="5.学习方法"></a>5.学习方法</h2><p>擅长搜索，google当然最好，百度也能解决99%的问题。github的问题讨论区，stackoverflow</p>
<p>课内项目用来锻炼独立解决问题能力，课外项目锻炼搜索能力，多搜索自然知道哪些网站解决哪些技术好。</p>
<p>写文档，技术博客</p>
<p>最佳视频学习网站：bilibili（转载了各大收费的学习网站等等）</p>
<p>手里没有项目怎么办：选学习曲线平缓的语言技术，github上找项目，给喜欢玩的游戏做mod等等。</p>
<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2>]]></content>
      <categories>
        <category>本科学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Git与Git相关命令</title>
    <url>/2020/03/17/Git%E4%B8%8EGit%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><blockquote>
<p><span class="exturl" data-url="aHR0cDovL2lpc3NuYW4uY29tL3Byb2dpdC9odG1sL3poL2NoMl82Lmh0bWw=" title="http://iissnan.com/progit/html/zh/ch2_6.html">Pro Git 中文版<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="最常用"><a href="#最常用" class="headerlink" title="最常用"></a>最常用</h2><p><code>git status</code></p>
<p><code>git add .</code></p>
<p><code>git commit -m &quot;balabala&quot;</code></p>
<p>git commit -amend 将此次更新文件并入到上次commit的记录中，不新添加commit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure>

<p>如果上一次提交没提交完，这个命令可以把当前文件添加到上一次提交中。</p>
<p>git push`</p>
<a id="more"></a>

<h2 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h2><p><code>git ls-tree HEAD</code></p>
<p><img src="/2020/03/17/Git%E4%B8%8EGit%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/6EF187FF-E93A-41B6-B244-3A4C508078F6.png" alt="ls-tree"></p>
<p>其中 commit 说明这一行这个文件夹被git当成子模块了。如果想转变回当前git的模块直接删除其.git还不行，</p>
<p>还要用下面的命令 git rm –cached MyBatisPlus_page_tables</p>
<p>这样它就从你的git tree中移除了</p>
<p>再用 git add. commit添加后 发现就是当前git树的内容了。</p>
<p><code>git rm --cached -r .</code></p>
<p>关于  git rm –help 中的–cached参数</p>
<p>–cached<br>           Use this option to unstage and remove paths only from the index. Working tree files, whether modified or not, will be left alone.</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><code>git init</code></p>
<p><code>git remote add origin git@github.com:User/project.git</code></p>
<p><code>git push -u origin master</code></p>
<h2 id="分支相关"><a href="#分支相关" class="headerlink" title="分支相关"></a>分支相关</h2><p><code>git checkout -b newbranch</code></p>
<p><code>git merge anotherbranch</code></p>
<p>git branch //显示本地分支<br>git branch -a //显示远程分支</p>
<h2 id="ssh连接远程相关"><a href="#ssh连接远程相关" class="headerlink" title="ssh连接远程相关"></a>ssh连接远程相关</h2><p><code>ssh-keygen -t rsa -C “user@hostname.com”</code></p>
<p><code>ssh-add privateKey</code></p>
<p><code>ssh-add -K privateKey</code></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>How you doing?</title>
    <url>/9999/02/13/hometop/</url>
    <content><![CDATA[<p>2021/4/7 最近在研究所打工，争取有空多更新更新！！！</p>
<hr>
<p>欢迎各位网友来到的我的博客，</p>
<p>这个博客用来记录一些开发中遇到的问题，和相关的分享~🥳</p>
]]></content>
  </entry>
  <entry>
    <title>Servlet允许跨域处理</title>
    <url>/2018/08/19/Servlet%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="Servlet允许跨域处理"><a href="#Servlet允许跨域处理" class="headerlink" title="Servlet允许跨域处理"></a>Servlet允许跨域处理</h1><p>使用 CORS协议允许 Response 跨域的方案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 允许跨域的主机地址 */</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);  </span><br><span class="line"><span class="comment">/* 允许跨域的请求方法GET, POST, HEAD 等 */</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"*"</span>);  </span><br><span class="line"><span class="comment">/* 重新预检验跨域的缓存时间 (s) */</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);  </span><br><span class="line"><span class="comment">/* 允许跨域的请求头 */</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"*"</span>);  </span><br><span class="line"><span class="comment">/* 是否携带cookie */</span></span><br><span class="line">response.setHeader(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>Jsp</category>
      </categories>
      <tags>
        <tag>servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js 并行处理Promise</title>
    <url>/2020/03/02/nodejs%E5%B9%B6%E8%A1%8C%E5%A4%84%E7%90%86promise/</url>
    <content><![CDATA[<h3 id="情景解释"><a href="#情景解释" class="headerlink" title="情景解释"></a>情景解释</h3><p>之前发现微信小程序云开发功能提供了免费的云函数，但是对于node.js没有接触，只使用了<code>wx.getcontent()</code>获取用户标识，后端还是使用springboot，最近开始学习nodejs进行后端开发。</p>
<p>当我们发送一组异步请求/从数据库取出一组满足要求的数据，要怎么处理那，例如: 有一个数组<code>a</code>，我们在数据库表<code>user</code>中寻找字段<code>t1</code>等于的每一行数据。</p>
<p>我用微信小程序的本地调试工具对几种方法进行了测试，并记录了响应时间。</p>
<a id="more"></a>

<h3 id="方法测试"><a href="#方法测试" class="headerlink" title="方法测试"></a>方法测试</h3><p>其中test()函数是从数据库中取出一个数据，</p>
<p><code>test2()</code>是在每个<code>promise对象</code>的`resolve中进行数据处理，时间等于取三个数据，</p>
<p><code>test3()</code>和<code>test4()</code>都是先保存一个<code>promise数组</code>，然后对这个<code>promise数组</code>进行操作，这两种方法的时间都和取出一个数据是相同的。</p>
<p>综合这几种方式，<code>test3()</code>的实现是最令人满意的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 云函数入口文件</span></span><br><span class="line"><span class="keyword">const</span> cloud = <span class="built_in">require</span>(<span class="string">'wx-server-sdk'</span>)</span><br><span class="line"></span><br><span class="line">cloud.init(&#123;</span><br><span class="line">  env: <span class="string">'wxbase1-bdeeac'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db = cloud.database()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1Array = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]</span><br><span class="line"><span class="keyword">const</span> t2Array = []</span><br><span class="line"></span><br><span class="line"><span class="comment">//471ms</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> b = []</span><br><span class="line">  <span class="keyword">let</span> a = <span class="keyword">await</span> db.collection(<span class="string">'user'</span>)</span><br><span class="line">    .where(&#123;</span><br><span class="line">      t1: <span class="string">'1'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .get().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res)</span><br><span class="line">      b.push(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1441ms</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a1 = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> t1 <span class="keyword">of</span> t1Array) &#123;</span><br><span class="line">    <span class="keyword">await</span> db.collection(<span class="string">'user'</span>)</span><br><span class="line">      .where(&#123;</span><br><span class="line">        t1: t1</span><br><span class="line">      &#125;).get().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        a1.push(res.data[<span class="number">0</span>])</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 474ms</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> tasks = t1Array.map(<span class="function"><span class="params">t1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> temp = db.collection(<span class="string">'user'</span>)</span><br><span class="line">      .where(&#123;</span><br><span class="line">        t1: t1</span><br><span class="line">      &#125;).get()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params"><span class="keyword">await</span> <span class="built_in">Promise</span>.all(tasks</span>)).<span class="params">reduce</span>(<span class="params">(acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      data: acc.data.concat(cur.data),</span><br><span class="line">      errMsg: acc.errMsg,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//496毫秒</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test4</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a1 = []</span><br><span class="line">  <span class="keyword">const</span> tasks = t1Array.map(<span class="function"><span class="params">t1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> temp = db.collection(<span class="string">'user'</span>)</span><br><span class="line">      .where(&#123;</span><br><span class="line">        t1: t1</span><br><span class="line">      &#125;).get()</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> task <span class="keyword">of</span> tasks)&#123;</span><br><span class="line">    <span class="keyword">const</span> temp = <span class="keyword">await</span> task</span><br><span class="line">    a1.push(temp.data[<span class="number">0</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 云函数入口函数</span></span><br><span class="line">exports.main = <span class="keyword">async</span>(event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> test3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中数组的<code>reduce(function sum())</code>方法，传递一个累加器函数，其中第一个参数相当于<code>sum</code>，第二个参数相当于<code>每一个数据</code>。</p>
<p>如<code>test3()</code>处理的操作，可以将每一次返回的数组转化为一个数组</p>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx下ssl证书安装</title>
    <url>/2018/08/20/nginx%E4%B8%8Bssl%E8%AF%81%E4%B9%A6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="操作场景"><a href="#操作场景" class="headerlink" title="操作场景"></a>操作场景</h2><p>本文档指导您如何在 Nginx 服务器中安装 SSL 证书。</p>
<blockquote>
<p>说明：</p>
<ul>
<li>本文档以证书名称 <code>www.domain.com</code> 为例。</li>
<li>Nginx 版本以 <code>nginx/1.16.0</code> 为例。</li>
<li>当前服务器的操作系统为 CentOS 7，由于操作系统的版本不同，详细操作步骤略有区别。</li>
</ul>
</blockquote>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul>
<li><p>已准备文件远程拷贝软件，例如 WinSCP（建议从官方网站获取最新版本）。</p>
</li>
<li><p>已准备远程登录工具，例如 PuTTY 或者 Xshell（建议从官方网站获取最新版本）。</p>
</li>
<li><p>已在当前服务器中安装配置 Nginx 服务。</p>
</li>
<li><p>安装 SSL 证书前需准备的数据如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>服务器的 IP 地址</td>
<td>服务器的 IP 地址，用于 PC 连接到服务器。</td>
</tr>
<tr>
<td>用户名</td>
<td>登录服务器的用户名。</td>
</tr>
<tr>
<td>密码</td>
<td>登录服务器的密码。</td>
</tr>
</tbody></table>
</li>
</ul>
<a id="more"></a>

<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="证书安装"><a href="#证书安装" class="headerlink" title="证书安装"></a>证书安装</h3><ol>
<li>已在</li>
</ol>
<p>   SSL 证书管理控制台</p>
<p>   中下载并解压缩</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.domain.com</span><br></pre></td></tr></table></figure>



<p>   证书文件包到本地目录。</p>
<p>   解压缩后，可获得相关类型的证书文件。其中包含 Nginx 文件夹和 CSR 文件：</p>
<ul>
<li><p><strong>文件夹名称</strong>：Nginx</p>
</li>
<li><p>文件夹内容：</p>
<ul>
<li><code>1_www.domain.com_bundle.crt</code> 证书文件</li>
<li><code>2_www.domain.com.key</code> 私钥文件</li>
</ul>
</li>
<li><p>CSR 文件内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www.domain.com.csr</span><br></pre></td></tr></table></figure>



</li>
</ul>
<pre><code>文件

&gt; 说明：
&gt;
&gt; CSR 文件是申请证书时由您上传或系统在线生成的，提供给 CA 机构。安装时可忽略该文件。</code></pre><ol start="2">
<li><p>使用 “WinSCP”（即本地与远程计算机间的复制文件工具）登录 Nginx 服务器。</p>
</li>
<li><p>将已获取到的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1_www.domain.com_bundle.crt</span><br></pre></td></tr></table></figure>



</li>
</ol>
<p>   证书文件和 </p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2_www.domain.com.key</span><br></pre></td></tr></table></figure>



<p>   私钥文件从本地目录拷贝到 Nginx 服务器的</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</span><br></pre></td></tr></table></figure>



<p>   目录（此处为默认安装目录，请根据实际情况操作）下。</p>
<blockquote>
<p>说明：</p>
<p>若无 <code>/usr/local/nginx/conf</code> 目录，可通过执行 <code>mkdir -p /usr/local/nginx/conf</code> 命令行创建。</p>
</blockquote>
<ol start="4">
<li><p>远程登录 Nginx 服务器。例如，使用 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzIxMy8zNTY5OSMuRTYuOTMuOEQuRTQuQkQuOUMuRTYuQUQuQTUuRTkuQUEuQTQ=" title="https://cloud.tencent.com/document/product/213/35699#.E6.93.8D.E4.BD.9C.E6.AD.A5.E9.AA.A4">“PuTTY” 工具<i class="fa fa-external-link"></i></span> 登录。</p>
</li>
<li><p>编辑 Nginx 根目录下的</p>
</li>
</ol>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conf&#x2F;nginx.conf</span><br></pre></td></tr></table></figure>



<p>   文件。修改内容如下：</p>
<blockquote>
<p>说明：</p>
<ul>
<li>此操作可通过执行 <code>vim /usr/local/nginx/conf/nginx.conf</code> 命令行编辑该文件。</li>
<li>由于版本问题，配置文件可能存在不同的写法。例如：Nginx 版本为 <code>nginx/1.15.0</code> 以上请使用 <code>listen 443 ssl</code> 代替 <code>listen 443</code> 和 <code>ssl on</code>。</li>
</ul>
</blockquote>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">     #SSL 访问端口号为 443</span><br><span class="line">     listen 443 ssl; </span><br><span class="line">     #填写绑定证书的域名</span><br><span class="line">     server_name www.domain.com; </span><br><span class="line">     #证书文件名称</span><br><span class="line">     ssl_certificate 1_www.domain.com_bundle.crt; </span><br><span class="line">     #私钥文件名称</span><br><span class="line">     ssl_certificate_key 2_www.domain.com.key; </span><br><span class="line">     ssl_session_timeout 5m;</span><br><span class="line">     #请按照以下协议配置</span><br><span class="line">     ssl_protocols TLSv1 TLSv1.1 TLSv1.2; </span><br><span class="line">     #请按照以下套件配置，配置加密套件，写法遵循 openssl 标准。</span><br><span class="line">     ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; </span><br><span class="line">     ssl_prefer_server_ciphers on;</span><br><span class="line">     location &#x2F; &#123;</span><br><span class="line">        #网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class="line">         root &#x2F;var&#x2F;www&#x2F;www.domain.com; </span><br><span class="line">         index  index.html index.htm;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<ol start="6">
<li><p>在 Nginx 根目录下，通过执行以下命令验证配置文件问题。</p>
<ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;sbin&#x2F;nginx -t</span><br></pre></td></tr></table></figure>
</li>
<li><p>若存在，请您重新配置或者根据提示修改存在问题。</p>
</li>
<li><p>若不存在，请执行 <span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzQwMC8zNTI0NCNzdGVwNw==" title="https://cloud.tencent.com/document/product/400/35244#step7">步骤7<i class="fa fa-external-link"></i></span>。</p>
</li>
</ul>
</li>
<li><p>重启 Nginx，即可使用 <code>https://www.domain.com</code> 进行访问。</p>
</li>
</ol>
<h3 id="HTTP-自动跳转-HTTPS-的安全配置（可选）"><a href="#HTTP-自动跳转-HTTPS-的安全配置（可选）" class="headerlink" title="HTTP 自动跳转 HTTPS 的安全配置（可选）"></a>HTTP 自动跳转 HTTPS 的安全配置（可选）</h3><p>若您不了解通过 HTTPS 访问网站的方式，可以通过配置服务器，让其自动将 HTTP 的请求重定向到 HTTPS。您可以通过以下操作设置：</p>
<ol>
<li><p>根据实际需求，选择以下配置方式：</p>
<ul>
<li><p>在页面中添加 JS 脚本。</p>
</li>
<li><p>在后端程序中添加重定向。</p>
</li>
<li><p>通过 Web 服务器实现跳转。</p>
</li>
<li><p>Nginx 支持 rewrite 功能。若您在编译时没有去掉 pcre，您可在 HTTP 的 server 中增加</p>
</li>
</ul>
</li>
</ol>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rewrite ^(.*) https:&#x2F;&#x2F;$host$1 permanent;</span><br></pre></td></tr></table></figure>

，即可将默认80端口的请求重定向为 HTTPS。修改如下内容：

- 

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 443 ssl;</span><br><span class="line">#填写绑定证书的域名</span><br><span class="line">server_name www.domain.com; </span><br><span class="line">#网站主页路径。此路径仅供参考，具体请您按照实际目录操作。</span><br><span class="line">root &#x2F;var&#x2F;www&#x2F;www.domain.com; </span><br><span class="line">index index.html index.htm;   </span><br><span class="line">#证书文件名称</span><br><span class="line">ssl_certificate  1_www.domain.com_bundle.crt; </span><br><span class="line">#私钥文件名称</span><br><span class="line">ssl_certificate_key 2_www.domain.com.key; </span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">location &#x2F; &#123;</span><br><span class="line">   index index.html index.htm;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">#填写绑定证书的域名</span><br><span class="line">server_name www.domain.com; </span><br><span class="line">#把http的域名请求转成https</span><br><span class="line">return 301 https:&#x2F;&#x2F;$host$request_uri; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

&gt; 说明：
&gt;
&gt; 未添加注释的配置语句，您按照上述配置即可。</code></pre><ol start="2">
<li>若修改完成，重启 Nginx。即可使用 <code>http://www.domain.com</code> 进行访问。</li>
</ol>
<blockquote>
<p>参考：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kb2N1bWVudC9wcm9kdWN0LzQwMC8zNTI0NA==" title="https://cloud.tencent.com/document/product/400/35244">腾讯云文档中心<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>基于BP神经网络的NBA球员薪资评估</title>
    <url>/2019/07/01/%E5%9F%BA%E4%BA%8EBP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84NBA%E7%90%83%E5%91%98%E8%96%AA%E8%B5%84%E8%AF%84%E4%BC%B0/</url>
    <content><![CDATA[<p>这篇文章是我在学校大数据课的一篇论文，有兴趣的可以详细了解。</p>
<h1 id="一、研究意义"><a href="#一、研究意义" class="headerlink" title="一、研究意义"></a>一、研究意义</h1><p>在当今NBA的时代背景下，左右球队能在一个赛季走多远的不止是教练的精妙布置和球员在场上的努力发挥，球队在休赛期间的交易十分重要，比如2017年杜兰特加盟勇士队，和联盟第一球星詹姆斯的几次转回，还有猛龙与马刺的交易等，这些重磅交易不仅引起了巨大的关注，同时也为近几年来NBA总冠军的归属和联盟的格局埋下了伏笔。不止是超级巨星，包括明星球员和重要角色球员的转回，都可能为球队的比赛以及运营带来巨大的影响；而交易最重要得一个环节就是薪水的评估，球队和球员双方可能需要很多人员对球员的场上数据，身体条件进行评估，同时基于市场考虑谈判出一个令双方都满意的结果。因此我针对这一现象，基于老师提供的BP神经网络算法和相关实现代码，提出一套评估球员薪水的解决方案，这套方案还有很大不足和需要进步之处，希望能够在日后的学习中不断弥补。</p>
<a id="more"></a>

<h1 id="二、数据描述"><a href="#二、数据描述" class="headerlink" title="二、数据描述"></a>二、数据描述</h1><p>国内的虎扑社区提供了NBA的篮球数据，供球迷使用，其中包括了球员的合同和当季薪资，这里我使用requests库来发送http请求，使用BeautifulSoup库解析html。数据来源网站即是<span class="exturl" data-url="aHR0cHM6Ly9uYmEuaHVwdS5jb20vcGxheWVycw==" title="https://nba.hupu.com/players">虎扑网站<i class="fa fa-external-link"></i></span>。</p>
<p><strong>表2-1 数据属性结构</strong></p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th><strong>作用</strong></th>
<th><strong>属性</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>场均得分</td>
<td>神经元输入</td>
<td>场均三分命中率</td>
<td>神经元输入</td>
</tr>
<tr>
<td>场均篮板</td>
<td>神经元输入</td>
<td>场均罚球命中率</td>
<td>神经元输入</td>
</tr>
<tr>
<td>场均助攻</td>
<td>神经元输入</td>
<td>场均抢断</td>
<td>神经元输入</td>
</tr>
<tr>
<td>场均投篮命中率</td>
<td>神经元输入</td>
<td>场均盖帽</td>
<td>神经元输入</td>
</tr>
<tr>
<td>薪资水平</td>
<td>神经元输出</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>我爬取了2018-2019赛季常规赛30个球队每名球员的场均得分，场均篮板，场均助攻，场均抢断，场均盖帽，场均投篮命中率，场均三分命中率，场均罚球命中率，当季共9个属性，497条数据。在预处理过程中将当季薪资为0或者没有信息的数据删除，因为这些球员可能别没有签约，其他8项属性作为输入神经元，并将球员按照薪资水平，每500W美元为一个档次，构建出可以与输出矩阵做算术运算格式匹配的响应的Y矩阵。</p>
<p>如表2-1所示，通过numpy库的save方法将数据保存，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">save(<span class="string">"date_players.npy"</span>, date_players)</span><br></pre></td></tr></table></figure>

<h2 id="预处理："><a href="#预处理：" class="headerlink" title="预处理："></a>预处理：</h2><p>如果在爬取数据过程中球员薪水没有获取到，说明该球员可能没有签约，因此将该数据删除，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预处理</span></span><br><span class="line"></span><br><span class="line">    data = pd.DataFrame(date_players)</span><br><span class="line"></span><br><span class="line">    data_salary = data.iloc[:,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    data_salary[data_salary == <span class="number">0</span>] = np.NAN</span><br><span class="line"></span><br><span class="line">    data_new = np.hstack((date_players[:,:<span class="number">8</span>], np.array([data_salary]).T))</span><br><span class="line"></span><br><span class="line">    data2 = pd.DataFrame(data_new).dropna(thresh=<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">    date_players_new = np.array(data2)</span><br><span class="line"></span><br><span class="line">    xdata_ori = date_players_new[:,:<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    salary_ori = date_players_new[:,<span class="number">8</span>]//<span class="number">500</span> <span class="comment">#以500W为间隔</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 预处理结束</span></span><br></pre></td></tr></table></figure>

<h2 id="归一化："><a href="#归一化：" class="headerlink" title="归一化："></a>归一化：</h2><p>在我分析完老师提供的bp神经网络代码实现后，发现其中使用的S函数等函数，值域在[0,1]之间，因此神经元的输入必须进行归一化处理，否则将可能报错；同时归一化处理也将神经元输入的各种数据进行平权处理。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"></span><br><span class="line">    maxVals = xdata_ori.max(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    minVals = xdata_ori.min(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    ranges = maxVals - minVals</span><br><span class="line"></span><br><span class="line">    m = xdata_ori.shape[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    normDataSet = (xdata_ori - np.tile(minVals, (m, <span class="number">1</span>))) / np.tile(ranges, (m, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    trainX = normDataSet.T</span><br><span class="line"><span class="comment"># 归一化结束</span></span><br></pre></td></tr></table></figure>

<h2 id="处理Y矩阵："><a href="#处理Y矩阵：" class="headerlink" title="处理Y矩阵："></a>处理Y矩阵：</h2><p>因为爬取到的只是薪资数据，为了跑通BP神经网络算法，必须将数据进行处理，处理方法为：根据输出长度生成一列0矩阵，根据薪资水平的档次将该矩阵的某一个数据设置为1，在bp神经网络进行迭代的过程中，每一次向前传递都会得出一组输出<code>tempY</code>，其中<code>tempY</code>中每个数据及为是这一类的概率有多少，使用处理过的Y矩阵与<code>tempY</code>进行数学运算即可向后传递，不断迭代即可训练出合适的参数。</p>
<h1 id="三、模型描述"><a href="#三、模型描述" class="headerlink" title="三、模型描述"></a>三、模型描述</h1><h2 id="典型的神经元模型："><a href="#典型的神经元模型：" class="headerlink" title="典型的神经元模型："></a>典型的神经元模型：</h2><p><img src="/2019/07/01/%E5%9F%BA%E4%BA%8EBP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84NBA%E7%90%83%E5%91%98%E8%96%AA%E8%B5%84%E8%AF%84%E4%BC%B0/image-20200217163219161.png" alt="典型的神经元模型"></p>
<h2 id="神经网络结构（单一输出）："><a href="#神经网络结构（单一输出）：" class="headerlink" title="神经网络结构（单一输出）："></a>神经网络结构（单一输出）：</h2><p><img src="/2019/07/01/%E5%9F%BA%E4%BA%8EBP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84NBA%E7%90%83%E5%91%98%E8%96%AA%E8%B5%84%E8%AF%84%E4%BC%B0/image-20200217163239394.png" alt="神经网络结构"></p>
<h2 id="BP神经网络基本原理："><a href="#BP神经网络基本原理：" class="headerlink" title="BP神经网络基本原理："></a>BP神经网络基本原理：</h2><p>分为两个过程：</p>
<p>工作信号正向传递子过程，输入信息从输入层经隐层逐层、正向传递，直至得到各计算单元的输出。</p>
<p>误差信号反向传递子过程，输出层误差从输出层开始，逐层、反向传播，可间接计算隐层各单元的误差，并用此误差修正前层的权值。</p>
<p>Bp算法主要函数如下：</p>
<ul>
<li><p><code>iniPara()</code>：根据给定的神经网络结构根据正态分布随机初始化一套参数；</p>
</li>
<li><p><code>forwardModel(X, parameters)</code>：一个完整的向前传播过程，根据输入X和神经网络中间参数parameters，返回输出和中间每一层的参数。</p>
</li>
<li><p><code>backwardModel(AL, Y, caches)</code>：完整的反向传播过程，根据输出和真实的Y矩阵进行计算，同时计算每一隐含层梯度，返回梯度矩阵diffs</p>
</li>
<li><p><code>updateParameters(parameters, diffs, learningRate)</code>：根据之前的参数，梯度矩阵diffs和学习率，进行参数更新，返回新的参数。</p>
</li>
<li><p><code>predict(X, y, parameters, ifPrint)</code>：预测函数，根据训练好的参数和新的输入，预测输出，并且可以和实际情况Y做对比，根据ifPrint是否打印输出算法准确率。</p>
</li>
</ul>
<h1 id="四、算法实现"><a href="#四、算法实现" class="headerlink" title="四、算法实现:"></a>四、算法实现:</h1><p>经过精读老师提供的bp神经网络实现代码，发现其中核心函数中可以修改地方只有激活函数的选取可以更改，而根据bp神经网络原理可知，在神经网络的中间层更加建议使用<code>relu函数</code>。</p>
<p>如果<code>bp神经网络</code>的输出不是单输出，<code>predict函数</code>需要进行修改(位于代码最后)，我对该函数进行修改后使其能够应对多种输出情况，代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Created on Sat Oct 14 09:54:44 2017</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: zhangshichaochina@gmail.com</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> h5py</span><br><span class="line"><span class="keyword">import</span> scipy</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> ndimage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    使用numpy实现sigmoid函数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    Z numpy array</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    A 激活值（维数和Z完全相同）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span> + np.exp(-z))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">relu</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    线性修正函数relu</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    z numpy array</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    A 激活值（维数和Z完全相同）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> np.array(z&gt;<span class="number">0</span>)*z</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoidBackward</span><span class="params">(dA, cacheA)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    sigmoid的反向传播</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    dA 同层激活值</span></span><br><span class="line"><span class="string">    cacheA 同层线性输出</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    dZ 梯度</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = sigmoid(cacheA)</span><br><span class="line">    diff = s*(<span class="number">1</span> - s)</span><br><span class="line">    dZ = dA * diff</span><br><span class="line">    <span class="keyword">return</span> dZ</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reluBackward</span><span class="params">(dA, cacheA)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    relu的反向传播</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    dA 同层激活值</span></span><br><span class="line"><span class="string">    cacheA 同层线性输出</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    dZ 梯度</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    Z = cacheA</span><br><span class="line">    dZ = np.array(dA, copy=<span class="literal">True</span>) </span><br><span class="line">    dZ[Z &lt;= <span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> dZ</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iniPara</span><span class="params">(laydims)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    随机初始化网络参数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    laydims 一个python list</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    parameters 随机初始化的参数字典（”W1“，”b1“，”W2“，”b2“, ...）</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    np.random.seed(<span class="number">1</span>)</span><br><span class="line">    parameters = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(laydims)):</span><br><span class="line">        parameters[<span class="string">'W'</span>+str(i)] = np.random.randn(laydims[i], laydims[i<span class="number">-1</span>])/ np.sqrt(laydims[i<span class="number">-1</span>])</span><br><span class="line">        parameters[<span class="string">'b'</span>+str(i)] = np.zeros((laydims[i], <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadData</span><span class="params">(dataDir)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    导入数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    dataDir 数据集路径</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    训练集，测试集以及标签</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    train_dataset = h5py.File(dataDir+<span class="string">'/train.h5'</span>, <span class="string">"r"</span>)</span><br><span class="line">    train_set_x_orig = np.array(train_dataset[<span class="string">"train_set_x"</span>][:]) <span class="comment"># your train set features</span></span><br><span class="line">    train_set_y_orig = np.array(train_dataset[<span class="string">"train_set_y"</span>][:]) <span class="comment"># your train set labels</span></span><br><span class="line"></span><br><span class="line">    test_dataset = h5py.File(dataDir+<span class="string">'/test.h5'</span>, <span class="string">"r"</span>)</span><br><span class="line">    test_set_x_orig = np.array(test_dataset[<span class="string">"test_set_x"</span>][:]) <span class="comment"># your test set features</span></span><br><span class="line">    test_set_y_orig = np.array(test_dataset[<span class="string">"test_set_y"</span>][:]) <span class="comment"># your test set labels</span></span><br><span class="line"></span><br><span class="line">    classes = np.array(test_dataset[<span class="string">"list_classes"</span>][:]) <span class="comment"># the list of classes</span></span><br><span class="line">    </span><br><span class="line">    train_set_y_orig = train_set_y_orig.reshape((<span class="number">1</span>, train_set_y_orig.shape[<span class="number">0</span>]))</span><br><span class="line">    test_set_y_orig = test_set_y_orig.reshape((<span class="number">1</span>, test_set_y_orig.shape[<span class="number">0</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forwardLinear</span><span class="params">(W, b, A_prev)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    前向传播</span></span><br><span class="line"><span class="string">    特征乘权值+b</span></span><br><span class="line"><span class="string">    Z 就是乘激活函数前的东西</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    Z = np.dot(W, A_prev) + b</span><br><span class="line">    cache = (W, A_prev, b)</span><br><span class="line">    <span class="keyword">return</span> Z, cache</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forwardLinearActivation</span><span class="params">(W, b, A_prev, activation)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    带激活函数的前向传播</span></span><br><span class="line"><span class="string">    A: 加上激活函数的效果</span></span><br><span class="line"><span class="string">    cacheL: 最原始的参数</span></span><br><span class="line"><span class="string">    cacheA: 加权后的参数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    Z, cacheL = forwardLinear(W, b, A_prev)</span><br><span class="line">    cacheA = Z</span><br><span class="line">    <span class="keyword">if</span> activation == <span class="string">'sigmoid'</span>:</span><br><span class="line">        A = sigmoid(Z)</span><br><span class="line">    <span class="keyword">if</span> activation == <span class="string">'relu'</span>:</span><br><span class="line">        A = relu(Z)</span><br><span class="line">    cache = (cacheL, cacheA)</span><br><span class="line">    <span class="keyword">return</span> A, cache</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forwardModel</span><span class="params">(X, parameters)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    完整的前向传播过程</span></span><br><span class="line"><span class="string">    X: 训练集特征</span></span><br><span class="line"><span class="string">    AL: 完整前项传播得到的输出</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    layerdim = len(parameters)//<span class="number">2</span> <span class="comment">#有几层对应隐含层</span></span><br><span class="line">    caches = []</span><br><span class="line">    A_prev = X</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, layerdim):</span><br><span class="line">        A_prev, cache = forwardLinearActivation(parameters[<span class="string">'W'</span>+str(i)], parameters[<span class="string">'b'</span>+str(i)], A_prev, <span class="string">'relu'</span>)</span><br><span class="line">        caches.append(cache)</span><br><span class="line">        </span><br><span class="line">    AL, cache = forwardLinearActivation(parameters[<span class="string">'W'</span>+str(layerdim)], parameters[<span class="string">'b'</span>+str(layerdim)], A_prev, <span class="string">'sigmoid'</span>)</span><br><span class="line">    caches.append(cache)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> AL, caches</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">computeCost</span><span class="params">(AL, Y)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    代价函数的计算</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    AL 输出层的激活输出</span></span><br><span class="line"><span class="string">    Y 标签值</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    cost 代价函数值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    m = Y.shape[<span class="number">1</span>]</span><br><span class="line">    cost = (<span class="number">1.</span>/m) * (-np.dot(Y,np.log(AL).T) - np.dot(<span class="number">1</span>-Y, np.log(<span class="number">1</span>-AL).T))</span><br><span class="line">    <span class="keyword">return</span> cost</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linearBackward</span><span class="params">(dZ, cache)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    线性部分的反向传播</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    dZ 当前层误差</span></span><br><span class="line"><span class="string">    cache （W, A_prev, b）元组</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    dA_prev 上一层激活的梯度</span></span><br><span class="line"><span class="string">    dW 当前层W的梯度</span></span><br><span class="line"><span class="string">    db 当前层b的梯度</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    W, A_prev, b = cache</span><br><span class="line">    m = A_prev.shape[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    dW = <span class="number">1</span>/m*np.dot(dZ, A_prev.T)</span><br><span class="line">    db = <span class="number">1</span>/m*np.sum(dZ, axis = <span class="number">1</span>, keepdims=<span class="literal">True</span>)</span><br><span class="line">    dA_prev = np.dot(W.T, dZ)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dA_prev, dW, db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">linearActivationBackward</span><span class="params">(dA, cache, activation)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    非线性部分的反向传播</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    dA 当前层激活输出的梯度</span></span><br><span class="line"><span class="string">    cache （W, A_prev, b）元组</span></span><br><span class="line"><span class="string">    activation 激活函数类型</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    dA_prev 上一层激活的梯度</span></span><br><span class="line"><span class="string">    dW 当前层W的梯度</span></span><br><span class="line"><span class="string">    db 当前层b的梯度</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cacheL, cacheA = cache</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> activation == <span class="string">'relu'</span>:</span><br><span class="line">        dZ = reluBackward(dA, cacheA)</span><br><span class="line">        dA_prev, dW, db = linearBackward(dZ, cacheL)</span><br><span class="line">    <span class="keyword">elif</span> activation == <span class="string">'sigmoid'</span>:</span><br><span class="line">        dZ = sigmoidBackward(dA, cacheA)</span><br><span class="line">        dA_prev, dW, db = linearBackward(dZ, cacheL)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dA_prev, dW, db</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backwardModel</span><span class="params">(AL, Y, caches)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    完整的反向传播过程</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    AL 输出层结果</span></span><br><span class="line"><span class="string">    Y 标签值</span></span><br><span class="line"><span class="string">    caches [cacheL, cacheA]</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    diffs 梯度字典</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    layerdim = len(caches)</span><br><span class="line">    Y = Y.reshape(AL.shape)</span><br><span class="line">    L = layerdim</span><br><span class="line">    </span><br><span class="line">    diffs = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    dAL = - (np.divide(Y, AL) - np.divide(<span class="number">1</span> - Y, <span class="number">1</span> - AL))</span><br><span class="line">    </span><br><span class="line">    currentCache = caches[L<span class="number">-1</span>]</span><br><span class="line">    dA_prev, dW, db =  linearActivationBackward(dAL, currentCache, <span class="string">'sigmoid'</span>)</span><br><span class="line">    diffs[<span class="string">'dA'</span> + str(L)], diffs[<span class="string">'dW'</span>+str(L)], diffs[<span class="string">'db'</span>+str(L)] = dA_prev, dW, db</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> reversed(range(L<span class="number">-1</span>)):</span><br><span class="line">        currentCache = caches[l]</span><br><span class="line">        dA_prev, dW, db =  linearActivationBackward(dA_prev, currentCache, <span class="string">'relu'</span>)</span><br><span class="line">        diffs[<span class="string">'dA'</span> + str(l+<span class="number">1</span>)], diffs[<span class="string">'dW'</span>+str(l+<span class="number">1</span>)], diffs[<span class="string">'db'</span>+str(l+<span class="number">1</span>)] = dA_prev, dW, db</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> diffs</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateParameters</span><span class="params">(parameters, diffs, learningRate)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    更新参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    parameters 待更新网络参数</span></span><br><span class="line"><span class="string">    diffs 梯度字典</span></span><br><span class="line"><span class="string">    learningRate 学习率</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    parameters 网络参数字典</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    layerdim = len(parameters)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, layerdim+<span class="number">1</span>):</span><br><span class="line">        parameters[<span class="string">'W'</span>+str(i)] -= learningRate*diffs[<span class="string">'dW'</span>+str(i)]</span><br><span class="line">        parameters[<span class="string">'b'</span>+str(i)] -= learningRate*diffs[<span class="string">'db'</span>+str(i)]</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">finalModel</span><span class="params">(X, Y, layerdims, learningRate=<span class="number">0.01</span>, numIters=<span class="number">5000</span>,pringCost=False)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    最终的BP神经网络模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    X 训练集特征</span></span><br><span class="line"><span class="string">    Y 训练集标签</span></span><br><span class="line"><span class="string">    layerdims 一个明确网络结构的python list</span></span><br><span class="line"><span class="string">    learningRate 学习率</span></span><br><span class="line"><span class="string">    numIters 迭代次数</span></span><br><span class="line"><span class="string">    pringCost 打印标志</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    parameters 参数字典</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    np.random.seed(<span class="number">1</span>)</span><br><span class="line">    costs = []</span><br><span class="line">    </span><br><span class="line">    parameters = iniPara(layerdims)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, numIters):</span><br><span class="line">        AL, caches = forwardModel(X, parameters)</span><br><span class="line">        cost = computeCost(AL, Y)</span><br><span class="line">        </span><br><span class="line">        diffs = backwardModel(AL,Y, caches)</span><br><span class="line">        parameters = updateParameters(parameters,diffs, learningRate)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> pringCost <span class="keyword">and</span> i%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            print(cost)</span><br><span class="line">            costs.append(np.sum(cost))</span><br><span class="line">    <span class="keyword">return</span> parameters</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(X, y, parameters, ifPrint)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    在测试集上预测</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    参数：</span></span><br><span class="line"><span class="string">    X 输入特征值</span></span><br><span class="line"><span class="string">    y 测试集标签</span></span><br><span class="line"><span class="string">    parameters 参数字典</span></span><br><span class="line"><span class="string">    输出：</span></span><br><span class="line"><span class="string">    p 预测得到的标签</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    </span><br><span class="line">    m = X.shape[<span class="number">1</span>]</span><br><span class="line">    n = len(parameters) // <span class="number">2</span> </span><br><span class="line">    p = np.zeros((<span class="number">1</span>,m))</span><br><span class="line">    probas, caches = forwardModel(X, parameters)</span><br><span class="line">    truth = np.argmax(y,<span class="number">0</span>)</span><br><span class="line">    pre = np.argmax(probas,<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> ifPrint:</span><br><span class="line">        print(<span class="string">"Accuracy: "</span>  + str(np.sum((pre == truth)/m)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pre, np.sum((pre == truth)/m)</span><br></pre></td></tr></table></figure>

<p>其他算法实现均为原bp神经网络代码实现。</p>
<h1 id="五、运行结果及意义说明"><a href="#五、运行结果及意义说明" class="headerlink" title="五、运行结果及意义说明:"></a>五、运行结果及意义说明:</h1><p><img src="/2019/07/01/%E5%9F%BA%E4%BA%8EBP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84NBA%E7%90%83%E5%91%98%E8%96%AA%E8%B5%84%E8%AF%84%E4%BC%B0/%E5%9B%BE%E7%89%871.png" alt="图1 验证训练集准确率"></p>
<p>对训练集的准确率验证如图1，发现在学习率为0.8，迭代次数为20600次时，准确率最高。因此考虑用该参数。</p>
<p><img src="/2019/07/01/%E5%9F%BA%E4%BA%8EBP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84NBA%E7%90%83%E5%91%98%E8%96%AA%E8%B5%84%E8%AF%84%E4%BC%B0/%E5%9B%BE%E7%89%872-1.png" alt="图2-1 勒布朗·詹姆斯薪水预测"></p>
<p><img src="/2019/07/01/%E5%9F%BA%E4%BA%8EBP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84NBA%E7%90%83%E5%91%98%E8%96%AA%E8%B5%84%E8%AF%84%E4%BC%B0/%E5%9B%BE%E7%89%872-2.png" alt="图2-2 小乔丹薪水预测"></p>
<p><img src="/2019/07/01/%E5%9F%BA%E4%BA%8EBP%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%9A%84NBA%E7%90%83%E5%91%98%E8%96%AA%E8%B5%84%E8%AF%84%E4%BC%B0/%E5%9B%BE%E7%89%872-3.png" alt="图2-3 路易斯·威廉姆斯薪水预测"></p>
<p>图2-1，2-2，2-3分别对三名不同类型球员进行了薪水预测，完全符合市场情况，其中小乔丹刚刚以1000万美元的年薪加盟网队，可以说是名副其实的降薪了，而快船队的路易斯·威廉姆斯实际合同只有700万美元，也是物美价廉了，勒布朗虽然上赛季受伤，但是依然可以打出自己的价值，预测薪水也和实际相符。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>在实现这次基于bp神经网络算法的应用过程中，自己第一次亲身体验到了神经网络算法的实现过程，在对老师的实现代码进行精读时，结合课上所学知识，还算比较流畅地熟悉了代码，在自己进行测试时，也遇到了一些“坑”，其中印象较为深刻的有两个地方：<strong>第一个地方是输入数据没有进行归一化处理，导致在第一次向前传播后经过S函数变化，数值均接近S函数的最大值1；第二个地方是输出的数据和Y矩阵的关系，在我再次理解bp神经网络原理时，了解到每个输出的值域[0,1]表示输出为该值得概率，理解之后问题更改Y矩阵格式问题便解决了。</strong></p>
<p>在这一过程中，也深刻了解了该算法的经典和不足之处，在进行训练数据验证时，发现准确率并不如人意，根据核心算法分析原因，可能是因为输入数据维度不足，输入数据和输出数据的比例不够大，因此不容易区分，因此考虑可以对此方案进行改进：增加球员年龄，身体数据和场上更多详细数据进行输入，还可以寻找球员历年的薪水（因为每年薪水受市场影响，需进行归一化）和数据以获取更多输入。但是由于球员的往年薪水数据并不容易获取，因此这是我下一步需要进行的改进。</p>
<p>同时在这次大作业的完成之中，我发现我所进行的工作量主要在于读懂算法，想出合理的应用环境，获取可用数据上；我的工作量与算法核心的数学内容基本无关，因此这是我未来需要进步的地方，需要不断强化数学基础，能够完成在读懂代码后根据实际项目进行算法改进的工作。</p>
<p>最后，我要感谢老师的在课上细心的讲解，深入到算法的每个细节，让我能对人工神经网络有了清晰地认识！</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>BP</tag>
      </tags>
  </entry>
  <entry>
    <title>博客更新日志，功能简述</title>
    <url>/2020/02/12/todo/</url>
    <content><![CDATA[<p>blog搭建任务第一阶段告一段落，准备好好整理一下以前收藏的解决问题的博文和有意义值得分享的事~💃</p>
<h2 id="未来计划："><a href="#未来计划：" class="headerlink" title="未来计划："></a>未来计划：</h2><ul>
<li><input checked disabled type="checkbox"> 喂爬虫</li>
<li><input disabled type="checkbox"> 整理出搭建教程</li>
<li><input checked disabled type="checkbox"> github 源代码项目分支sourcecode，master用来deploy</li>
</ul>
<a id="more"></a>

<h2 id="2月12日-todo"><a href="#2月12日-todo" class="headerlink" title="2月12日 todo"></a>2月12日 todo</h2><ul>
<li><input checked disabled type="checkbox"> lean或者busuanzi的文章阅读统计</li>
<li><input checked disabled type="checkbox"> 左上角一条黑线</li>
<li><input checked disabled type="checkbox"> 文章字体大小格式</li>
<li><input checked disabled type="checkbox"> 评论头像怎么弄的gravatar网站上传</li>
<li><input checked disabled type="checkbox"> busuanzi网站总访问量设置</li>
<li><input checked disabled type="checkbox"> 网站的小图标</li>
<li><input checked disabled type="checkbox"> 关于更新NexT版本问题 git pull冲突解决：<span class="exturl" data-url="aHR0cHM6Ly90aGVtZS1uZXh0Lm9yZy9kb2NzL2dldHRpbmctc3RhcnRlZC9kYXRhLWZpbGVz" title="https://theme-next.org/docs/getting-started/data-files">https://theme-next.org/docs/getting-started/data-files<i class="fa fa-external-link"></i></span></li>
<li><input checked disabled type="checkbox"> 上面3px的黑线给去了 </li>
</ul>
<h2 id="2月13日-todo"><a href="#2月13日-todo" class="headerlink" title="2月13日 todo"></a>2月13日 todo</h2><ul>
<li><input checked disabled type="checkbox"> 如何优雅的本地写作后上传</li>
</ul>
<p>有两种方法，各有优缺点，我为了更容易转移文章，选择第二种</p>
<h3 id="方法一：所有文章的图片都保存在source-asset-文件夹下"><a href="#方法一：所有文章的图片都保存在source-asset-文件夹下" class="headerlink" title="方法一：所有文章的图片都保存在source/asset/文件夹下"></a>方法一：所有文章的图片都保存在source/asset/文件夹下</h3><p>typora + hexo 我们一共需要三步(mac下的，windows找到对应设置即可)</p>
<ul>
<li><p>编辑 =&gt; 图片工具 =&gt; 当插入本地图片时 =&gt; 复制到文件夹source/assets (自己在hexo目录source下创建assets目录用于存放图片资源)</p>
</li>
<li><p>编辑 =&gt; 图片工具 =&gt; 设置图片根目录为 source所在文件夹</p>
<p>这两步的操作是在typora写文档时插入图片就保存在assets目录下并且可以在typora中显示</p>
</li>
<li><p>完成上两步之后会发现自动在typora上面生成了配置项<code>typora-copy-images-to</code>和<code>typora-root-url</code>，复制粘贴到post的模版文件中，这样当我们用<code>hexo new ***</code>生成新的post时就会直接保存上两条配置了</p>
</li>
</ul>
<h3 id="方法二：每个文章的图片单独保存到一个文件夹"><a href="#方法二：每个文章的图片单独保存到一个文件夹" class="headerlink" title="方法二：每个文章的图片单独保存到一个文件夹"></a>方法二：每个文章的图片单独保存到一个文件夹</h3><ol>
<li><p><code>修改站点配置文件</code>_config.yml，<code>post_asset_folder: true</code></p>
</li>
<li><p>安装<code>hexo-asset-image</code>插件</p>
</li>
<li><p><code>hexo new _post</code>后，就会生成一个<code>_post.md</code> 和同名文件夹, 把图片放到同名文件夹中，像<code>![描述](图片名)</code>引用就可以了。</p>
</li>
</ol>
<p>这样在我们日常写作时，只需要把<code>_post</code>文件夹拖拽至typora中通过输入命令+typora就可以很好地写作+部署了，甚至都不需要打开vscode（虽然只是想想而已，不开编辑器写诗嘛？😂）</p>
<ul>
<li><input checked disabled type="checkbox"> 图片自动压缩  决定不压缩，主页不要放大图片就好了</li>
</ul>
<h2 id="2月14日"><a href="#2月14日" class="headerlink" title="2月14日"></a>2月14日</h2><ul>
<li><input checked disabled type="checkbox"> 置顶文章</li>
</ul>
<h2 id="2月15日"><a href="#2月15日" class="headerlink" title="2月15日"></a>2月15日</h2><p>百度已经能搜索到我的blog了哈哈。</p>
<p><img src="/2020/02/12/todo/2B53B102.jpg" alt="效果"></p>
<p>前两天还挺着急，按了网上的seo配置之后还搜不到，实际上只要等两天就好了，给百度哥一个时间。</p>
]]></content>
  </entry>
  <entry>
    <title>基于KNN算法的NBA球员数据分析</title>
    <url>/2019/06/01/%E5%9F%BA%E4%BA%8EKNN%E7%AE%97%E6%B3%95%E7%9A%84NBA%E7%90%83%E5%91%98%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p>这篇文章是我在学校大数据课的一篇论文，有兴趣的可以详细了解，由于是最初最初学习，使用knn算法进行一个简单的分析。</p>
<a id="more"></a>

<h1 id="一、研究意义"><a href="#一、研究意义" class="headerlink" title="一、研究意义"></a>一、研究意义</h1><p>NBA的篮球哲学，随着金州勇士队连续闯入五年闯入总决赛，正在发生巨大的转变，三分成为了球队获胜的必要因素，联盟规则偏向进攻球员的转变，而本世纪初期铁血的防守理论已经无法适应新的环境。于此同时带来的就是球员位置的飘忽不定，每个球队都有小个阵容，球员的篮球习惯不同，在场上每套阵容安排时的司职位置也就不同。我使用球员的场均得分，篮板，助攻，抢断，盖帽来评估球员的场上位置。可以为教练和资深球迷提供了数据支持。</p>
<h1 id="二、数据描述"><a href="#二、数据描述" class="headerlink" title="二、数据描述"></a>二、数据描述</h1><p>Espn提供了NBA的篮球数据，供球迷和NBA分析师使用，这里我使用requests库来发送http请求，使用BeautifulSoup库解析html。数据来源网站即是<span class="exturl" data-url="aHR0cDovL3d3dy5lc3BuLmNvbQ==" title="http://www.espn.com">espn官网<i class="fa fa-external-link"></i></span>。</p>
<p><strong>表2-1 数据属性结构</strong></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>场均上场时间min</td>
<td>预处理依据</td>
</tr>
<tr>
<td>场均得分pts</td>
<td>判断依据</td>
</tr>
<tr>
<td>场均篮板reb</td>
<td>判断依据</td>
</tr>
<tr>
<td>场均助攻ast</td>
<td>判断依据</td>
</tr>
<tr>
<td>场均抢断stl</td>
<td>判断依据</td>
</tr>
<tr>
<td>场均篮板blk</td>
<td>判断依据</td>
</tr>
<tr>
<td>场上位置</td>
<td>标签label</td>
</tr>
</tbody></table>
<p>如表2-1所示，我爬取了2018-2019赛季常规赛30个球队每名球员的</p>
<ul>
<li>场均上场时间min，</li>
<li>场均得分pts，</li>
<li>场均篮板reb，</li>
<li>场均助攻ast，</li>
<li>场均抢断stl，</li>
<li>场均篮板blk，</li>
<li>场上位置</li>
</ul>
<p>共7个属性，536条数据。其中<code>min</code>作为预处理时排除噪声数据的依据，<code>场均得分pts，场均篮板reb，场均助攻ast，场均抢断stl，场均篮板blk</code>五项属性作为判断球员场上位置的数据依据，而球员<code>场上位置</code>作为<strong>标签label</strong>。通过numpy库的save方法将前六条数据和标签分别保存，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ori_data = transpose([min_data_list, pts_data_list, reb_data_list, ast_data_list, stl_data_list, blk_data_list])</span><br><span class="line">save(<span class="string">"ori_data.npy"</span>, ori_data)</span><br><span class="line">save(<span class="string">"label_data.npy"</span>, label_list)</span><br></pre></td></tr></table></figure>

<p><strong>预处理：</strong>由于每个球员场均上场时间过小时，其篮球数据可能不准确，因此将场均上场时间min大于8分钟的数据保留，其他数据删除，相关代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 预处理开始</span></span><br><span class="line">    ori_dataSet = load(<span class="string">"ori_data.npy"</span>)</span><br><span class="line">    label = load(<span class="string">"label_data.npy"</span>)</span><br><span class="line">    dataSet = hstack((ori_dataSet, transpose([label])))</span><br><span class="line">    filter_dataSet = zeros(shape=(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(dataSet)):</span><br><span class="line">        <span class="keyword">if</span> float(dataSet[i,<span class="number">0</span>]) &gt; <span class="number">8</span>:</span><br><span class="line">            filter_dataSet = vstack((filter_dataSet,dataSet[i]))</span><br><span class="line">    labels = filter_dataSet[<span class="number">1</span>:,<span class="number">-1</span>]</span><br><span class="line">    filter_dataSet  = filter_dataSet[<span class="number">1</span>:,<span class="number">1</span>:<span class="number">-1</span>].astype(float)</span><br><span class="line"><span class="comment"># 预处理结束</span></span><br></pre></td></tr></table></figure>

<p><strong>归一化：</strong>由于每个属性的权值不同，这里使用归一化方式处理每个属性，相关代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归一化操作开始</span></span><br><span class="line">    maxVals = filter_dataSet.max(<span class="number">0</span>)</span><br><span class="line">    minVals = filter_dataSet.min(<span class="number">0</span>)</span><br><span class="line">    ranges = maxVals - minVals</span><br><span class="line">    m = filter_dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    normDataSet = (filter_dataSet - tile(minVals, (m,<span class="number">1</span>))) / tile(ranges, (m,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 归一化操作结束</span></span><br></pre></td></tr></table></figure>

<h1 id="三、模型描述"><a href="#三、模型描述" class="headerlink" title="三、模型描述"></a>三、模型描述</h1><p>主要函数如下：</p>
<ul>
<li><p><code>createDataSet()</code>：读取保存的数据，并进行预处理，归一化操作；    </p>
<ul>
<li>读取数据</li>
<li>将data和label水平拼接成矩阵temp</li>
<li>对temp行循环，将min满足要求的数据添加到mydata</li>
<li>mydata即为预处理后数据，按列取mydata最大最小值</li>
<li>以最大值减最小值ranges为分母，将mydata归一化</li>
</ul>
</li>
<li><p><code>classify(input, dataSet, label, k)</code>：使用KNN算法进行归类，input为期望归类的数据，dataSet是判断依据集合，label是对应的标签，k为每次判断时邻居个数，合理的k值根据下文提到的交叉判断得出。</p>
<ul>
<li>通过两个矩阵运算来求欧式距离</li>
<li>对距离排序</li>
<li>从排序后的K个数据中寻找label属性最多的数据，即为所求</li>
<li>main()：程序的主入口，输入input数据，并得出结果。</li>
<li>创建数据</li>
<li>执行核心算法classify（）</li>
</ul>
</li>
<li><p><code>cross_validate.py</code> 设计好算法后用于交叉验证，计算出最优K值。</p>
<ul>
<li>对原数据2，8分类，其中20%做测试数据，80%做训练数据</li>
<li>用20%的训练数据依次在训练数据中执行算法，并得到结果集合</li>
<li>将结果集合和实际数据对比，求出错误个数，错误率</li>
<li>使用不同的K值重复上两步操作，得到错误率最小的K</li>
</ul>
</li>
</ul>
<h1 id="四、算法实现"><a href="#四、算法实现" class="headerlink" title="四、算法实现"></a>四、算法实现</h1><p>因为算法较为简单，一个py跑到底</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##给出训练数据以及对应的类别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createDataSet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="comment"># 预处理开始</span></span><br><span class="line">ori_dataSet = load(<span class="string">"ori_data.npy"</span>)</span><br><span class="line">label = load(<span class="string">"label_data.npy"</span>)</span><br><span class="line">dataSet = hstack((ori_dataSet, transpose([label])))</span><br><span class="line">filter_dataSet = zeros(shape=(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(dataSet)):</span><br><span class="line"><span class="keyword">if</span> float(dataSet[i,<span class="number">0</span>]) &gt; <span class="number">8</span>:</span><br><span class="line">filter_dataSet = vstack((filter_dataSet,dataSet[i]))</span><br><span class="line">labels = filter_dataSet[<span class="number">1</span>:,<span class="number">-1</span>]</span><br><span class="line">filter_dataSet  = filter_dataSet[<span class="number">1</span>:,<span class="number">1</span>:<span class="number">-1</span>].astype(float)</span><br><span class="line"><span class="comment"># 预处理结束</span></span><br><span class="line"><span class="comment"># 归一化操作开始</span></span><br><span class="line">maxVals = filter_dataSet.max(<span class="number">0</span>)</span><br><span class="line">minVals = filter_dataSet.min(<span class="number">0</span>)</span><br><span class="line">ranges = maxVals - minVals</span><br><span class="line">m = filter_dataSet.shape[<span class="number">0</span>]</span><br><span class="line">normDataSet = (filter_dataSet - tile(minVals, (m,<span class="number">1</span>))) / tile(ranges, (m,<span class="number">1</span>))</span><br><span class="line"><span class="comment"># 归一化操作结束</span></span><br><span class="line"><span class="keyword">return</span> normDataSet, labels, ranges, minVals</span><br><span class="line"></span><br><span class="line"><span class="comment">###通过KNN进行分类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(input, dataSet, label, k)</span>:</span></span><br><span class="line">    dataSize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">####计算欧式距离</span></span><br><span class="line">    diff = tile(input, (dataSize, <span class="number">1</span>)) - dataSet</span><br><span class="line">    sqdiff = diff ** <span class="number">2</span></span><br><span class="line">    squareDist = sum(sqdiff, axis=<span class="number">1</span>)  <span class="comment">###行向量分别相加，从而得到新的一个行向量</span></span><br><span class="line">    dist = squareDist ** <span class="number">0.5</span></span><br><span class="line">    <span class="comment">##对距离进行排序</span></span><br><span class="line">    sortedDistIndex = argsort(dist)  <span class="comment">##argsort()根据元素的值从大到小对元素进行排序，返回下标</span></span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteLabel = label[sortedDistIndex[i]]</span><br><span class="line">        <span class="comment">###对选取的K个样本所属的类别个数进行统计</span></span><br><span class="line">        classCount[voteLabel] = classCount.get(voteLabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="comment"># classCount.clear()</span></span><br><span class="line">    <span class="comment">###选取出现的类别次数最多的类别</span></span><br><span class="line">    maxCount = <span class="number">0</span></span><br><span class="line">    classes  = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> classCount.items():</span><br><span class="line">        <span class="keyword">if</span> value &gt; maxCount:</span><br><span class="line">            maxCount = value</span><br><span class="line">            classes = key</span><br><span class="line">    <span class="keyword">return</span> classes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    normDataSet, labels, ranges, minVals = createDataSet()</span><br><span class="line">    input = array([<span class="number">18</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">0.3</span>,<span class="number">2.1</span>])</span><br><span class="line">    normInput = (input - minVals) / ranges <span class="comment">#对输入的菜品进行归一化处理</span></span><br><span class="line">    K = <span class="number">17</span></span><br><span class="line">print(<span class="string">"测试数据为:"</span>,input,<span class="string">"分类结果为："</span>,classify(normInput, normDataSet, labels, K))</span><br><span class="line"></span><br><span class="line">cross_validata.py:</span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> main</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预处理开始</span></span><br><span class="line">ori_dataSet = load(<span class="string">"ori_data.npy"</span>)</span><br><span class="line">label = load(<span class="string">"label_data.npy"</span>)</span><br><span class="line">my_label = label</span><br><span class="line"><span class="comment"># my_label 相当于取每个位置的最后一个位置来验证</span></span><br><span class="line"><span class="comment"># PG,SG =&gt; G</span></span><br><span class="line"><span class="comment"># SF,PF =&gt; F</span></span><br><span class="line"><span class="comment"># C     =&gt; C</span></span><br><span class="line"><span class="comment"># 因为现在篮球位置飘忽摇摆，所以能验证出是前场球员还是后场球员即是好的算法</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(label.shape[<span class="number">0</span>]):</span><br><span class="line">    my_label[i] = label[i][<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">dataSet = hstack((ori_dataSet, transpose([my_label])))</span><br><span class="line">filter_dataSet = zeros(shape=(<span class="number">1</span>,<span class="number">7</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(dataSet)):</span><br><span class="line">    <span class="keyword">if</span> float(dataSet[i,<span class="number">0</span>]) &gt; <span class="number">8</span>:</span><br><span class="line">        filter_dataSet = vstack((filter_dataSet,dataSet[i]))</span><br><span class="line">filter_dataSet = filter_dataSet[<span class="number">1</span>:]</span><br><span class="line"><span class="comment"># 预处理结束</span></span><br><span class="line"><span class="comment"># 选取训练集和验证集</span></span><br><span class="line">vaildate_range = <span class="number">0.2</span> <span class="comment">#选取多少数据进行验证</span></span><br><span class="line">trian_set = filter_dataSet[<span class="number">0</span>:int(filter_dataSet.shape[<span class="number">0</span>] * vaildate_range), :]</span><br><span class="line">vaildate_set = filter_dataSet[int(filter_dataSet.shape[<span class="number">0</span>] * vaildate_range):, :]</span><br><span class="line">trian_only_dataSet = trian_set[:, <span class="number">1</span>:<span class="number">-1</span>].astype(float)</span><br><span class="line">trian_labels = trian_set[:, <span class="number">-1</span>]</span><br><span class="line">vaildate_only_dataSet = vaildate_set[:, <span class="number">1</span>:<span class="number">-1</span>].astype(float)</span><br><span class="line">vaildate_labels = vaildate_set[:, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行验证</span></span><br><span class="line">test_count = trian_set.shape[<span class="number">0</span>]</span><br><span class="line">k_err_di = &#123;&#125;</span><br><span class="line">k_err = []</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30</span>):</span><br><span class="line">    err_time = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(test_count):</span><br><span class="line">        temp_test_label = main.classify(trian_only_dataSet[i], vaildate_only_dataSet, vaildate_labels, k)</span><br><span class="line">        <span class="keyword">if</span> temp_test_label != trian_labels[i]:</span><br><span class="line">            err_time += <span class="number">1</span></span><br><span class="line">    k_err.append(err_time/test_count)</span><br><span class="line">    k_err_di[k] = err_time/test_count</span><br><span class="line">print(k_err_di)</span><br><span class="line">xs = arange(len(k_err)) + <span class="number">1</span></span><br><span class="line">plt.plot(xs,k_err)</span><br><span class="line">plt.xlabel(<span class="string">'K'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Error'</span>)</span><br><span class="line">plt.title(<span class="string">'Error vs K'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<h1 id="五、运行结果及意义说明"><a href="#五、运行结果及意义说明" class="headerlink" title="五、运行结果及意义说明"></a>五、运行结果及意义说明</h1><p><img src="/2019/06/01/%E5%9F%BA%E4%BA%8EKNN%E7%AE%97%E6%B3%95%E7%9A%84NBA%E7%90%83%E5%91%98%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%9B%BE5-1%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81%E7%BB%93%E6%9E%9C.png" alt="图5-1交叉验证结果"></p>
<p>交叉验证结果如图5-1, 因为现代篮球的位置区分率不高，所以按照5个传统位置来分，错误率较高；因此使用F前场，C中锋，G后场，三种球员位置来进行交叉验证。在<code>K=(1:30)</code>区间内进行验证，发现<code>K = 17</code>时错误率最低，因此选K = 17。</p>
<p><img src="/2019/06/01/%E5%9F%BA%E4%BA%8EKNN%E7%AE%97%E6%B3%95%E7%9A%84NBA%E7%90%83%E5%91%98%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/%E5%9B%BE5-2%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E9%AA%8C%E8%AF%81.png" alt="图5-2核心代码验证"></p>
<p>核心代码验证结果如图5-2，所示，输入分别为场均得分，篮板，助攻，抢断，盖帽，结果符合现实篮球规律。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>在实现这次基于KNN算法的应用过程中，自己亲身体验到了一种分类算法的实现过程，同时也深刻了解了该算法的经典和不足之处，在进行交叉验证时，发现错误率均较高，根据核心分析原因，是因为label不同的一些数据分布在一个较近的区域，因此不容易区分，同时这也是KNN算法的不足之处：对于区域内模糊的数据难以区分。这也激起了我学习其他分类算法的兴趣，对比各种算法的优劣，在合适的应用环境中选择合适的算法。</p>
<p>经过2个学时的学习，我对于大数据的概念已经有了一定的认识，也已经体验了一次数据分析的过程，相信在以后的学习和研究过程中，能够不断丰富相关知识，同时也不断应用所学知识解决问题。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>knn</tag>
      </tags>
  </entry>
  <entry>
    <title>使用JS将MySQL数据库表信息导出Excel</title>
    <url>/2021/04/24/JavaScript/%E4%BD%BF%E7%94%A8js%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%9F%E6%88%90excel%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="使用JS将MySQL数据库表信息导出Excel"><a href="#使用JS将MySQL数据库表信息导出Excel" class="headerlink" title="使用JS将MySQL数据库表信息导出Excel"></a>使用JS将MySQL数据库表信息导出Excel</h1><h2 id="完成效果："><a href="#完成效果：" class="headerlink" title="完成效果："></a>完成效果：</h2><p><img src="/2021/04/24/JavaScript/%E4%BD%BF%E7%94%A8js%E6%95%B0%E6%8D%AE%E5%BA%93%E7%94%9F%E6%88%90excel%E8%84%9A%E6%9C%AC/image-20210412114322955.png" alt="效果图"></p>
<a id="more"></a>

<h2 id="0、依赖："><a href="#0、依赖：" class="headerlink" title="0、依赖："></a>0、依赖：</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "knex": "^0.21.5",</span><br><span class="line">    "mysql": "^2.18.1",</span><br><span class="line">    "xlsx": "^0.16.9",</span><br><span class="line">    "xlsx-style": "^0.8.13"</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这里使用knex处理数据库，直接用mysql包也可以</p>
<p>xlsx就是大名鼎鼎的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1NoZWV0SlMvc2hlZXRqcw==" title="https://github.com/SheetJS/sheetjs">sheet.js<i class="fa fa-external-link"></i></span>，可以非常好的处理excel的文本内容，但是对于样式的修改需要pro版本</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Byb3RvYmkvanMteGxzeA==" title="https://github.com/protobi/js-xlsx">xlsx-style<i class="fa fa-external-link"></i></span>是根据xlsx开发的处理xlsx样式的开源工具</p>
<p>使用npm工具并将三个依赖导入，就不过多赘述了</p>
<h2 id="1、使用第三方工具"><a href="#1、使用第三方工具" class="headerlink" title="1、使用第三方工具"></a>1、使用第三方工具</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> knex = <span class="built_in">require</span>(<span class="string">'knex'</span>)(&#123;</span><br><span class="line">  client: <span class="string">'mysql'</span>,</span><br><span class="line">  connection: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    user: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">'123456'</span>,</span><br><span class="line">    database: <span class="string">'information_schema'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个进行区分，处理时用xlsx提供的函数，导出时用xlsx-style提供的函数</span></span><br><span class="line"><span class="keyword">const</span> XLSX = <span class="built_in">require</span>(<span class="string">'xlsx'</span>)</span><br><span class="line"><span class="keyword">const</span> XLSX_STYLE = <span class="built_in">require</span>(<span class="string">'xlsx-style'</span>)</span><br></pre></td></tr></table></figure>

<h2 id="2、获取数据库中字段信息"><a href="#2、获取数据库中字段信息" class="headerlink" title="2、获取数据库中字段信息"></a>2、获取数据库中字段信息</h2><p>数据库中相关信息 都在<code>information_schema</code>表中，写一个简单的sql获取就可以了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncGetData = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> knex(<span class="string">'COLUMNS'</span>)</span><br><span class="line">    .where(&#123;</span><br><span class="line">      <span class="comment">// 需要导出的数据库名</span></span><br><span class="line">      TABLE_SCHEMA: <span class="string">'oa'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .select(<span class="string">'TABLE_NAME as 表名'</span>,</span><br><span class="line">      <span class="string">'COLUMN_NAME as 字段名'</span>,</span><br><span class="line">      <span class="string">'DATA_TYPE as 数据类型'</span>,</span><br><span class="line">      <span class="string">'CHARACTER_MAXIMUM_LENGTH as 字符长度'</span>,</span><br><span class="line">      <span class="string">'NUMERIC_PRECISION as 数字长度'</span>,</span><br><span class="line">      <span class="string">'NUMERIC_SCALE as 小数位数'</span>,</span><br><span class="line">      <span class="string">'IS_NULLABLE as 允许空'</span>,</span><br><span class="line">      <span class="string">'EXTRA as 自增策略'</span>,</span><br><span class="line">      <span class="string">'COLUMN_DEFAULT as 默认值'</span>,</span><br><span class="line">      <span class="string">'COLUMN_COMMENT as 备注'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3、创建workBook与workSheet"><a href="#3、创建workBook与workSheet" class="headerlink" title="3、创建workBook与workSheet"></a>3、创建workBook与workSheet</h2><p>workBook对象是xlsx用来操作的基本对象，workSheet对应xlsx文件中的每个表；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> workBook = XLSX.utils.book_new()</span><br><span class="line"><span class="keyword">const</span> workSheet = &#123; <span class="string">'!merges'</span>: [], <span class="string">'!cols'</span>: [&#123; <span class="attr">wch</span>: <span class="number">18</span> &#125;, &#123; <span class="attr">wch</span>: <span class="number">18</span> &#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123;&#125;, &#123; <span class="attr">wch</span>: <span class="number">14</span> &#125;, &#123;&#125;, &#123; <span class="attr">wch</span>: <span class="number">50</span> &#125;] &#125;</span><br></pre></td></tr></table></figure>

<p>workSheet中</p>
<ul>
<li><p>!merges 数组中每个对象表示合并单元格的情况，管理如下对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	s: &#123; <span class="attr">r</span>: startRow, <span class="attr">c</span>: <span class="number">0</span> &#125;,</span><br><span class="line">	e: &#123; <span class="attr">r</span>: endRow, <span class="attr">c</span>: <span class="number">0</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>s: start 开始的坐标</p>
<p>e: end 结束的坐标</p>
</li>
<li><p>!cols表示每列属性，这里对一些列设置了宽度</p>
</li>
</ul>
<h2 id="4、-对获取到的数据进行处理"><a href="#4、-对获取到的数据进行处理" class="headerlink" title="4、 对获取到的数据进行处理"></a>4、 对获取到的数据进行处理</h2><p>a.  将数组按照<strong>表名</strong>分组，存储到data对象中</p>
<p>b.  遍历data对象，使用<strong>sheet_add_json()</strong>添加到sheet末尾</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">asyncGetData().then(</span><br><span class="line">  res =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> data = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; res.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> element = res[i]</span><br><span class="line">      <span class="keyword">if</span> (element[<span class="string">'允许空'</span>] === <span class="string">'YES'</span>) element[<span class="string">'允许空'</span>] = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span> (element[<span class="string">'字符长度'</span>] === <span class="literal">null</span>) element[<span class="string">'字符长度'</span>] = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span> (element[<span class="string">'数字长度'</span>] === <span class="literal">null</span>) element[<span class="string">'数字长度'</span>] = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span> (element[<span class="string">'小数位数'</span>] === <span class="literal">null</span>) element[<span class="string">'小数位数'</span>] = <span class="string">''</span></span><br><span class="line">      <span class="keyword">if</span> (element[<span class="string">'默认值'</span>] === <span class="literal">null</span>) element[<span class="string">'默认值'</span>] = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!data[element.表名]) &#123;</span><br><span class="line">        data[element.表名] = [element]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        data[element.表名].push(element)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置每次合并的开始和结束行数</span></span><br><span class="line">    <span class="keyword">let</span> startRow = <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> endRow = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Object</span>.hasOwnProperty.call(data, key)) &#123;</span><br><span class="line">        <span class="keyword">const</span> table = data[key]</span><br><span class="line">        startRow = endRow + <span class="number">2</span></span><br><span class="line">        endRow = startRow + table.length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        XLSX.utils.sheet_add_json(workSheet, table, &#123; <span class="attr">origin</span>: <span class="number">-1</span> &#125;)</span><br><span class="line"></span><br><span class="line">        workSheet[<span class="string">'!merges'</span>].push(&#123;</span><br><span class="line">          s: &#123; <span class="attr">r</span>: startRow, <span class="attr">c</span>: <span class="number">0</span> &#125;,</span><br><span class="line">          e: &#123; <span class="attr">r</span>: endRow, <span class="attr">c</span>: <span class="number">0</span> &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        workSheet[<span class="string">'A'</span> + (startRow + <span class="number">1</span>)].s = &#123;</span><br><span class="line">          alignment: &#123; <span class="attr">vertical</span>: <span class="string">'center'</span> &#125;,</span><br><span class="line">          font: &#123; <span class="attr">bold</span>: <span class="literal">true</span>, <span class="attr">color</span>: &#123; <span class="attr">rgb</span>: <span class="string">'00C0504D'</span> &#125; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Object</span>.keys(table[<span class="number">0</span>]).length; i++) &#123;</span><br><span class="line">          workSheet[<span class="string">`<span class="subst">$&#123;<span class="built_in">String</span>.fromCharCode(<span class="number">65</span> + i)&#125;</span><span class="subst">$&#123;startRow&#125;</span>`</span>].s = &#123;</span><br><span class="line">            font: &#123; <span class="attr">bold</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="string">'仿宋'</span>, <span class="attr">color</span>: &#123; <span class="attr">rgb</span>: <span class="string">'004F96D3'</span> &#125; &#125;,</span><br><span class="line">            fill: &#123; <span class="attr">bgColor</span>: &#123; <span class="attr">indexed</span>: <span class="number">64</span> &#125;, <span class="attr">fgColor</span>: &#123; <span class="attr">rgb</span>: <span class="string">"F2F2F2"</span> &#125; &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    XLSX.utils.book_append_sheet(workBook, workSheet, <span class="string">"Entity Definition"</span>);</span><br><span class="line"></span><br><span class="line">    XLSX_STYLE.writeFile(workBook, <span class="string">'out.xlsx'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------输出成功！---------"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小东西</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo踩坑记录(持续更新)</title>
    <url>/2018/12/30/hexo/hexo%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="Unhandled-rejection-Template-render-error-unknown-path-parseIf-expected-elif-else-or-endif-got-end-of-file"><a href="#Unhandled-rejection-Template-render-error-unknown-path-parseIf-expected-elif-else-or-endif-got-end-of-file" class="headerlink" title="Unhandled rejection Template render error: (unknown path) parseIf: expected elif, else, or endif, got end of file"></a>Unhandled rejection Template render error: (unknown path) parseIf: expected elif, else, or endif, got end of file</h3><p>我出现这个问题的原因竟然是在markdown中出现如下代码，应该是吧大括号和百分号读取了。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">`&#123;%if ****%&#125;`</span></span><br></pre></td></tr></table></figure>

<p>在百分号前加上转移符号<code>\</code>即可</p>
<h3 id="网页加载慢可能问题"><a href="#网页加载慢可能问题" class="headerlink" title="网页加载慢可能问题"></a>网页加载慢可能问题</h3><p>用Chrome network检测工具发现font的cdn是国外，吧<code>_config.yml</code>文件<code>font</code>改成false即可，2020年初这个时间段国内还没有搜索到字体镜像。所以要想改字体还是放自己服务器上吧。</p>
<h3 id="只是添加文章后，主页无法加载并且无报错"><a href="#只是添加文章后，主页无法加载并且无报错" class="headerlink" title="只是添加文章后，主页无法加载并且无报错"></a>只是添加文章后，主页无法加载并且无报错</h3><p>原因是在文章正文中有<code>&lt;***&gt;</code>，应该是next或者hexo会自动解析尖括号。</p>
<h3 id="Hexo-部署到-Github-Pages-文件夹大小写问题"><a href="#Hexo-部署到-Github-Pages-文件夹大小写问题" class="headerlink" title="Hexo 部署到 Github Pages 文件夹大小写问题"></a>Hexo 部署到 Github Pages 文件夹大小写问题</h3><p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3EvMTAxMDAwMDAwNDMzOTg1MQ==" title="https://segmentfault.com/q/1010000004339851">https://segmentfault.com/q/1010000004339851<i class="fa fa-external-link"></i></span></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中传递函数(行为)的两种方式</title>
    <url>/2020/04/11/Java/Java%E4%B8%AD%E4%BC%A0%E9%80%92%E5%87%BD%E6%95%B0(%E8%A1%8C%E4%B8%BA)%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="开门见山："><a href="#开门见山：" class="headerlink" title="开门见山："></a>开门见山：</h2><ol>
<li>接收一个接口，传参接口的实现</li>
<li>使用jdk8的Function类进行接收</li>
</ol>
<p>在spring boot的项目中，为了对前端传递的参数进行判断，一个比较好的方法对每一个接受的json对应一个接受的实体类，判断传递的各个字段是否完整可以通过对实体类添加<code>@NotNull</code>注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysRole</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"角色名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在controller的方法中中添加如下参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">add</span><span class="params">(@RequestBody @Valid SysRole role, BindingResult result)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>其中第二个参数就是spring boot验证后的结果，可以通过</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.error(</span><br><span class="line">        ResultEnum.MISS_FIELD.getCode(),</span><br><span class="line">        result.getFieldError().getDefaultMessage());</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> serviceMethod.get();</span><br></pre></td></tr></table></figure>

<p>获取到验证字段为空时自己设置的<code>message</code>。</p>
<h2 id="优化出工具方法"><a href="#优化出工具方法" class="headerlink" title="优化出工具方法"></a>优化出工具方法</h2><h3 id="jdk8的Function类"><a href="#jdk8的Function类" class="headerlink" title="jdk8的Function类"></a>jdk8的Function类</h3><p>在写代码时，我发现，如果有很多接口都需要验证参数，难道要写很多遍上面的代码吗，这时一个好的办法是写一个util类写一个验证字段的通用方法。在这个需求中，就会出现一个问题，<code>BindingResult result</code>这个参数是一个对象肯定要传入，我们要传递的第二个参数应该是一个动作，一个方法，比如在验证成功之后要怎么做。如果熟悉js的同学一定想到了将函数作为参数传递，jdk8也加入了面向函数编程这一写法，提供了非常多的Function类，这里我使用了<code>Supplier</code>类，它的英文意思是生产者，顾名思义，它对应的函数特点是无参有返回值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此方法是springboot valid的字段验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bindingResult springboot的验证结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> serviceMethod 验证成功后执行的业务逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 验证失败的处理结果或验证成功的 successResult</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">vaildFieldError</span><span class="params">(BindingResult bindingResult, Supplier&lt;Result&gt; serviceMethod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.error(</span><br><span class="line">            ResultEnum.MISS_FIELD.getCode(),</span><br><span class="line">            bindingResult.getFieldError().getDefaultMessage());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> serviceMethod.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Supplier</code>类的<code>get()</code>方法就是相当于执行这个函数获得返回值了。</p>
<p>这就是在开头提到的使用jdk8的Function类进行接收。</p>
<h3 id="jdk8之前的方法"><a href="#jdk8之前的方法" class="headerlink" title="jdk8之前的方法"></a>jdk8之前的方法</h3><p>对于之前的方法，我也是试着实现了一下，后来删除了使用jdk8的方法，毕竟面向函数这是一个现代语言的趋势。</p>
<p>在这里大致说一下实现过程。</p>
<ol>
<li>新建一个接口，里面写一个方法，这个方法就对应上面<code>serviceMethod</code>。</li>
<li>在工具类中接收接口为参数 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title">vaildFieldError</span><span class="params">(BindingResult bindingResult, MyInterface interface)</span></span></span><br></pre></td></tr></table></figure></li>
<li>在使用此工具类的时候，传参需要写一个匿名接口实现类，这里也可以使用jdk8的Lambda函数，如果不用jdk8那么就用传统的匿名实现类，重写接口里的那个方法就行了。</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现俄罗斯联机俄罗斯方块</title>
    <url>/2018/11/17/Java/java%E5%AE%9E%E7%8E%B0%E4%BF%84%E7%BD%97%E6%96%AF%E8%81%94%E6%9C%BA%E4%BF%84%E7%BD%97%E6%96%AF%E6%96%B9%E5%9D%97/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本科上java课时做的俄罗斯方块，计算机网络课又把俄罗斯方块改造成了联机对打。房主创建房间，对手通过输入房主的ip来加入对战。其中俄罗斯方块主体部分用到了NetBeans的图形化开发工具，使用idea要装插件。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1psYXRhbmxvbmcvSkFWQS10ZXRyaXM=" title="https://github.com/Zlatanlong/JAVA-tetris">github地址<i class="fa fa-external-link"></i></span></p>
<a id="more"></a>

<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$***/src tree</span><br><span class="line">.</span><br><span class="line">|____pictures</span><br><span class="line">| |____巴西.png</span><br><span class="line">|____mytetris</span><br><span class="line">| |____CountPanel.java</span><br><span class="line">| |____.DS_Store</span><br><span class="line">| |____CountPanel.form</span><br><span class="line">| |____MainFrame.java</span><br><span class="line">| |____Controller.java</span><br><span class="line">| |____GamePanel.java</span><br><span class="line">| |____GameState.java</span><br><span class="line">| |____GamePanel.form</span><br><span class="line">| |____Block.java</span><br><span class="line">| |____MainFrame.form</span><br><span class="line">|____socket</span><br><span class="line">| |____GameServer.java</span><br><span class="line">| |____SocketUtil.java</span><br><span class="line">| |____GameClient.java</span><br></pre></td></tr></table></figure>

<p>其中pictures是俄罗斯方块的一个图片素材，java课时值2018年俄罗斯世界杯，我是🇧🇷球迷，就用了巴西国旗做按钮背景。</p>
<p><code>mytetris文件夹</code>是俄罗斯方块的游戏主体部分，</p>
<p><code>socket文件夹</code>下是俄罗斯方块的联机部分，通过<code>socket</code>实现。</p>
<h1 id="俄罗斯方块主体代码"><a href="#俄罗斯方块主体代码" class="headerlink" title="俄罗斯方块主体代码"></a>俄罗斯方块主体代码</h1><h2 id="Controller-java"><a href="#Controller-java" class="headerlink" title="Controller.java"></a>Controller.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mytetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> socket.SocketUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> removeLog = <span class="number">0</span>;<span class="comment">//同时消行数量</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> currentX = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> currentY = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] fix = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][<span class="number">20</span>];<span class="comment">// 把整个界面分割成10*20</span></span><br><span class="line">    <span class="keyword">private</span> GameState state = <span class="keyword">new</span> GameState();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生一个新的形状</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNewShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getState().getNewBlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getCurrentShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getState().getCurrentBlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getNextShape</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getState().getNextBlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化界面数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inintFix</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">19</span>; k++) &#123;</span><br><span class="line">                fix[j][k] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否出界</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x X轴偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y Y轴偏移量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tempShape = getCurrentShape().getCurrentBlocks();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((tempShape[i + <span class="number">1</span>] + y) &lt; <span class="number">0</span> || (tempShape[i + <span class="number">1</span>] + y) &gt; <span class="number">19</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((tempShape[i] + x) &lt; <span class="number">0</span> || (tempShape[i] + x) &gt; <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (fix[tempShape[i] + x][tempShape[i + <span class="number">1</span>] + y] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上下左右和翻转 先判断是否出界</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">left</span><span class="params">(Boolean ifSend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isValid(currentX - <span class="number">1</span>, currentY)) &#123;</span><br><span class="line">            currentX--;</span><br><span class="line">            <span class="keyword">if</span> (ifSend) &#123;</span><br><span class="line">                SocketUtil.send(MainFrame.socket, <span class="string">"move37"</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">right</span><span class="params">(Boolean ifSend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isValid(currentX + <span class="number">1</span>, currentY)) &#123;</span><br><span class="line">            currentX++;</span><br><span class="line">            <span class="keyword">if</span> (ifSend) &#123;</span><br><span class="line">                SocketUtil.send(MainFrame.socket, <span class="string">"move39"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方块下落，落不下去的就死掉了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">(Boolean ifSend)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ifSend) &#123;</span><br><span class="line">            SocketUtil.send(MainFrame.socket, <span class="string">"move40"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isValid(currentX, currentY + <span class="number">1</span>)) &#123;</span><br><span class="line">            currentY++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            add(currentX, currentY, ifSend);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turn</span><span class="params">(Boolean ifSend)</span> </span>&#123;</span><br><span class="line">        getState().getCurrentBlock().next();</span><br><span class="line">        <span class="keyword">if</span> (!isValid(currentX, currentY)) &#123;</span><br><span class="line">            getState().getCurrentBlock().forward();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ifSend) &#123;</span><br><span class="line">                SocketUtil.send(MainFrame.socket, <span class="string">"move38"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把死掉的方块变成墙；</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, Boolean ifMy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] tempShape = getState().getCurrentBlock().getCurrentBlocks();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">            fix[x + tempShape[i]][y + tempShape[i + <span class="number">1</span>]] = getState().getCurrentBlock().getIColor() + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        remove();</span><br><span class="line">        currentX = <span class="number">3</span>;</span><br><span class="line">        currentY = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (ifMy) &#123;</span><br><span class="line">            getNewShape();</span><br><span class="line">            MainFrame.changeNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消除可消的一行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">19</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//i是一共20行</span></span><br><span class="line">            <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fix[j][i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    flag = <span class="number">1</span>;<span class="comment">//一行已经满了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">                state.setCount(state.getCount() + state.getPoint() + removeLog);</span><br><span class="line">                state.changeInterval();</span><br><span class="line">                MainFrame.changeCount();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                    fix[j][i] = <span class="number">0</span>;</span><br><span class="line">                &#125;<span class="comment">//消除这一行</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                        fix[j][k] = fix[j][k - <span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="comment">//其他行下移一行</span></span><br><span class="line">                removeLog++;</span><br><span class="line">                remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//判断第一行是否要被消除</span></span><br><span class="line">        <span class="keyword">int</span> flag0 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fix[j][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">                flag0 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag0 == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                fix[j][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        removeLog = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 道具1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prop1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">            fix[j][<span class="number">19</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="comment">//消除这一行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">19</span>; k &gt; <span class="number">0</span>; k--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                fix[j][k] = fix[j][k - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//其他行下移一行</span></span><br><span class="line">        state.setCount(state.getCount() + <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        state.changeInterval();</span><br><span class="line">        MainFrame.changeCount();</span><br><span class="line">        MainFrame.gp.repaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameState <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Block-java"><a href="#Block-java" class="headerlink" title="Block.java"></a>Block.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mytetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> socket.SocketUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Zlatan</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    List&lt;<span class="keyword">int</span>[][]&gt; allBlocks = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Color&gt; colors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        allBlocks.add(tblocks);</span><br><span class="line">        colors.add(Color.yellow);</span><br><span class="line">        allBlocks.add(lblocks);</span><br><span class="line">        colors.add(Color.blue);</span><br><span class="line">        allBlocks.add(iblocks);</span><br><span class="line">        colors.add(Color.green);</span><br><span class="line">        allBlocks.add(flblocks);</span><br><span class="line">        colors.add(Color.cyan);</span><br><span class="line">        allBlocks.add(zblocks);</span><br><span class="line">        colors.add(Color.pink);</span><br><span class="line">        allBlocks.add(fzblocks);</span><br><span class="line">        colors.add(Color.white);</span><br><span class="line">        allBlocks.add(oblocks);</span><br><span class="line">        colors.add(Color.orange);</span><br><span class="line">        i=(<span class="keyword">int</span>)(<span class="number">0</span>+Math.random()*(<span class="number">6</span>-<span class="number">0</span>+<span class="number">1</span>));<span class="comment">//(数据类型)(最小值+Math.random()*(最大值-最小值+1))</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Block</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">        allBlocks.add(tblocks);</span><br><span class="line">        colors.add(Color.yellow);</span><br><span class="line">        allBlocks.add(lblocks);</span><br><span class="line">        colors.add(Color.blue);</span><br><span class="line">        allBlocks.add(iblocks);</span><br><span class="line">        colors.add(Color.green);</span><br><span class="line">        allBlocks.add(flblocks);</span><br><span class="line">        colors.add(Color.cyan);</span><br><span class="line">        allBlocks.add(zblocks);</span><br><span class="line">        colors.add(Color.pink);</span><br><span class="line">        allBlocks.add(fzblocks);</span><br><span class="line">        colors.add(Color.white);</span><br><span class="line">        allBlocks.add(oblocks);</span><br><span class="line">        colors.add(Color.orange);</span><br><span class="line">        <span class="keyword">this</span>.i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> state=<span class="number">0</span>;<span class="comment">//当前的数</span></span><br><span class="line">    <span class="comment">//格式:(第一块，X轴，Y轴；第二块......)</span></span><br><span class="line">    <span class="comment">//shape of T</span></span><br><span class="line">    <span class="keyword">int</span>[][] tblocks=&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;            </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//shape of L</span></span><br><span class="line">    <span class="keyword">int</span>[][] lblocks=&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;            </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//shape of I</span></span><br><span class="line">    <span class="keyword">int</span>[][]iblocks=&#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span>[][]flblocks=&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;   </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span>[][]zblocks=&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>&#125;  </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span>[][]fzblocks=&#123;</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>&#125; </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">int</span>[][]oblocks=&#123;</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>&#125;  </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state = state == <span class="number">3</span> ? <span class="number">0</span> : state + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        state = state == <span class="number">0</span> ? <span class="number">3</span> : state - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回当前形状数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getCurrentBlocks() &#123;</span><br><span class="line">            <span class="keyword">return</span> allBlocks.get(i)[state];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> colors.get(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIColor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MainFrame.mod==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GameState-java"><a href="#GameState-java" class="headerlink" title="GameState.java"></a>GameState.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mytetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket.SocketUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Block currentBlock; <span class="comment">// 当前形状</span></span><br><span class="line">    <span class="keyword">private</span> Block nextBlock; <span class="comment">// 下一个形状</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count; <span class="comment">// 总得分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> point; <span class="comment">// 每次加分</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> interval; <span class="comment">// 时间间隔，影响速度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextBlock = <span class="keyword">new</span> Block();</span><br><span class="line">        SocketUtil.send(MainFrame.socket, <span class="string">"fBlock"</span> + Integer.toString(nextBlock.getI()));</span><br><span class="line">        <span class="keyword">this</span>.interval = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.point = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 产生一个新的形状</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getNewBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentBlock = nextBlock;</span><br><span class="line">        nextBlock = <span class="keyword">new</span> Block();</span><br><span class="line">        SocketUtil.send(MainFrame.socket, <span class="string">"nBlock"</span> + Integer.toString(nextBlock.getI()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNewBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentBlock = <span class="keyword">this</span>.nextBlock;</span><br><span class="line">        <span class="keyword">this</span>.nextBlock = block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (MainFrame.mod != <span class="number">2</span> &amp;&amp; (<span class="number">1000</span> - count * <span class="number">9</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            interval = <span class="number">1000</span> - count * <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the currentBlock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getCurrentBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentBlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentBlock the currentBlock to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentBlock</span><span class="params">(Block currentBlock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentBlock = currentBlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the nextBlock</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getNextBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextBlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextBlock the nextBlock to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextBlock</span><span class="params">(Block nextBlock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextBlock = nextBlock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the count</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count the count to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the point</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point the point to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPoint</span><span class="params">(<span class="keyword">int</span> point)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.point = point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the interval</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> interval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interval the interval to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInterval</span><span class="params">(<span class="keyword">int</span> interval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.interval = interval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CountPanel-java"><a href="#CountPanel-java" class="headerlink" title="CountPanel.java"></a>CountPanel.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mytetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dmt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountPanel</span> <span class="keyword">extends</span> <span class="title">javax</span>.<span class="title">swing</span>.<span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> prop1Count = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> Block nextBlock;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CountPanel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initComponents();</span><br><span class="line">        prop1show.setText(<span class="string">"数量："</span>+prop1Count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示结束</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showOver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        show.setText(<span class="string">"GAMEOVER!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Over标致</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delOver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        show.setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.currentThread().sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                Logger.getLogger(GamePanel<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBlocks</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] shape = nextBlock.getCurrentBlocks();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shape.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            g.setColor(Color.black);</span><br><span class="line">            g.drawRect(<span class="number">20</span> * (shape[i])+<span class="number">15</span> , <span class="number">20</span> * (shape[i + <span class="number">1</span>])+<span class="number">250</span> , <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">            g.setColor(nextBlock.getColor());</span><br><span class="line">            g.fillRect(<span class="number">20</span> * (shape[i])+<span class="number">15</span> , <span class="number">20</span> * (shape[i + <span class="number">1</span>])+<span class="number">250</span> , <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);</span><br><span class="line">        drawBlocks(g);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is called from within the constructor to initialize the form.</span></span><br><span class="line"><span class="comment">     * WARNING: Do NOT modify this code. The content of this method is always</span></span><br><span class="line"><span class="comment">     * regenerated by the Form Editor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;//GEN-BEGIN:initComponents</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initComponents</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        currrentcount = <span class="keyword">new</span> javax.swing.JLabel();</span><br><span class="line">        count = <span class="keyword">new</span> javax.swing.JLabel();</span><br><span class="line">        jLabel1 = <span class="keyword">new</span> javax.swing.JLabel();</span><br><span class="line">        show = <span class="keyword">new</span> javax.swing.JLabel();</span><br><span class="line">        prop1 = <span class="keyword">new</span> javax.swing.JButton();</span><br><span class="line">        prop1show = <span class="keyword">new</span> javax.swing.JLabel();</span><br><span class="line"></span><br><span class="line">        currrentcount.setText(<span class="string">"当前得分:"</span>);</span><br><span class="line"></span><br><span class="line">        count.setText(<span class="string">"0"</span>);</span><br><span class="line"></span><br><span class="line">        jLabel1.setText(<span class="string">"下一图案："</span>);</span><br><span class="line"></span><br><span class="line">        show.setFont(<span class="keyword">new</span> java.awt.Font(<span class="string">"Lucida Grande"</span>, <span class="number">1</span>, <span class="number">13</span>)); <span class="comment">// NOI18N</span></span><br><span class="line">        show.setForeground(<span class="keyword">new</span> java.awt.Color(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        prop1.setText(<span class="string">"道具"</span>);</span><br><span class="line">        prop1.setFocusable(<span class="keyword">false</span>);</span><br><span class="line">        prop1.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                prop1ActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        prop1show.setText(<span class="string">"数量：0"</span>);</span><br><span class="line"></span><br><span class="line">        javax.swing.GroupLayout layout = <span class="keyword">new</span> javax.swing.GroupLayout(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.setLayout(layout);</span><br><span class="line">        layout.setHorizontalGroup(</span><br><span class="line">            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">            .addGroup(layout.createSequentialGroup()</span><br><span class="line">                .addContainerGap()</span><br><span class="line">                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()</span><br><span class="line">                        .addGap(<span class="number">0</span>, <span class="number">0</span>, Short.MAX_VALUE)</span><br><span class="line">                        .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">62</span>, javax.swing.GroupLayout.PREFERRED_SIZE))</span><br><span class="line">                    .addComponent(show, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)</span><br><span class="line">                    .addGroup(layout.createSequentialGroup()</span><br><span class="line">                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">                            .addComponent(prop1show, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">72</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                            .addComponent(jLabel1)</span><br><span class="line">                            .addComponent(currrentcount, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">90</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                            .addComponent(prop1))</span><br><span class="line">                        .addGap(<span class="number">0</span>, <span class="number">4</span>, Short.MAX_VALUE)))</span><br><span class="line">                .addContainerGap())</span><br><span class="line">        );</span><br><span class="line">        layout.setVerticalGroup(</span><br><span class="line">            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">            .addGroup(layout.createSequentialGroup()</span><br><span class="line">                .addGap(<span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>)</span><br><span class="line">                .addComponent(currrentcount, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">33</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                .addGap(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>)</span><br><span class="line">                .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">52</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)</span><br><span class="line">                .addComponent(show, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">43</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)</span><br><span class="line">                .addComponent(jLabel1)</span><br><span class="line">                .addGap(<span class="number">137</span>, <span class="number">137</span>, <span class="number">137</span>)</span><br><span class="line">                .addComponent(prop1)</span><br><span class="line">                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)</span><br><span class="line">                .addComponent(prop1show, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">28</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                .addContainerGap(<span class="number">199</span>, Short.MAX_VALUE))</span><br><span class="line">        );</span><br><span class="line">    &#125;<span class="comment">// &lt;/editor-fold&gt;//GEN-END:initComponents</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prop1ActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_prop1ActionPerformed</span></span><br><span class="line">        <span class="comment">// 使用道具1:</span></span><br><span class="line">        <span class="keyword">if</span> (prop1Count&gt;<span class="number">0</span>&amp;&amp;!MainFrame.isOver) &#123;</span><br><span class="line"><span class="comment">//            Controller.prop1();</span></span><br><span class="line">            prop1Count--;</span><br><span class="line">            prop1show.setText(<span class="string">"数量："</span>+prop1Count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_prop1ActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Variables declaration - do not modify//GEN-BEGIN:variables</span></span><br><span class="line">    <span class="keyword">public</span> javax.swing.JLabel count;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JLabel currrentcount;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JLabel jLabel1;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JButton prop1;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JLabel prop1show;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JLabel show;</span><br><span class="line">    <span class="comment">// End of variables declaration//GEN-END:variables</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProp1Count</span><span class="params">(<span class="keyword">int</span> prop1Count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prop1Count = prop1Count;</span><br><span class="line">        <span class="keyword">this</span>.prop1show.setText(<span class="string">"数量："</span>+prop1Count);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCountText</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.count.setText(Integer.toString(count));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nextBlock the nextBlock to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextBlock</span><span class="params">(Block nextBlock)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nextBlock = nextBlock;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GamePanel-java"><a href="#GamePanel-java" class="headerlink" title="GamePanel.java"></a>GamePanel.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mytetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dmt 整个gamepanel分为10*20（宽*高） 200 块 每一块根据fix[x][y]的值来区分颜色，其中若为0</span></span><br><span class="line"><span class="comment"> * 不单独添加颜色，相当于正常 10为红色，现在导致游戏over的那个形状会被画成红色，其他颜色均代表墙。 1-7代表7中颜色，9为不区分形状颜色时墙的颜色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">javax</span>.<span class="title">swing</span>.<span class="title">JPanel</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Controller controller = <span class="keyword">new</span> Controller();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">(Boolean ifMy)</span> </span>&#123;</span><br><span class="line">        initComponents();</span><br><span class="line">        controller.getNewShape();</span><br><span class="line">        controller.inintFix();</span><br><span class="line">        <span class="keyword">if</span> (ifMy) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!MainFrame.isOver) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!MainFrame.isPause) &#123;</span><br><span class="line">                    controller.down(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">this</span>.repaint();</span><br><span class="line">                &#125;</span><br><span class="line">                Thread.currentThread().sleep(controller.getState().getInterval());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">                Logger.getLogger(GamePanel<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);</span><br><span class="line">        drawBlocks(g, controller.currentX, controller.currentY);</span><br><span class="line">        drawFix(g);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画墙</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> g</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawFix</span><span class="params">(Graphics g)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">9</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">19</span>; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">1</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.drawRect(<span class="number">20</span> * j, <span class="number">20</span> * k, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                    g.setColor(Color.yellow);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">2</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.drawRect(<span class="number">20</span> * j, <span class="number">20</span> * k, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                    g.setColor(Color.blue);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">3</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.drawRect(<span class="number">20</span> * j, <span class="number">20</span> * k, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                    g.setColor(Color.green);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">4</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.drawRect(<span class="number">20</span> * j, <span class="number">20</span> * k, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                    g.setColor(Color.cyan);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">5</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.drawRect(<span class="number">20</span> * j, <span class="number">20</span> * k, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                    g.setColor(Color.pink);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">6</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.drawRect(<span class="number">20</span> * j, <span class="number">20</span> * k, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                    g.setColor(Color.white);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">7</span>) &#123;</span><br><span class="line">                    g.setColor(Color.black);</span><br><span class="line">                    g.drawRect(<span class="number">20</span> * j, <span class="number">20</span> * k, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                    g.setColor(Color.orange);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">9</span>) &#123;</span><br><span class="line">                    g.setColor(Color.lightGray);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 红色警告</span></span><br><span class="line">                <span class="keyword">if</span> (controller.fix[j][k] == <span class="number">10</span>) &#123;</span><br><span class="line">                    g.setColor(Color.red);</span><br><span class="line">                    g.fillRect(j * <span class="number">20</span>, k * <span class="number">20</span>, <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 画形状 同时判断结束, 判断逻辑： 如果要画形状的时候当前位置已经有墙了，说明墙已经到了最上面， 因此游戏结束</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> g</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawBlocks</span><span class="params">(Graphics g, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] shape = controller.getCurrentShape().getCurrentBlocks();</span><br><span class="line"><span class="comment">//        for (int i = 0; i &lt; shape.length; i++) &#123;</span></span><br><span class="line"><span class="comment">//            int j = shape[i];</span></span><br><span class="line"><span class="comment">//            System.out.print(j);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        System.out.println("huanhang");</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shape.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (controller.fix[shape[i] + x][shape[i + <span class="number">1</span>] + y] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 把结束的这个形状位置号标为10， 会化成红色</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; shape.length; j += <span class="number">2</span>) &#123;</span><br><span class="line">                    controller.fix[shape[j] + x][shape[j + <span class="number">1</span>] + y] = <span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                MainFrame.over();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; shape.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">            g.setColor(Color.black);</span><br><span class="line">            g.drawRect(<span class="number">20</span> * (shape[i] + x), <span class="number">20</span> * (shape[i + <span class="number">1</span>] + y), <span class="number">19</span>, <span class="number">19</span>);</span><br><span class="line">            g.setColor(controller.getCurrentShape().getColor());</span><br><span class="line">            g.fillRect(<span class="number">20</span> * (shape[i] + x), <span class="number">20</span> * (shape[i + <span class="number">1</span>] + y), <span class="number">18</span>, <span class="number">18</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Block <span class="title">getNextBlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> controller.getNextShape();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示时设置第一个Block</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> block</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        getGameState().setNextBlock(block);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNewBlock</span><span class="params">(Block block)</span> </span>&#123;</span><br><span class="line">        getGameState().setNewBlock(block);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameState <span class="title">getGameState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> controller.getState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void changeCount() &#123;</span></span><br><span class="line"><span class="comment">//        controller.getState().changeCount();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(java.awt.event.KeyEvent evt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((!MainFrame.isOver) &amp;&amp; (!MainFrame.isPause)) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (evt.getKeyCode()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">37</span>:</span><br><span class="line">                    controller.left(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">39</span>:</span><br><span class="line">                    controller.right(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">40</span>:</span><br><span class="line">                    controller.down(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">38</span>:</span><br><span class="line">                    controller.turn(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">65</span>:</span><br><span class="line">                    controller.left(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">68</span>:</span><br><span class="line">                    controller.right(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">83</span>:</span><br><span class="line">                    controller.down(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">87</span>:</span><br><span class="line">                    controller.turn(<span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPressed</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((!MainFrame.isOver) &amp;&amp; (!MainFrame.isPause)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (code.equals(<span class="string">"move37"</span>)) &#123;</span><br><span class="line">                controller.left(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code.equals(<span class="string">"move38"</span>)) &#123;</span><br><span class="line">                controller.turn(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code.equals(<span class="string">"move39"</span>)) &#123;</span><br><span class="line">                controller.right(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code.equals(<span class="string">"move40"</span>)) &#123;</span><br><span class="line">                controller.down(<span class="keyword">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code.substring(<span class="number">0</span>, <span class="number">6</span>).equals(<span class="string">"fBlock"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = Integer.valueOf(code.substring(<span class="number">6</span>));</span><br><span class="line">                Block block = <span class="keyword">new</span> Block(i);</span><br><span class="line">                setFirstBlock(block);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code.substring(<span class="number">0</span>, <span class="number">6</span>).equals(<span class="string">"nBlock"</span>)) &#123;</span><br><span class="line">                <span class="keyword">int</span> i = Integer.valueOf(code.substring(<span class="number">6</span>));</span><br><span class="line">                Block block = <span class="keyword">new</span> Block(i);</span><br><span class="line">                setNewBlock(block);</span><br><span class="line">            &#125;</span><br><span class="line">            repaint();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;//GEN-BEGIN:initComponents</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initComponents</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        setBackground(<span class="keyword">new</span> java.awt.Color(<span class="number">204</span>, <span class="number">255</span>, <span class="number">204</span>));</span><br><span class="line">        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));</span><br><span class="line"></span><br><span class="line">        javax.swing.GroupLayout layout = <span class="keyword">new</span> javax.swing.GroupLayout(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.setLayout(layout);</span><br><span class="line">        layout.setHorizontalGroup(</span><br><span class="line">            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">            .addGap(<span class="number">0</span>, <span class="number">396</span>, Short.MAX_VALUE)</span><br><span class="line">        );</span><br><span class="line">        layout.setVerticalGroup(</span><br><span class="line">            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">            .addGap(<span class="number">0</span>, <span class="number">296</span>, Short.MAX_VALUE)</span><br><span class="line">        );</span><br><span class="line">    &#125;<span class="comment">// &lt;/editor-fold&gt;//GEN-END:initComponents</span></span><br><span class="line">    <span class="comment">// Variables declaration - do not modify//GEN-BEGIN:variables</span></span><br><span class="line">    <span class="comment">// End of variables declaration//GEN-END:variables</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="MainFrame-java"><a href="#MainFrame-java" class="headerlink" title="MainFrame.java"></a>MainFrame.java</h2><p>这个类是程序的入口，主界面就是由两组<code>GamePanel</code>和<code>CountPanel</code>对象组成的，其中gp和cp是自己的画面，gp2和cp2是对手的画面，自己的画面来自于监听键盘的上下左右操作，对手画面来自于对方传来的上下作用动作进行操作。</p>
<p>并且全局变量大多都是放在这个类中，并提供了get方法进行修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mytetris;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> socket.GameClient;</span><br><span class="line"><span class="keyword">import</span> socket.GameServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFrame</span> <span class="keyword">extends</span> <span class="title">javax</span>.<span class="title">swing</span>.<span class="title">JFrame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Socket socket;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> mod;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isOver = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> isPause = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> point;<span class="comment">//每次加分</span></span><br><span class="line">    <span class="keyword">static</span> GamePanel gp;</span><br><span class="line">    <span class="keyword">static</span> GamePanel gp2;</span><br><span class="line">    <span class="keyword">static</span> CountPanel cp;</span><br><span class="line">    <span class="keyword">static</span> CountPanel cp2;</span><br><span class="line">    GameServer server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改变分数显示同时改变速度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cp.setCountText(gp.getGameState().getCount());</span><br><span class="line">        cp2.setCountText(gp2.getGameState().getCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">over</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        isOver = <span class="keyword">true</span>;</span><br><span class="line">        isPause = <span class="keyword">false</span>;</span><br><span class="line">        cp.showOver();</span><br><span class="line">        cp2.showOver();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cp.setNextBlock(gp.getNextBlock());</span><br><span class="line">        cp.repaint();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">            Logger.getLogger(MainFrame<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cp2.setNextBlock(gp2.getNextBlock());</span><br><span class="line">        cp2.repaint();</span><br><span class="line">        changeCount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//规定画板大小</span></span><br><span class="line">        initComponents();</span><br><span class="line">        start.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        pause.setVisible(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        cp = <span class="keyword">new</span> CountPanel();</span><br><span class="line">        cp.setSize(<span class="number">100</span>, <span class="number">600</span>);</span><br><span class="line">        cp.setLocation(<span class="number">254</span>, <span class="number">100</span>);</span><br><span class="line">        cp.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(cp);</span><br><span class="line"></span><br><span class="line">        cp2 = <span class="keyword">new</span> CountPanel();</span><br><span class="line">        cp2.setSize(<span class="number">100</span>, <span class="number">600</span>);</span><br><span class="line">        cp2.setLocation(<span class="number">654</span>, <span class="number">100</span>);</span><br><span class="line">        cp2.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(cp2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="comment">// &lt;editor-fold defaultstate="collapsed" desc="Generated Code"&gt;//GEN-BEGIN:initComponents</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initComponents</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        go = <span class="keyword">new</span> javax.swing.JButton();</span><br><span class="line">        start = <span class="keyword">new</span> javax.swing.JButton();</span><br><span class="line">        pause = <span class="keyword">new</span> javax.swing.JButton();</span><br><span class="line">        msg = <span class="keyword">new</span> javax.swing.JLabel();</span><br><span class="line">        jLabel1 = <span class="keyword">new</span> javax.swing.JLabel();</span><br><span class="line">        model = <span class="keyword">new</span> javax.swing.JComboBox&lt;&gt;();</span><br><span class="line">        jScrollPane1 = <span class="keyword">new</span> javax.swing.JScrollPane();</span><br><span class="line">        msg2 = <span class="keyword">new</span> javax.swing.JTextArea();</span><br><span class="line">        openHomeButton = <span class="keyword">new</span> javax.swing.JButton();</span><br><span class="line">        joinHomeButton = <span class="keyword">new</span> javax.swing.JButton();</span><br><span class="line">        joinHomeText = <span class="keyword">new</span> javax.swing.JTextField();</span><br><span class="line"></span><br><span class="line">        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        setIconImages(<span class="keyword">null</span>);</span><br><span class="line">        addKeyListener(<span class="keyword">new</span> java.awt.event.KeyAdapter() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(java.awt.event.KeyEvent evt)</span> </span>&#123;</span><br><span class="line">                formKeyPressed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        go.setBackground(<span class="keyword">new</span> java.awt.Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">204</span>));</span><br><span class="line">        go.setFont(<span class="keyword">new</span> java.awt.Font(<span class="string">"Lucida Grande"</span>, <span class="number">1</span>, <span class="number">64</span>)); <span class="comment">// NOI18N</span></span><br><span class="line">        go.setForeground(<span class="keyword">new</span> java.awt.Color(<span class="number">102</span>, <span class="number">255</span>, <span class="number">102</span>));</span><br><span class="line">        go.setIcon(<span class="keyword">new</span> javax.swing.ImageIcon(getClass().getResource(<span class="string">"/pictures/巴西.png"</span>))); <span class="comment">// NOI18N</span></span><br><span class="line">        go.setToolTipText(<span class="string">""</span>);</span><br><span class="line">        go.setBorder(<span class="keyword">new</span> javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));</span><br><span class="line">        go.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                goActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        start.setText(<span class="string">"重新开始"</span>);</span><br><span class="line">        start.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                startActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        pause.setText(<span class="string">"暂停"</span>);</span><br><span class="line">        pause.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                pauseActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        msg.setText(<span class="string">"双人游戏哦！"</span>);</span><br><span class="line"></span><br><span class="line">        jLabel1.setText(<span class="string">"模式选择："</span>);</span><br><span class="line"></span><br><span class="line">        model.setModel(<span class="keyword">new</span> javax.swing.DefaultComboBoxModel&lt;&gt;(<span class="keyword">new</span> String[] &#123; <span class="string">"简约模式"</span>, <span class="string">"炫彩模式"</span>, <span class="string">"极速模式"</span> &#125;));</span><br><span class="line">        model.setFocusable(<span class="keyword">false</span>);</span><br><span class="line">        model.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                modelActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        msg2.setColumns(<span class="number">20</span>);</span><br><span class="line">        msg2.setRows(<span class="number">5</span>);</span><br><span class="line">        msg2.setText(<span class="string">"游戏说明：\n键盘←→控制方向，↑旋转俄罗斯方块，↓加速下落\n简约模式，炫彩模式每消除一行加1分；\n极速模式每消除一行加10分；\n道具说明：\n使用道具后将在最低端消除一行，\n每局游戏只有5次使用道具的机会！"</span>);</span><br><span class="line">        msg2.setBorder(<span class="keyword">null</span>);</span><br><span class="line">        msg2.setFocusable(<span class="keyword">false</span>);</span><br><span class="line">        jScrollPane1.setViewportView(msg2);</span><br><span class="line"></span><br><span class="line">        openHomeButton.setText(<span class="string">"创建房间"</span>);</span><br><span class="line">        openHomeButton.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                openHomeButtonActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        joinHomeButton.setText(<span class="string">"加入房间"</span>);</span><br><span class="line">        joinHomeButton.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                joinHomeButtonActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        joinHomeText.addActionListener(<span class="keyword">new</span> java.awt.event.ActionListener() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;</span><br><span class="line">                joinHomeTextActionPerformed(evt);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        javax.swing.GroupLayout layout = <span class="keyword">new</span> javax.swing.GroupLayout(getContentPane());</span><br><span class="line">        getContentPane().setLayout(layout);</span><br><span class="line">        layout.setHorizontalGroup(</span><br><span class="line">            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">            .addGroup(layout.createSequentialGroup()</span><br><span class="line">                .addGap(<span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>)</span><br><span class="line">                .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">106</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                .addGap(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>)</span><br><span class="line">                .addComponent(pause)</span><br><span class="line">                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, <span class="number">426</span>, Short.MAX_VALUE)</span><br><span class="line">                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">76</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                    .addComponent(model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))</span><br><span class="line">                .addGap(<span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>))</span><br><span class="line">            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()</span><br><span class="line">                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">                    .addGroup(layout.createSequentialGroup()</span><br><span class="line">                        .addGap(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">293</span>, javax.swing.GroupLayout.PREFERRED_SIZE))</span><br><span class="line">                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()</span><br><span class="line">                        .addContainerGap()</span><br><span class="line">                        .addComponent(go, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">293</span>, javax.swing.GroupLayout.PREFERRED_SIZE)))</span><br><span class="line">                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)</span><br><span class="line">                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">                    .addGroup(layout.createSequentialGroup()</span><br><span class="line">                        .addComponent(openHomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">224</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                        .addGap(<span class="number">0</span>, <span class="number">0</span>, Short.MAX_VALUE))</span><br><span class="line">                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()</span><br><span class="line">                        .addGap(<span class="number">0</span>, <span class="number">16</span>, Short.MAX_VALUE)</span><br><span class="line">                        .addComponent(joinHomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">152</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                        .addGap(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>)</span><br><span class="line">                        .addComponent(joinHomeText, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">153</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                        .addGap(<span class="number">106</span>, <span class="number">106</span>, <span class="number">106</span>))))</span><br><span class="line">            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()</span><br><span class="line">                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)</span><br><span class="line">                .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">293</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                .addGap(<span class="number">199</span>, <span class="number">199</span>, <span class="number">199</span>))</span><br><span class="line">        );</span><br><span class="line">        layout.setVerticalGroup(</span><br><span class="line">            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">            .addGroup(layout.createSequentialGroup()</span><br><span class="line">                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)</span><br><span class="line">                    .addGroup(layout.createSequentialGroup()</span><br><span class="line">                        .addGap(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>)</span><br><span class="line">                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)</span><br><span class="line">                            .addComponent(start, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">50</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                            .addComponent(pause, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">50</span>, javax.swing.GroupLayout.PREFERRED_SIZE)))</span><br><span class="line">                    .addGroup(layout.createSequentialGroup()</span><br><span class="line">                        .addGap(<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>)</span><br><span class="line">                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">26</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)</span><br><span class="line">                        .addComponent(model, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))</span><br><span class="line">                .addGap(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">                .addComponent(msg, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">40</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                .addGap(<span class="number">68</span>, <span class="number">68</span>, <span class="number">68</span>)</span><br><span class="line">                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)</span><br><span class="line">                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()</span><br><span class="line">                        .addComponent(go, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">198</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                        .addGap(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>)</span><br><span class="line">                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">120</span>, javax.swing.GroupLayout.PREFERRED_SIZE))</span><br><span class="line">                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()</span><br><span class="line">                        .addComponent(openHomeButton, javax.swing.GroupLayout.PREFERRED_SIZE, <span class="number">142</span>, javax.swing.GroupLayout.PREFERRED_SIZE)</span><br><span class="line">                        .addGap(<span class="number">44</span>, <span class="number">44</span>, <span class="number">44</span>)</span><br><span class="line">                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, <span class="keyword">false</span>)</span><br><span class="line">                            .addComponent(joinHomeButton, javax.swing.GroupLayout.DEFAULT_SIZE, <span class="number">173</span>, Short.MAX_VALUE)</span><br><span class="line">                            .addComponent(joinHomeText))))</span><br><span class="line">                .addContainerGap(<span class="number">106</span>, Short.MAX_VALUE))</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        pack();</span><br><span class="line">    &#125;<span class="comment">// &lt;/editor-fold&gt;//GEN-END:initComponents</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">formKeyPressed</span><span class="params">(java.awt.event.KeyEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_formKeyPressed</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (evt.getKeyCode() &lt; <span class="number">50</span>) &#123;</span><br><span class="line">                gp.keyPressed(evt);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"还没点开始"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_formKeyPressed</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_goActionPerformed</span></span><br><span class="line">        <span class="comment">// 开始游戏按钮:</span></span><br><span class="line"><span class="comment">//        MainFrame.isOver = false;</span></span><br><span class="line"><span class="comment">//        msg.setVisible(false);</span></span><br><span class="line"><span class="comment">//        msg2.setVisible(false);</span></span><br><span class="line"><span class="comment">//        jScrollPane1.setVisible(false);</span></span><br><span class="line"><span class="comment">//        start.setVisible(true);</span></span><br><span class="line"><span class="comment">//        pause.setVisible(true);</span></span><br><span class="line"><span class="comment">//        gp2 = new GamePanel(false);</span></span><br><span class="line"><span class="comment">//        gp2.setSize(200, 400);</span></span><br><span class="line"><span class="comment">//        gp2.setLocation(450, 100);</span></span><br><span class="line"><span class="comment">//        this.getContentPane().add(gp2);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        server = new GameServer();</span></span><br><span class="line"><span class="comment">//        ClientListen clientListen = new ClientListen(gp2);</span></span><br><span class="line"><span class="comment">//        setSocket(server.getSocket());</span></span><br><span class="line"><span class="comment">//        </span></span><br><span class="line"><span class="comment">//        gp = new GamePanel(true);</span></span><br><span class="line"><span class="comment">//        gp.setSize(200, 400);</span></span><br><span class="line"><span class="comment">//        gp.setLocation(50, 100);</span></span><br><span class="line"><span class="comment">//        this.getContentPane().add(gp);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        changeNext();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        cp.setVisible(true);</span></span><br><span class="line"><span class="comment">//        cp2.setVisible(true);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        go.setVisible(false);</span></span><br><span class="line"><span class="comment">//        this.requestFocusInWindow();</span></span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_goActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pauseActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_pauseActionPerformed</span></span><br><span class="line">        <span class="comment">// 暂停按钮:</span></span><br><span class="line">        <span class="keyword">if</span> (isPause) &#123;</span><br><span class="line">            isPause = <span class="keyword">false</span>;</span><br><span class="line">            pause.setText(<span class="string">"暂停"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            isPause = <span class="keyword">true</span>;</span><br><span class="line">            pause.setText(<span class="string">"继续"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.requestFocusInWindow();</span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_pauseActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_startActionPerformed</span></span><br><span class="line">        <span class="comment">// 重新开始按钮:</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            over();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);<span class="comment">//等待GamePanel线程死亡</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        MainFrame.isOver = <span class="keyword">false</span>;</span><br><span class="line">        gp = <span class="keyword">new</span> GamePanel(<span class="keyword">true</span>);</span><br><span class="line">        gp.setSize(<span class="number">200</span>, <span class="number">400</span>);</span><br><span class="line">        gp.setLocation(<span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(gp);</span><br><span class="line"></span><br><span class="line">        gp2 = <span class="keyword">new</span> GamePanel(<span class="keyword">false</span>);</span><br><span class="line">        gp2.setSize(<span class="number">200</span>, <span class="number">400</span>);</span><br><span class="line">        gp2.setLocation(<span class="number">450</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(gp2);</span><br><span class="line"></span><br><span class="line">        changeCount();</span><br><span class="line">        changeNext();</span><br><span class="line">        cp.delOver();</span><br><span class="line">        cp.setProp1Count(<span class="number">5</span>);</span><br><span class="line">        cp2.delOver();</span><br><span class="line">        cp2.setProp1Count(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">this</span>.requestFocusInWindow();</span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_startActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">modelActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_modelActionPerformed</span></span><br><span class="line">        <span class="comment">// 模式切换</span></span><br><span class="line">        String mo = (String) model.getSelectedItem();</span><br><span class="line">        <span class="keyword">switch</span> (mo) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"简约模式"</span>:</span><br><span class="line">                mod = <span class="number">0</span>;</span><br><span class="line">                point = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"炫彩模式"</span>:</span><br><span class="line">                mod = <span class="number">1</span>;</span><br><span class="line">                point = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"极速模式"</span>:</span><br><span class="line">                mod = <span class="number">2</span>;</span><br><span class="line">                gp.getGameState().setInterval(<span class="number">100</span>);</span><br><span class="line">                gp2.getGameState().setInterval(<span class="number">100</span>);</span><br><span class="line">                point = <span class="number">10</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_modelActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openHomeButtonActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_openHomeButtonActionPerformed</span></span><br><span class="line">        <span class="comment">// 开房</span></span><br><span class="line">        MainFrame.isOver = <span class="keyword">false</span>;</span><br><span class="line">        msg.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        msg2.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        jScrollPane1.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        start.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        pause.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        gp2 = <span class="keyword">new</span> GamePanel(<span class="keyword">false</span>);</span><br><span class="line">        gp2.setSize(<span class="number">200</span>, <span class="number">400</span>);</span><br><span class="line">        gp2.setLocation(<span class="number">450</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(gp2);</span><br><span class="line"></span><br><span class="line">        server = <span class="keyword">new</span> GameServer(gp2);</span><br><span class="line"><span class="comment">//        ClientListen clientListen = new ClientListen(gp2);</span></span><br><span class="line">        setSocket(server.getSocket());</span><br><span class="line">        </span><br><span class="line">        gp = <span class="keyword">new</span> GamePanel(<span class="keyword">true</span>);</span><br><span class="line">        gp.setSize(<span class="number">200</span>, <span class="number">400</span>);</span><br><span class="line">        gp.setLocation(<span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(gp);</span><br><span class="line"></span><br><span class="line">        changeNext();</span><br><span class="line"></span><br><span class="line">        cp.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        cp2.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        go.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        openHomeButton.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        joinHomeButton.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        joinHomeText.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.requestFocusInWindow();</span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_openHomeButtonActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">joinHomeTextActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_joinHomeTextActionPerformed</span></span><br><span class="line">        <span class="comment">// TODO add your handling code here:</span></span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_joinHomeTextActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">joinHomeButtonActionPerformed</span><span class="params">(java.awt.event.ActionEvent evt)</span> </span>&#123;<span class="comment">//GEN-FIRST:event_joinHomeButtonActionPerformed</span></span><br><span class="line">        <span class="comment">// 加入房间</span></span><br><span class="line">        MainFrame.isOver = <span class="keyword">false</span>;</span><br><span class="line">        msg.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        msg2.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        jScrollPane1.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        start.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        pause.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        gp2 = <span class="keyword">new</span> GamePanel(<span class="keyword">false</span>);</span><br><span class="line">        gp2.setSize(<span class="number">200</span>, <span class="number">400</span>);</span><br><span class="line">        gp2.setLocation(<span class="number">450</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(gp2);</span><br><span class="line"></span><br><span class="line">        GameClient clientListen = <span class="keyword">new</span> GameClient(gp2, joinHomeText.getText());</span><br><span class="line">        setSocket(clientListen.getSocket());</span><br><span class="line">        </span><br><span class="line">        gp = <span class="keyword">new</span> GamePanel(<span class="keyword">true</span>);</span><br><span class="line">        gp.setSize(<span class="number">200</span>, <span class="number">400</span>);</span><br><span class="line">        gp.setLocation(<span class="number">50</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">this</span>.getContentPane().add(gp);</span><br><span class="line"></span><br><span class="line">        changeNext();</span><br><span class="line"></span><br><span class="line">        cp.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        cp2.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        go.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        openHomeButton.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        joinHomeButton.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        joinHomeText.setVisible(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.requestFocusInWindow();</span><br><span class="line">    &#125;<span class="comment">//GEN-LAST:event_joinHomeButtonActionPerformed</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args the command line arguments</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* Set the Nimbus look and feel */</span></span><br><span class="line">        <span class="comment">//&lt;editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) "&gt;</span></span><br><span class="line">        <span class="comment">/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.</span></span><br><span class="line"><span class="comment">         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"Nimbus"</span>.equals(info.getName())) &#123;</span><br><span class="line">                    javax.swing.UIManager.setLookAndFeel(info.getClassName());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            java.util.logging.Logger.getLogger(MainFrame<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">java</span>.<span class="title">util</span>.<span class="title">logging</span>.<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            java.util.logging.Logger.getLogger(MainFrame<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">java</span>.<span class="title">util</span>.<span class="title">logging</span>.<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            java.util.logging.Logger.getLogger(MainFrame<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">java</span>.<span class="title">util</span>.<span class="title">logging</span>.<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (javax.swing.UnsupportedLookAndFeelException ex) &#123;</span><br><span class="line">            java.util.logging.Logger.getLogger(MainFrame<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">java</span>.<span class="title">util</span>.<span class="title">logging</span>.<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//&lt;/editor-fold&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Create and display the form */</span></span><br><span class="line">        java.awt.EventQueue.invokeLater(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                MainFrame mf = <span class="keyword">new</span> MainFrame();</span><br><span class="line">                mf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">                mf.requestFocusInWindow();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Variables declaration - do not modify//GEN-BEGIN:variables</span></span><br><span class="line">    <span class="keyword">private</span> javax.swing.JButton go;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JLabel jLabel1;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JScrollPane jScrollPane1;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JButton joinHomeButton;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JTextField joinHomeText;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JComboBox&lt;String&gt; model;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JLabel msg;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JTextArea msg2;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JButton openHomeButton;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JButton pause;</span><br><span class="line">    <span class="keyword">private</span> javax.swing.JButton start;</span><br><span class="line">    <span class="comment">// End of variables declaration//GEN-END:variables</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Socket <span class="title">getSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSocket</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        socket = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="socket实现联机"><a href="#socket实现联机" class="headerlink" title="socket实现联机"></a>socket实现联机</h1><p>这里实现联机有很多思路，比如传显示对方的结果的矩阵，或者只传递动作。这里我选择了只传递动作参数，在对战双方的程序中各自进行运算。</p>
<h2 id="SocketUnit-java"><a href="#SocketUnit-java" class="headerlink" title="SocketUnit.java"></a>SocketUnit.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketUtil</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Socket socket,String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PrintWriter pw = <span class="keyword">new</span> PrintWriter(</span><br><span class="line">                        <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">                                socket.getOutputStream()));</span><br><span class="line">                pw.println(string);</span><br><span class="line">                pw.flush();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                System.out.println(<span class="string">"error!!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GameServer-java"><a href="#GameServer-java" class="headerlink" title="GameServer.java"></a>GameServer.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> mytetris.GamePanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameServer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Socket socket;</span><br><span class="line">    GamePanel gamePanel;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameServer</span><span class="params">(GamePanel gamePanel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.gamePanel = gamePanel;</span><br><span class="line">            System.out.println(<span class="string">"服务器开启！"</span>);</span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">50000</span>);</span><br><span class="line">            socket = serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"有新的客户端连接到服务器喽！"</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            Logger.getLogger(GameServer<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我开始收听客户端！"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                            socket.getInputStream()));</span><br><span class="line">            String code;</span><br><span class="line">            <span class="keyword">while</span> (!(code = br.readLine()).equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                gamePanel.getPressed(code);</span><br><span class="line">                gamePanel.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"客户端已经关闭了对话！"</span>);</span><br><span class="line">            br.close();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"服务器已经关闭"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">getSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="GameClient-java"><a href="#GameClient-java" class="headerlink" title="GameClient.java"></a>GameClient.java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"><span class="keyword">import</span> mytetris.GamePanel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameClient</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Socket clientSocket;</span><br><span class="line">    GamePanel gamePanel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GameClient</span><span class="params">(GamePanel gamePanel, String ip)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.gamePanel = gamePanel;</span><br><span class="line">            <span class="keyword">this</span>.clientSocket = <span class="keyword">new</span> Socket(ip, <span class="number">50000</span>);</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">            Logger.getLogger(GameClient<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(</span><br><span class="line">                            clientSocket.getInputStream()));</span><br><span class="line">            String code;</span><br><span class="line">            <span class="keyword">while</span> (!(code = br.readLine()).equals(<span class="string">"bye"</span>)) &#123;</span><br><span class="line">                gamePanel.getPressed(code);</span><br><span class="line">                gamePanel.repaint();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"服务端已经关闭了对话！"</span>);</span><br><span class="line">            br.close();</span><br><span class="line">            clientSocket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"客户端已经关闭"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">getSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientSocket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 从零到∞</title>
    <url>/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/</url>
    <content><![CDATA[<blockquote>
<p>这是B站狂神说Mybatis教学视频的笔记（转载）<br>视频地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2Njk3NDIwODQ=" title="https://www.bilibili.com/video/av69742084">https://www.bilibili.com/video/av69742084<i class="fa fa-external-link"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1psYXRhbmxvbmcvbXliYXRpcy1zdHVkeQ==" title="https://github.com/Zlatanlong/mybatis-study">完整代码<i class="fa fa-external-link"></i></span>（fork于评论区仓库）</p>
</blockquote>
<p>基础知识：</p>
<ul>
<li>JDBC</li>
<li>Mysql</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p>框架：是有配置文件的。最好的方式：看官网文档</p>
<h1 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h1><h2 id="1-1、什么是MyBatis"><a href="#1-1、什么是MyBatis" class="headerlink" title="1.1、什么是MyBatis"></a>1.1、什么是MyBatis</h2><p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/mybatis.png" alt="mybatis"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="什么是-MyBatis？"><a href="#什么是-MyBatis？" class="headerlink" title="什么是 MyBatis？"></a>什么是 MyBatis？</h3><ul>
<li>MyBatis 是一款优秀的持久层框架</li>
<li>它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
</ul>
<p>如何获得MyBatis？</p>
<ul>
<li>Maven仓库</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>github：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL215YmF0aXMvbXliYXRpcy0zL3JlbGVhc2Vz" title="https://github.com/mybatis/mybatis-3/releases">https://github.com/mybatis/mybatis-3/releases<i class="fa fa-external-link"></i></span></p>
</li>
<li><p>中文文档：<span class="exturl" data-url="aHR0cHM6Ly9teWJhdGlzLm9yZy9teWJhdGlzLTMvemgvaW5kZXguaHRtbA==" title="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html<i class="fa fa-external-link"></i></span></p>
</li>
</ul>
<a id="more"></a>

<h2 id="1-2、持久化"><a href="#1-2、持久化" class="headerlink" title="1.2、持久化"></a>1.2、持久化</h2><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库(JDBC),io文件持久化。</li>
<li>生活：冷藏、罐头。</li>
</ul>
<p><strong>为什么需要持久化？</strong></p>
<ul>
<li>有一些对象，不能让他丢掉。</li>
</ul>
<h2 id="1-3、持久层"><a href="#1-3、持久层" class="headerlink" title="1.3、持久层"></a>1.3、持久层</h2><p>Dao层、Service层、Controller层…..</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h2 id="1-4、为什么需要Mybatis？"><a href="#1-4、为什么需要Mybatis？" class="headerlink" title="1.4、为什么需要Mybatis？"></a>1.4、为什么需要Mybatis？</h2><ul>
<li><p>帮助程序员将数据存入到数据库中。</p>
</li>
<li><p>方便</p>
</li>
<li><p>传统的JDBC代码太复杂了。简化、框架、自动化。</p>
</li>
<li><p>不用Mybatis也可以。更容易上手。<strong>技术没有高低之分</strong></p>
</li>
<li><p>优点：</p>
<ul>
<li>简单易学</li>
<li>灵活</li>
<li>sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
<li>提供xml标签，支持编写动态sql。</li>
</ul>
</li>
</ul>
<p>  <strong>最重要的一点：使用的人多！</strong></p>
<p>  Spring SpringMVC SpringBoot</p>
<h1 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h1><p>思路：搭建环境–&gt;导入Mybatis–&gt;编写代码–&gt;测试！</p>
<h2 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h2><p>搭建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="string">`mybatis`</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="string">`mybatis`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`pwd`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> (<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`pwd`</span>) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'狂神'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'张三'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'李四'</span>,<span class="string">'123890'</span>)</span><br></pre></td></tr></table></figure>

<p>新建项目</p>
<ol>
<li>新建一个普通的maven项目</li>
<li>删除src目录</li>
<li>导入maven依赖</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span><br><span class="line">         xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">         xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--父工程--&gt;</span><br><span class="line">    &lt;groupId&gt;com.rui&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;MyBatis-Study&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--导入依赖--&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--mysql驱动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.1.46&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--mybatis--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!--junit--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h2><ul>
<li><p>编写mybatis的核心配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--environments配置环境组--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--default默认环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--environment单个环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--transactionManager配置事务管理器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置连接池--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UFT-8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"自己的账号"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"自己的密码"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>编写mybatis工具类</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rui.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sqlSessionFactory---&gt;SessionFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//使用mybatis第一步、获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//既然有了 SqlSessionFactory，顾名思义，我们就可以从中获得 SqlSession 的实例了。</span></span><br><span class="line">    <span class="comment">// SqlSession 完全包含了面向数据库执行 SQL 命令所需的所有方法。</span></span><br><span class="line">    <span class="comment">// 你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h2><ul>
<li><p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rui.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">user</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"user&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rui.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rui.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口实现类由原来的UserImpl转变为一个Mapper配置文件</p>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace=绑定一个对应的mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.rui.dao.UserDao"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--select查询语句--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.User"</span>&gt;</span></span><br><span class="line">       /*定义sql*/</span><br><span class="line">       select * from mybatis.user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h2><p> 注意点：</p>
<p>org.apache.ibatis.binding.BindingException: Type interface com.rui.dao.UserDao is not known to the MapperRegistry.</p>
<p>MapperRegistry是什么?</p>
<p>核心配置文件中注册mappers</p>
<ul>
<li><p>junit测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rui;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rui.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.rui.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.rui.utils.MyBatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步：获得SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//执行SQL</span></span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭SqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能会遇到的问题：</p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>==Maven导出资源问题==</li>
</ol>
</li>
</ul>
<h1 id="3、CRUD"><a href="#3、CRUD" class="headerlink" title="3、CRUD"></a>3、CRUD</h1><h2 id="1、namespace"><a href="#1、namespace" class="headerlink" title="1、namespace"></a>1、namespace</h2><p>namespace中的包名要和Dao/mapper接口的包名保持一致</p>
<h2 id="2、select"><a href="#2、select" class="headerlink" title="2、select"></a>2、select</h2><p>选择查询语句；</p>
<ul>
<li><code>id</code>：就是对应的namespace中的方法名；</li>
<li><code>resultType</code>：Sql语句执行的返回值！</li>
<li><code>parameterType</code>：参数类型！</li>
</ul>
<ol>
<li><p>编写接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rui.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rui.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写对应的mapper中的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.User"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">       /*定义sql*/</span><br><span class="line">       select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试 <!--增删改需要提交事务--></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.getUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="3、Insert"><a href="#3、Insert" class="headerlink" title="3、Insert"></a>3、Insert</h2><h2 id="4、Update"><a href="#4、Update" class="headerlink" title="4、Update"></a>4、Update</h2><h2 id="5、Delete"><a href="#5、Delete" class="headerlink" title="5、Delete"></a>5、Delete</h2><p>==<strong>注意点：增删改需要提交事务</strong>==</p>
<h2 id="6、分析错误"><a href="#6、分析错误" class="headerlink" title="6、分析错误"></a>6、分析错误</h2><ul>
<li>标签不要匹配错误</li>
<li>resource绑定mapper，需要使用路径！</li>
<li>程序配置文件必须符合规范</li>
<li>NullPointerException，没有注册到资源</li>
<li>输出的xml文件中存在中文乱码问题</li>
<li>maven资源没有导出问题</li>
</ul>
<h2 id="7、万能Map"><a href="#7、万能Map" class="headerlink" title="7、万能Map"></a>7、万能Map</h2><p>假设，我们的实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用Map！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能Map</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--对象中的属性，可以直接取出来 parameterType=传递map中的key--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser2"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    insert into mybatis.user (id, name, pwd) values (#&#123;userId&#125;,#&#123;userName&#125;,#&#123;password&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//万能map</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"userId"</span>,<span class="number">4</span>);</span><br><span class="line">        map.put(<span class="string">"userName"</span>,<span class="string">"王五"</span>);</span><br><span class="line">        map.put(<span class="string">"password"</span>,<span class="string">"23333"</span>);</span><br><span class="line">        mapper.addUser2(map);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Map传递参数，直接在sql中取出key即可！【parameterType=”map”】</p>
<p>对象传递参数，直接在sql中取对象的属性即可！【parameterType=”Object”】</p>
<p>只有一个基本类型参数的情况下，可以直接在sql中取到！</p>
<p>多个参数用Map，<strong>或者注解！</strong></p>
<h2 id="8、思考"><a href="#8、思考" class="headerlink" title="8、思考"></a>8、思考</h2><p>模糊查询怎么写？</p>
<ol>
<li><p>Java代码执行的时候传递通配符%%</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList=mapper.getUserLike(<span class="string">"%李%"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在sql拼接中使用通配符！</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mybatis.user <span class="keyword">where</span> <span class="keyword">name</span> <span class="keyword">like</span> <span class="string">"%"</span><span class="comment">#&#123;value&#125;"%"</span></span><br></pre></td></tr></table></figure>


</li>
</ol>
<h1 id="4、配置解析"><a href="#4、配置解析" class="headerlink" title="4、配置解析"></a>4、配置解析</h1><h2 id="1、核心配置文件"><a href="#1、核心配置文件" class="headerlink" title="1、核心配置文件"></a>1、核心配置文件</h2><ul>
<li>mybatis-config.xml</li>
<li>MyBatis的配置文件包含了会深深影响MyBatis行为的设置和属性信息</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">configuration（配置）</span><br><span class="line">properties（属性）</span><br><span class="line">settings（设置）</span><br><span class="line">typeAliases（类型别名）</span><br><span class="line">typeHandlers（类型处理器）</span><br><span class="line">objectFactory（对象工厂）</span><br><span class="line">plugins（插件）</span><br><span class="line">environments（环境配置）</span><br><span class="line">environment（环境变量）</span><br><span class="line">transactionManager（事务管理器）</span><br><span class="line">dataSource（数据源）</span><br><span class="line">databaseIdProvider（数据库厂商标识）</span><br><span class="line">mappers（映射器）</span><br></pre></td></tr></table></figure>

<h2 id="2、环境配置（environments）"><a href="#2、环境配置（environments）" class="headerlink" title="2、环境配置（environments）"></a>2、环境配置（environments）</h2><p>MyBatis 可以配置成适应多种环境</p>
<p><strong>不过要记住：尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。</strong></p>
<p>学会使用配置多套运行环境！</p>
<p>MyBatis默认的事务管理器就是JDBC，连接池：POOLED</p>
<h2 id="3、属性（properties）"><a href="#3、属性（properties）" class="headerlink" title="3、属性（properties）"></a>3、属性（properties）</h2><p>我们可以通过properties属性来实现引用配置文件</p>
<p>这些属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。【db.properties】</p>
<p>编写一个配置文件</p>
<p>db.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis?</span></span><br><span class="line"><span class="attr">useSSL</span>=<span class="string">true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">Cc105481</span></span><br></pre></td></tr></table></figure>



<p>在核心配置文件中引入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"Cc105481"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以直接引入外部文件</li>
<li>可以在其中增加一些属性配置</li>
<li>如果两个文件有同一字段，优先使用外部配置文件的！</li>
</ul>
<h2 id="4、类型别名（typeAliases）"><a href="#4、类型别名（typeAliases）" class="headerlink" title="4、类型别名（typeAliases）"></a>4、类型别名（typeAliases）</h2><ul>
<li>类型别名是为 Java 类型设置一个短的名字。</li>
<li>存在的意义仅在于用来减少类完全限定名的冗余。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.rui.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean,比如：</p>
<p>扫描实体类的包，他的默认别名就为这个类的类名，首字母小写！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以给实体类起别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.rui.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>在实体类比较少的时候，使用第一种方式。</p>
<p>如果实体类十分多，建议使用第二种方式。</p>
<p>第一种可以DIY别名，第二种则不行，如果非要改，需要在实体类（pojo）上增加@Alias注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"author"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5、设置"><a href="#5、设置" class="headerlink" title="5、设置"></a>5、设置</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。</p>
<p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/Settings.png" alt="Settings"></p>
<h2 id="6、生命周期和作用域"><a href="#6、生命周期和作用域" class="headerlink" title="6、生命周期和作用域"></a>6、生命周期和作用域</h2><p>生命周期，和作用域是至关重要的，因为错误的使用会导致非常严重的<strong>并发问题</strong>。</p>
<p><strong>SqlSessionFactoryBuilder</strong></p>
<ul>
<li>一旦创建了SqlSessionFactory，就不再需要它了</li>
<li>局部变量</li>
</ul>
<p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/mybatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="mybatis运行流程"><strong>SqlSessionFactory：</strong></p>
<ul>
<li>可以想象为：数据库连接池</li>
<li>SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，<strong>没有任何理由丢弃它或重新创建另一个实例</strong>。</li>
<li>因此SqlSessionFactory的最佳作用域是应用作用域。</li>
<li>最简单的就是使用 <strong>单例模式</strong> 或者静态单例模式</li>
</ul>
<p><strong>SqlSession</strong></p>
<ul>
<li><p>连接到连接池的一个请求！</p>
</li>
<li><p>SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。</p>
</li>
<li><p>用完之后需要赶紧关闭，否则会占用资源</p>
<p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/SqlSessionFactory.png" alt="SqlSessionFactory"></p>
</li>
</ul>
<p>这里的每一个Mapper，就代表一个具体的业务！</p>
<h1 id="5、解决属性名和字段名不一致的问题"><a href="#5、解决属性名和字段名不一致的问题" class="headerlink" title="5、解决属性名和字段名不一致的问题"></a>5、解决属性名和字段名不一致的问题</h1><h2 id="1、问题"><a href="#1、问题" class="headerlink" title="1、问题"></a>1、问题</h2><p>数据库中的字段</p>
<p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5.png" alt="数据库中的字段"></p>
<p>新建一个项目，拷贝之前的，测试实体类字段<code>password</code>不一致的情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/%E6%B5%8B%E8%AF%95%E9%94%99%E8%AF%AF.png" alt="测试错误"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//select * from mybatis.user where id = #&#123;id&#125;</span></span><br><span class="line"><span class="comment">//类型处理器</span></span><br><span class="line"><span class="comment">//select id,name,pwd from mybatis.user where id = #&#123;id&#125;</span></span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<ul>
<li>起别名</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>,<span class="keyword">name</span>,pwd <span class="keyword">as</span> <span class="keyword">password</span> <span class="keyword">from</span> mybatis.user <span class="keyword">where</span> <span class="keyword">id</span> = <span class="comment">#&#123;id&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="2、resultMap"><a href="#2、resultMap" class="headerlink" title="2、resultMap"></a>2、resultMap</h2><p>结果集映射</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id name pwd</span><br><span class="line">id name password</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--结果集映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column数据库中的字段，property实体类中的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"	id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">       /*定义sql*/</span><br><span class="line">       select * from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素</li>
<li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li>
<li><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</li>
<li>如果世界总是这么简单就好了。</li>
</ul>
<h1 id="6、日志"><a href="#6、日志" class="headerlink" title="6、日志"></a>6、日志</h1><h2 id="6-1、日志工厂"><a href="#6-1、日志工厂" class="headerlink" title="6.1、日志工厂"></a>6.1、日志工厂</h2><p>如果一个数据库操作，出现了异常，我们需要排错。日志就是最好的助手！</p>
<p>曾经：sout、debug</p>
<p>现在：日志工厂</p>
<p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/%E6%97%A5%E5%BF%97.png" alt="日志"></p>
<ul>
<li>SLF4J </li>
<li><strong>LOG4J</strong>【掌握】</li>
<li>LOG4J2</li>
<li>JDK_LOGGING</li>
<li>COMMONS_LOGGING </li>
<li>STDOUT_LOGGING【掌握】</li>
<li>NO_LOGGING</li>
</ul>
<p>在Mybatis中具体使用那个日志实现，在设置中设定！****</p>
<p><strong>STDOUT_LOGGING标准日志输出</strong></p>
<p>在mybatis核心配置文件中，配置我们的日志！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE.png" alt="日志配置"></p>
<h2 id="6-2、Log4j"><a href="#6-2、Log4j" class="headerlink" title="6.2、Log4j"></a>6.2、Log4j</h2><p>什么是log4j</p>
<ul>
<li>Log4j是<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9BcGFjaGUvODUxMjk5NQ==" title="https://baike.baidu.com/item/Apache/8512995">Apache<i class="fa fa-external-link"></i></span>的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/mjqfliLblj7AvMjQzODYyNg==" title="https://baike.baidu.com/item/控制台/2438626">控制台<i class="fa fa-external-link"></i></span>、文件、<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9HVUk=" title="https://baike.baidu.com/item/GUI">GUI<i class="fa fa-external-link"></i></span>组件</li>
<li>我们也可以控制每一条日志的输出格式</li>
<li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。</li>
<li>通过一个<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS/phY3nva7mlofku7YvMjg2NTUw" title="https://baike.baidu.com/item/配置文件/286550">配置文件<i class="fa fa-external-link"></i></span>来灵活地进行配置，而不需要修改应用的代码。</li>
</ul>
<p>1.先导入log4j的包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2.log4j.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">debug, stdout, R</span></span><br><span class="line"><span class="meta">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="comment"># Pattern to output the caller's file name and line number.</span></span><br><span class="line"><span class="meta">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%5p [%t] (%F:%L) - %m%n</span></span><br><span class="line"><span class="meta">log4j.appender.R</span>=<span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.R.File</span>=<span class="string">example.log</span></span><br><span class="line"><span class="meta">log4j.appender.R.MaxFileSize</span>=<span class="string">100KB</span></span><br><span class="line"><span class="comment"># Keep one backup file</span></span><br><span class="line"><span class="meta">log4j.appender.R.MaxBackupIndex</span>=<span class="string">5</span></span><br><span class="line"><span class="meta">log4j.appender.R.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.R.layout.ConversionPattern</span>=<span class="string">%p %t %c - %m%n</span></span><br></pre></td></tr></table></figure>

<p>3.配置log4j为日志实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4.log4j的使用！直接测试运行刚才的查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEBUG [main] (LogFactory.java:105) - Logging initialized using &#39;class org.apache.ibatis.logging.log4j.Log4jImpl&#39; adapter.</span><br><span class="line">DEBUG [main] (LogFactory.java:105) - Logging initialized using &#39;class org.apache.ibatis.logging.log4j.Log4jImpl&#39; adapter.</span><br><span class="line">DEBUG [main] (PooledDataSource.java:353) - PooledDataSource forcefully closed&#x2F;removed all connections.</span><br><span class="line">DEBUG [main] (PooledDataSource.java:353) - PooledDataSource forcefully closed&#x2F;removed all connections.</span><br><span class="line">DEBUG [main] (PooledDataSource.java:353) - PooledDataSource forcefully closed&#x2F;removed all connections.</span><br><span class="line">DEBUG [main] (PooledDataSource.java:353) - PooledDataSource forcefully closed&#x2F;removed all connections.</span><br><span class="line">DEBUG [main] (JdbcTransaction.java:136) - Opening JDBC Connection</span><br><span class="line">Loading class &#96;com.mysql.jdbc.Driver&#39;. This is deprecated. The new driver class is &#96;com.mysql.cj.jdbc.Driver&#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br><span class="line">DEBUG [main] (PooledDataSource.java:424) - Created connection 2049051802.</span><br><span class="line">DEBUG [main] (JdbcTransaction.java:100) - Setting autocommit to false on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@7a220c9a]</span><br><span class="line">DEBUG [main] (BaseJdbcLogger.java:143) - &#x3D;&#x3D;&gt;  Preparing: &#x2F;*定义sql*&#x2F; select * from mybatis.user where id &#x3D; ?; </span><br><span class="line">DEBUG [main] (BaseJdbcLogger.java:143) - &#x3D;&#x3D;&gt; Parameters: 1(Integer)</span><br><span class="line">DEBUG [main] (BaseJdbcLogger.java:143) - &lt;&#x3D;&#x3D;      Total: 1</span><br><span class="line">User&#123;id&#x3D;1, name&#x3D;&#39;狂神&#39;, password&#x3D;&#39;123456&#39;&#125;</span><br><span class="line">DEBUG [main] (JdbcTransaction.java:122) - Resetting autocommit to true on JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@7a220c9a]</span><br><span class="line">DEBUG [main] (JdbcTransaction.java:90) - Closing JDBC Connection [com.mysql.cj.jdbc.ConnectionImpl@7a220c9a]</span><br><span class="line">DEBUG [main] (PooledDataSource.java:381) - Returned connection 2049051802 to pool.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disconnected from the target VM, address: &#39;127.0.0.1:58296&#39;, transport: &#39;socket&#39;</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<p><strong>简单使用</strong></p>
<ol>
<li><p>在要使用Log4j 的类中，导入org.apache.log4j.Logger;</p>
</li>
<li><p>日志对象，加载参数为当前类的class</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Logger logger = Logger.getLogger(UserDaoTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>日志级别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">"info:进入了testLog4j方法"</span>);</span><br><span class="line">logger.debug(<span class="string">"debug:进入了testLog4j"</span>);</span><br><span class="line">logger.error(<span class="string">"error:进入了testLog4j"</span>);</span><br></pre></td></tr></table></figure>



</li>
</ol>
<h1 id="7、分页"><a href="#7、分页" class="headerlink" title="7、分页"></a>7、分页</h1><p><strong>思考：为什么要分页？</strong></p>
<ul>
<li>减少数据的处理量</li>
</ul>
<h2 id="7-1、使用Limit分页"><a href="#7-1、使用Limit分页" class="headerlink" title="7.1、使用Limit分页"></a>7.1、使用Limit分页</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">limit</span> startIndex,pageSize</span><br></pre></td></tr></table></figure>



<p>使用Mybatis实现分页，核心SQL</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByLimit"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByLimit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"startIndex"</span>,<span class="number">0</span>);</span><br><span class="line">        map.put(<span class="string">"pageSize"</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = mapper.getUserByLimit(map);</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id><a href="#" class="headerlink" title></a></h2></li>
</ol>
<h2 id="7-2、RowBounds分页"><a href="#7-2、RowBounds分页" class="headerlink" title="7.2、RowBounds分页"></a>7.2、RowBounds分页</h2><p>不再使用SQL实现分页</p>
<ol>
<li><p>接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mapper.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--分页2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByRowBounds"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from mybatis.user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUserByRowBounds</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">    <span class="comment">//RowBounds实现</span></span><br><span class="line">    RowBounds rowBounds = <span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过java代码层面实现分页</span></span><br><span class="line">    List&lt;User&gt; userList = sqlSession.selectList(<span class="string">"com.rui.dao.UserMapper.getUserByRowBounds"</span>,<span class="keyword">null</span>,rowBounds);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="7-3、分页插件"><a href="#7-3、分页插件" class="headerlink" title="7.3、分页插件"></a>7.3、分页插件</h2><p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/image-20191203175719275.png" alt="image-20191203175719275"></p>
<p>了解即可，万一以后公司的架构师，说要使用，只需要知道它是什么东西！</p>
<h1 id="8、使用注解开发"><a href="#8、使用注解开发" class="headerlink" title="8、使用注解开发"></a>8、使用注解开发</h1><h2 id="8-1、面向接口编程"><a href="#8-1、面向接口编程" class="headerlink" title="8.1、面向接口编程"></a>8.1、面向接口编程</h2><p><strong>面向接口编程的根本原因：<u>解耦</u>，可拓展，提高复用，分层开发中、上层不用管具体的实现，大家都遵守共同的标准，使得开发变得容易，规范性好</strong></p>
<h2 id="8-2、使用注解开发"><a href="#8-2、使用注解开发" class="headerlink" title="8.2、使用注解开发"></a>8.2、使用注解开发</h2><ol>
<li><p>注解在接口上实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select</span>(value = <span class="string">"select * from user"</span>)</span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要在核心配置文件中绑定接口！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--绑定接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"rui.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//底层主要应用反射</span></span><br><span class="line">        UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; users = mapper.getUsers();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本质：反射机制实现</p>
<p>底层：动态代理！</p>
<h2 id="8-3、CRUD"><a href="#8-3、CRUD" class="headerlink" title="8.3、CRUD"></a>8.3、CRUD</h2><p>我们可以在工具类创建的时候实现自动提交事务！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>编写接口，增加注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(value = <span class="string">"select * from user"</span>)</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUsers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法存在多个参数，所有的参数前面必须加上@Param注解</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125; or name = #&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">getUserByID</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id,@<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span>String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name = #&#123;name&#125;,pwd = #&#123;password&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;uid&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"uid"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类</p>
<p>【注意：我们必须要将接口注册绑定到我们的核心配置文件中！】</p>
<p><strong>关于@Param()注解</strong></p>
<ul>
<li>基本类型的参数或者String类型，需要加上</li>
<li>引用类型不需要加</li>
<li>如果只有一个基本类型的话，可以忽略，但是建议大家都加上</li>
<li>我们在SQL中引用的就是我们这里的@Param()中设定的属性名</li>
</ul>
<p><strong>#{}   ${}区别</strong></p>
<h1 id="9、Lombok"><a href="#9、Lombok" class="headerlink" title="9、Lombok"></a>9、Lombok</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Project Lombok is a java library that automatically plugs into your editor and build tools, spicing up your java.</span><br><span class="line">Never write another getter or equals method again, with one annotation your <span class="class"><span class="keyword">class</span> <span class="title">has</span> <span class="title">a</span> <span class="title">fully</span> <span class="title">featured</span> <span class="title">builder</span>, <span class="title">Automate</span> <span class="title">your</span> <span class="title">logging</span> <span class="title">variables</span>, <span class="title">and</span> <span class="title">much</span> <span class="title">more</span>.</span></span><br></pre></td></tr></table></figure>



<p>使用步骤：</p>
<ol>
<li><p>在IDEA中安装Lombok插件</p>
</li>
<li><p>在项目中导入lombok的jar包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在实体类上加注解即可</p>
</li>
</ol>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span> and <span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@FieldNameConstants</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span>, <span class="meta">@RequiredArgsConstructor</span> and <span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Log</span>, <span class="meta">@Log</span>4j, <span class="meta">@Log</span>4j2, <span class="meta">@Slf</span>4j, <span class="meta">@XSlf</span>4j, <span class="meta">@CommonsLog</span>, <span class="meta">@JBossLog</span>, <span class="meta">@Flogger</span>, <span class="meta">@CustomLog</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@SuperBuilder</span></span><br><span class="line"><span class="meta">@Singular</span></span><br><span class="line"><span class="meta">@Delegate</span></span><br><span class="line"><span class="meta">@Value</span></span><br><span class="line"><span class="meta">@Accessors</span></span><br><span class="line"><span class="meta">@Wither</span></span><br><span class="line"><span class="meta">@With</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="meta">@val</span></span><br><span class="line"><span class="meta">@var</span></span><br><span class="line">experimental <span class="meta">@var</span></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line">Lombok config system</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span>:无参构造，get、set、toSring、hashcode、equals</span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br></pre></td></tr></table></figure>



<h1 id="10、多对一处理"><a href="#10、多对一处理" class="headerlink" title="10、多对一处理"></a>10、多对一处理</h1><p>多对一：</p>
<ul>
<li>多个学生，对应一个老师</li>
<li>对于学生这边而言，<strong>关联</strong>…多个学生，关联一个老师【多对一】</li>
<li>对于老师而言，<strong>集合</strong>，一个老师又很多学生【一对多】</li>
<li><strong>左关联，右集合</strong></li>
</ul>
<p>SQL:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`teacher`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">Not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(<span class="string">`id`</span>,<span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'秦老师'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">Not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`tid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line"><span class="keyword">KEY</span> <span class="string">`fktid`</span>(<span class="string">`tid`</span>),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> <span class="string">`fktid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`tid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teacher`</span> (<span class="string">`id`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">'小明'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">'小红'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">'小张'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="string">'小李'</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="number">5</span>,<span class="string">'小王'</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ol>
<li>导入lombok</li>
<li>新建实体类Teacher，Student</li>
<li>新建Mapper接口</li>
<li>建立Mapper.XML文件</li>
<li>在核心配置文件中绑定注册我们的MApper接口或者文件！【方式很多，随意选】</li>
<li>测试查询是否成功！</li>
</ol>
<h2 id="按照查询嵌套处理"><a href="#按照查询嵌套处理" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">思路：</span></span><br><span class="line"><span class="comment">    1、查询所有的学生信息</span></span><br><span class="line"><span class="comment">    2、根据查询出来的学生的id的tid，寻找对应的老师！ -子查询</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"com.rui.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理  对象：association  集合：collection--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"com.rui.pojo.Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="按照结果嵌套处理"><a href="#按照结果嵌套处理" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按照结果嵌套处理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudent2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid=t.id;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"com.rui.pojo.Student"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"com.rui.pojo.Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>回顾Mysql多对一查询方式：</p>
<ul>
<li>子查询</li>
<li>联表查询</li>
</ul>
<h1 id="11、一对多处理"><a href="#11、一对多处理" class="headerlink" title="11、一对多处理"></a>11、一对多处理</h1><p>比如：一个老师拥有多个学生！</p>
<p>对于老师而言，就是一对多的关系！</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ol>
<li>环境搭建，和刚才一样</li>
</ol>
<p>实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一个老师拥有多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="按照结果嵌套处理-1"><a href="#按照结果嵌套处理-1" class="headerlink" title="按照结果嵌套处理"></a>按照结果嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--按结果嵌套查询--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">    select s.id sid,s.name sname,t.name tname,t.id tid</span><br><span class="line">    from student s,teacher t</span><br><span class="line">    where s.tid=t.id and t.id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"com.rui.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--复杂的属性，我们需要单独处理  对象：association  集合：collection</span></span><br><span class="line"><span class="comment">        javaType="" 指定属性的类型</span></span><br><span class="line"><span class="comment">        集合中的泛型信息，我们使用ofType获取</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"com.rui.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="按照查询嵌套处理-1"><a href="#按照查询嵌套处理-1" class="headerlink" title="按照查询嵌套处理"></a>按照查询嵌套处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">    select * from mybatis.teacher where id = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"com.rui.pojo.Teacher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"com.rui.pojo.Student"</span> <span class="attr">select</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.Student"</span>&gt;</span></span><br><span class="line">    select * from mybatis.student where tid = #&#123;tid&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h2><ol>
<li>关联-association【多对一】</li>
<li>集合-collection   【一对多】</li>
<li>javaType &amp; ofType<ol>
<li>JavaType用来指定实体类中属性的类型</li>
<li>ofType用来指定映射到List或者集合中的pojo类型，泛型中的约束类型！</li>
</ol>
</li>
</ol>
<p>注意点：</p>
<ul>
<li>保证SQL的可读性，尽量保证通俗易懂</li>
<li>注意一对多和多对一中，属性名和字段的问题！</li>
<li>如果问题不好排查错误，可以使用日志，建议使用Log4j</li>
</ul>
<p><strong>慢SQL        1S        1000S</strong></p>
<p>面试高频</p>
<ul>
<li>Mysql引擎</li>
<li>InnoDB底层原理</li>
<li>索引</li>
<li>索引优化！</li>
</ul>
<h1 id="12、动态SQL"><a href="#12、动态SQL" class="headerlink" title="12、动态SQL"></a>12、动态SQL</h1><p><strong>什么事动态SQL：动态SQL就是指根据不同的条件生成不同的SQL语句</strong></p>
<p>利用动态SQL这一特性可以彻底摆脱这种痛苦</p>
<p>动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</p>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
<h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`bolg`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客id'</span>,</span><br><span class="line">	<span class="string">`title`</span> <span class="built_in">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'博客标题'</span>,</span><br><span class="line">	<span class="string">`author`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'博客作者'</span>,</span><br><span class="line">	<span class="string">`creat_time`</span> datetime <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'创建时间'</span>,</span><br><span class="line">	<span class="string">`views`</span> <span class="built_in">int</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span> <span class="keyword">comment</span> <span class="string">'浏览量'</span></span><br><span class="line">)<span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<p>创建一个基础工程</p>
<ol>
<li><p>导包</p>
</li>
<li><p>编写配置文件</p>
</li>
<li><p>编写实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date creatTime;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写实体类对应的Mapper接口和Mapper.xml</p>
</li>
</ol>
<h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.bolg where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        and title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryBlogIF</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtils.getSqlSession();</span><br><span class="line">    BlogMapper mapper = sqlSession.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"author"</span>,<span class="string">"尹锐"</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogIF(map);</span><br><span class="line">    <span class="keyword">for</span> (Blog blog : blogs) &#123;</span><br><span class="line">        System.out.println(blog);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose (when, otherwise)"></a>choose (when, otherwise)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.bolg</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title=#&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author!=null"</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>类似于 where if</p>
<h2 id="trim-where-set"><a href="#trim-where-set" class="headerlink" title="trim, (where, set)"></a>trim, (where, set)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">select * from mybatis.bolg</span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">    title = #&#123;title&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">    and author = #&#123;author&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update mybatis.bolg</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>所谓的动态SQL，本质还是SQL语句，只是我们可以在SQL层面，去执行一些逻辑代码</strong></p>
<p>if</p>
<p>Where,set,choose,when</p>
<h2 id="SQL片段"><a href="#SQL片段" class="headerlink" title="SQL片段"></a>SQL片段</h2><p>有的时候，我们可能会将一些公共的部分抽取出来，方便<strong>复用</strong>！</p>
<ol>
<li><p>使用SQL标签抽取公共的部分</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在需要使用的地方使用Include标签引用即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIF"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.bolg</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ul>
<li>最好基于单表来定义SQL片段！</li>
<li>不要存在where或者set<strong>标签</strong>，片段里尽量只有if就好了</li>
</ul>
</li>
</ol>
<h2 id="Foreach"><a href="#Foreach" class="headerlink" title="Foreach"></a>Foreach</h2><p>   其实就是对要动态加的sql做一个循环。</p>
   <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span> <span class="keyword">and</span> </span><br><span class="line">  &lt;foreach item=<span class="string">"id"</span> <span class="keyword">index</span>=<span class="string">"index"</span> collection=<span class="string">"ids"</span></span><br><span class="line">      <span class="keyword">open</span>=<span class="string">"("</span> separator=<span class="string">"or"</span> <span class="keyword">close</span>=<span class="string">")"</span>&gt;</span><br><span class="line">        <span class="comment">#&#123;id&#125;</span></span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">2</span> <span class="keyword">or</span> <span class="keyword">id</span>=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<p>   <img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/image-20191205141204114.png" alt="image-20191205141204114"></p>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">select * from mybatis.bolg where 1=1 and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">我们现在传递一个万能的map，这个map中可以存在一个map</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"com.rui.pojo.Blog"</span>&gt;</span></span><br><span class="line">    select * from mybatis.bolg</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span> <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="-1"><a href="#-1" class="headerlink" title></a></h2><p>   <strong>动态SQL就是在拼接SQL语句，我们只要保证SQL的正确性，按照SQL的格式，去排列组合就可以了</strong></p>
<p>   建议：</p>
<ul>
<li>先在Mysql中写出完整的SQL，在对应的去修改称为我们的动态SQL</li>
</ul>
<h1 id="13、缓存（了解）"><a href="#13、缓存（了解）" class="headerlink" title="13、缓存（了解）"></a>13、缓存（了解）</h1><h2 id="13-1、简介"><a href="#13-1、简介" class="headerlink" title="13.1、简介"></a>13.1、简介</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查询	：		连接数据库，耗资源！</span><br><span class="line">		一次查询的结果，给他暂存在一个可以直接取到的地方！---&gt;内存	：	缓存</span><br><span class="line">		</span><br><span class="line">我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</span><br></pre></td></tr></table></figure>

<ol>
<li><p>什么事缓存[Cache]?</p>
<ul>
<li><p>存在内存中的临时数据。</p>
</li>
<li><p>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上（关系型数据库数据文件）查询，</p>
<p>从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</p>
</li>
</ul>
</li>
<li><p>为什么使用缓存？</p>
<ul>
<li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li>
</ul>
</li>
<li><p>什么样的数据能使用缓存？</p>
<ul>
<li>经常查询并且不经常改变的数据。</li>
</ul>
</li>
</ol>
<h2 id="13-2、Mybatis缓存"><a href="#13-2、Mybatis缓存" class="headerlink" title="13.2、Mybatis缓存"></a>13.2、Mybatis缓存</h2><ul>
<li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li>
<li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul>
<li>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</li>
<li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li>
<li>为了提扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li>
</ul>
</li>
</ul>
<h2 id="13-3、"><a href="#13-3、" class="headerlink" title="13.3、"></a>13.3、</h2><ul>
<li>一级缓存也叫本地缓存：SqlSession<ul>
<li>与数据库同义词会话期间查询到的数据会放在本地缓存中。</li>
<li>以后如果需要获取相同的数据，直接从缓存中拿，没有必要再去查询数据；</li>
</ul>
</li>
</ul>
<p><strong>测试步骤：</strong></p>
<ol>
<li>开启日志!</li>
<li>测试在一个Session中查询两次相同的记录</li>
<li>查看日志输出</li>
</ol>
<p><strong>缓存失效的情况：</strong></p>
<ol>
<li><p>查询不同的东西</p>
</li>
<li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p>
</li>
<li><p>查询不同的Mapper.xml</p>
</li>
<li><p>手动清理缓存！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlsession.clearCache(); <span class="comment">//手动清理缓存</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>小节：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p>
<p>一级缓存就是一个Map。</p>
<h2 id="13-4、二级缓存"><a href="#13-4、二级缓存" class="headerlink" title="13.4、二级缓存"></a>13.4、二级缓存</h2><ul>
<li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li>
<li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li>
<li>工作机制<ul>
<li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li>
<li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据会被保存到二级缓存中；</li>
<li>新的会话查询信息，就可以从二级缓存中获取内容；</li>
<li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li>
</ul>
</li>
</ul>
<p>步骤：</p>
<ol>
<li><p>开启全局缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--显式的开启全局缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在要使用二级缓存的Mapper中开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">也可以自定义参数</span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFO"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">flushInterval</span>=<span class="string">"60000"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">size</span>=<span class="string">"512"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ol>
<li><p>问题：我们需要将实体类序列化！否则就会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.io.NotSerializableException: com.rui.pojo.User</span><br></pre></td></tr></table></figure>


</li>
</ol>
</li>
</ol>
<p>小结：</p>
<ul>
<li>只要开启了二级缓存，在同一个Mapper下就有效</li>
<li>所有的数据都会先放在一级缓存中；</li>
<li>只有当会话提交，或者关闭的时候，才会提交到二级缓存中！</li>
</ul>
<h2 id="13-5、缓存原理"><a href="#13-5、缓存原理" class="headerlink" title="13.5、缓存原理"></a>13.5、缓存原理</h2><p><img src="/2020/03/13/mybatis%E7%AC%94%E8%AE%B0/mybatis/image-20191205170549715.png" alt="image-20191205170549715"></p>
<h2 id="13-6、自定义缓存-encache"><a href="#13-6、自定义缓存-encache" class="headerlink" title="13.6、自定义缓存-encache"></a>13.6、自定义缓存-encache</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">EhCache 是一个纯Java的进程内缓存框架，具有快速、精干等特点，是Hibernate中默认的CacheProvider。</span><br></pre></td></tr></table></figure>

<p>要在程序中使用ehcache，先要导包！</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.caches<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在mapper中指定使用ehcache缓存实现</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在当前Mapper.xml中使用二级缓存--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<p>导入配置文件 ehcache.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：</span></span><br><span class="line"><span class="comment">       user.home – 用户主目录</span></span><br><span class="line"><span class="comment">       user.dir  – 用户当前工作目录</span></span><br><span class="line"><span class="comment">       java.io.tmpdir – 默认临时文件路径</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/Tmp_EhCache"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      name:缓存名称。</span></span><br><span class="line"><span class="comment">      maxElementsInMemory:缓存最大数目</span></span><br><span class="line"><span class="comment">      maxElementsOnDisk：硬盘最大缓存个数。</span></span><br><span class="line"><span class="comment">      eternal:对象是否永久有效，一但设置了，timeout将不起作用。</span></span><br><span class="line"><span class="comment">      overflowToDisk:是否保存到磁盘，当系统当机时</span></span><br><span class="line"><span class="comment">      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。</span></span><br><span class="line"><span class="comment">      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。</span></span><br><span class="line"><span class="comment">      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.</span></span><br><span class="line"><span class="comment">      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。</span></span><br><span class="line"><span class="comment">      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。</span></span><br><span class="line"><span class="comment">      clearOnFlush：内存数量最大时是否清除。</span></span><br><span class="line"><span class="comment">      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。</span></span><br><span class="line"><span class="comment">      FIFO，first in first out，这个是大家最熟的，先进先出。</span></span><br><span class="line"><span class="comment">      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。</span></span><br><span class="line"><span class="comment">      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"259200"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"cloud_user"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxElementsInMemory</span>=<span class="string">"5000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToIdleSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">timeToLiveSeconds</span>=<span class="string">"1800"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo如何实现不用新插件置顶文章</title>
    <url>/2020/02/14/hexo/hexo%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%8D%E7%94%A8%E6%96%B0%E6%8F%92%E4%BB%B6%E7%BD%AE%E9%A1%B6%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<blockquote>
<p>基于hexo 4 ，NexT 7</p>
</blockquote>
<p>最近想实现一个置顶功能，网查之后发现可以安装插件，我的方法直接修改时间为9999然后不显示时间来规避这个问题。</p>
<a id="more"></a>

<h1 id="修改post显示文件"><a href="#修改post显示文件" class="headerlink" title="修改post显示文件"></a>修改post显示文件</h1><p>修改<code>themes/next/layout/_macro/post.swig</code>文件，在<code>&lt;div class=&quot;post-meta&quot;&gt;</code>下面添加</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;i class&#x3D;&quot;fa fa-thumb-tack&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    &lt;font color&#x3D;7D26CD&gt;置顶&lt;&#x2F;font&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>来用于显示置顶二字。</p>
<p>在下面<code>- if theme.post_meta.created_at</code>处添加判断条件后变为<code>- if theme.post_meta.created_at and not post.top</code>即可。</p>
<p>最后效果如下:</p>
<p><img src="/2020/02/14/hexo/hexo%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%8D%E7%94%A8%E6%96%B0%E6%8F%92%E4%BB%B6%E7%BD%AE%E9%A1%B6%E6%96%87%E7%AB%A0/top.png" alt="top"></p>
<h1 id="修改archives显示文件"><a href="#修改archives显示文件" class="headerlink" title="修改archives显示文件"></a>修改archives显示文件</h1><p>修改<code>themes/next/layout/_macro/post-collapse.swig</code>文件</p>
<p>目的让之前显示年份的地方改成“置顶”，并且小字部分显示年份</p>
<p>代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% macro render(posts) %&#125;</span><br><span class="line">&#123;%- set current_year &#x3D; &#39;1970&#39; %&#125;</span><br><span class="line">&#123;%- set if_have_top &#x3D; false %&#125;</span><br><span class="line">&#123;%- for post in posts.toArray() %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- set year &#x3D; date(post.date, &#39;YYYY&#39;) %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;%- if year &gt; 9000 and not if_have_top %&#125;</span><br><span class="line">    &#123;%- set current_year &#x3D; &#39;置顶&#39; %&#125;</span><br><span class="line">    &#123;%- set if_have_top &#x3D; true %&#125;</span><br><span class="line">    &lt;div class&#x3D;&quot;collection-year&quot;&gt;</span><br><span class="line">      &lt;&#123;%- if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;%- endif %&#125; class&#x3D;&quot;collection-header&quot;&gt;&#123;&#123; current_year &#125;&#125;&lt;&#x2F;&#123;%- if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;%- endif %&#125;&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">  &#123;% else %&#125;</span><br><span class="line">    &#123;%- if year !&#x3D;&#x3D; current_year and year &lt;&#x3D; 9000 %&#125;</span><br><span class="line">      &#123;%- set current_year &#x3D; year %&#125;</span><br><span class="line">      &lt;div class&#x3D;&quot;collection-year&quot;&gt;</span><br><span class="line">        &lt;&#123;%- if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;%- endif %&#125; class&#x3D;&quot;collection-header&quot;&gt;&#123;&#123; current_year &#125;&#125;&lt;&#x2F;&#123;%- if theme.seo %&#125;h2&#123;% else %&#125;h1&#123;%- endif %&#125;&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">    &#123;%- endif %&#125;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;article itemscope itemtype&#x3D;&quot;http:&#x2F;&#x2F;schema.org&#x2F;Article&quot;&gt;</span><br><span class="line">    &lt;header class&#x3D;&quot;post-header&quot;&gt;</span><br><span class="line">    </span><br><span class="line">      &#123;%- if year &gt; 9000 %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">          &lt;time itemprop&#x3D;&quot;dateCreated&quot;</span><br><span class="line">                datetime&#x3D;&quot;&#123;&#123; moment(post.updated).format() &#125;&#125;&quot;</span><br><span class="line">                content&#x3D;&quot;&#123;&#123; date(post.updated, config.date_format) &#125;&#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; date(post.updated, &#39;YYYY-MM-DD&#39;) &#125;&#125;</span><br><span class="line">          &lt;&#x2F;time&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &#123;% else %&#125;</span><br><span class="line">        &lt;div class&#x3D;&quot;post-meta&quot;&gt;</span><br><span class="line">          &lt;time itemprop&#x3D;&quot;dateCreated&quot;</span><br><span class="line">                datetime&#x3D;&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span><br><span class="line">                content&#x3D;&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;&gt;</span><br><span class="line">            &#123;&#123; date(post.date, &#39;MM-DD&#39;) &#125;&#125;</span><br><span class="line">          &lt;&#x2F;time&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">      &#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">      &lt;&#123;%- if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;%- endif %&#125; class&#x3D;&quot;post-title&quot;&gt;</span><br><span class="line">        &#123;%- if post.link %&#125;&#123;# Link posts #&#125;</span><br><span class="line">          &#123;%- set postTitleIcon &#x3D; &#39;&lt;i class&#x3D;&quot;fa fa-external-link&quot;&gt;&lt;&#x2F;i&gt;&#39; %&#125;</span><br><span class="line">          &#123;%- set postText &#x3D; post.title or post.link %&#125;</span><br><span class="line">          &#123;&#123; next_url(post.link, postText + postTitleIcon, &#123;class: &#39;post-title-link post-title-link-external&#39;, itemprop: &#39;url&#39;&#125;) &#125;&#125;</span><br><span class="line">        &#123;% else %&#125;</span><br><span class="line">          &lt;a class&#x3D;&quot;post-title-link&quot; href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; itemprop&#x3D;&quot;url&quot;&gt;</span><br><span class="line">            &lt;span itemprop&#x3D;&quot;name&quot;&gt;&#123;&#123; post.title or __(&#39;post.untitled&#39;) &#125;&#125;&lt;&#x2F;span&gt;</span><br><span class="line">          &lt;&#x2F;a&gt;</span><br><span class="line">        &#123;%- endif %&#125;</span><br><span class="line">      &lt;&#x2F;&#123;%- if theme.seo %&#125;h3&#123;% else %&#125;h2&#123;%- endif %&#125;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;header&gt;</span><br><span class="line">  &lt;&#x2F;article&gt;</span><br><span class="line"></span><br><span class="line">&#123;%- endfor %&#125;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure>



<h1 id="修改想要置顶的post"><a href="#修改想要置顶的post" class="headerlink" title="修改想要置顶的post"></a>修改想要置顶的post</h1><p>在想要置顶的top文件下加入<code>top: true</code>，并将<code>date</code>改成9000年以上即可，修改<code>updated</code>为你想要的修改的时间即可。</p>
<blockquote>
<p>参考：<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuemh5b25nLmNuL3Bvc3RzL2ZjMjIv" title="https://www.zhyong.cn/posts/fc22/">hexo-next 添加文章置顶功能和评分功能等<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>修改样式</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenDDS 安装并配置Java</title>
    <url>/2021/04/24/opendds/OpenDDS_Install/</url>
    <content><![CDATA[<h1 id="OpenDDS-安装并配置Java"><a href="#OpenDDS-安装并配置Java" class="headerlink" title="OpenDDS 安装并配置Java"></a>OpenDDS 安装并配置Java</h1><p>本安装文档根据OpenDDS 3.16 的指导手册以及源码下README总结Windows下的安装方式</p>
<h2 id="一、环境要求"><a href="#一、环境要求" class="headerlink" title="一、环境要求"></a>一、环境要求</h2><ul>
<li>VS2017 / <strong>VS2019</strong> 作为OpenDDS的项目生成</li>
<li>Perl5.32.1  作为OpenDDS示例的运行脚本（On Windows we recommend the use of <span class="exturl" data-url="aHR0cHM6Ly9zdHJhd2JlcnJ5cGVybC5jb20=" title="https://strawberryperl.com">Straweberry Perl<i class="fa fa-external-link"></i></span>.）</li>
<li>jdk1.5以上 推荐使用1.8  实际上在安装过程中只用到了<strong>%JAVA_HOME%\include\jni.h</strong>与<strong>%JAVA_HOME%\include%JAVA_PLATFORM%\jni_md.h</strong>两个文件。</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9vcGVuZGRzLm9yZy9kb3dubG9hZHMuaHRtbA==" title="https://opendds.org/downloads.html">OpenDDS 3.16<i class="fa fa-external-link"></i></span></li>
<li>离线环境需要：<span class="exturl" data-url="aHR0cDovL2Rvd25sb2FkLm9iamVjdGNvbXB1dGluZy5jb20vVEFPLTIuMmFfcGF0Y2hlcy8/TT1E" title="http://download.objectcomputing.com/TAO-2.2a_patches/?M=D">ACE/TAO 2.2a patch 19 or later<i class="fa fa-external-link"></i></span></li>
</ul>
<a id="more"></a>

<h2 id="二、安装步骤"><a href="#二、安装步骤" class="headerlink" title="二、安装步骤"></a>二、安装步骤</h2><h3 id="1-首先解压源码："><a href="#1-首先解压源码：" class="headerlink" title="1. 首先解压源码："></a>1. 首先解压源码：</h3><p>假设OpenDDS解压到<strong>E:\OpenDDS-3.16</strong></p>
<p>如果是离线环境，还需要将<strong>ACE/TAO 2.2a patch 19</strong>压缩包下的文件夹<strong>ACE_wrappers</strong></p>
<h3 id="2-生成解决方案"><a href="#2-生成解决方案" class="headerlink" title="2. 生成解决方案"></a>2. 生成解决方案</h3><p>启动<strong>VS的开发人员命令行</strong>，定位到<strong>E:\OpenDDS-3.16</strong>下，输入 <strong>configure</strong> 命令（如果要开启<strong>Java</strong>支持，需要使用 <strong>configure –java</strong>），等待命令执行完毕</p>
<p>此时程序自动生成了<strong>DDS_TAOv2.sln</strong>文件和<strong>setenv.cmd</strong>文件，在命令行执行<strong>setenv.cmd</strong>设置环境变量，然后使用<code>devenv DDS_TAOv2.sln</code>命令打开新生成的<strong>sln</strong>文件，这样可以保留环境变量、重定项目目标，然后编译源码并等待操作完成。如果是<strong>64</strong>位系统，也需要编译为<strong>64</strong>位版本（把Win32换成<strong>x64</strong>）</p>
<h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h3><p>新建环境变量： </p>
<p><strong>DDS_ROOT = E:\OpenDDS-3.16</strong> </p>
<p><strong>ACE_ROOT = E:\OpenDDS-3.16\ACE_wrappers</strong> </p>
<p>并将</p>
<ul>
<li>%DDS_ROOT%\bin</li>
<li>%DDS_ROOT%\lib</li>
<li>%ACE_ROOT%\bin</li>
<li>%ACE_ROOT%\lib</li>
</ul>
<p>添加到<strong>path</strong>变量中。</p>
<h3 id="4-运行测试"><a href="#4-运行测试" class="headerlink" title="4. 运行测试"></a>4. 运行测试</h3><p>OpenDDS自带了很多实例，存放在<strong>%DDS_ROOT%\examples和%DDS_ROOT%\tests\DCPS</strong>下（<strong>Java</strong>示例在<strong>%DDS_ROOT%\java\tests</strong>下）</p>
<p>随便挑一个输入<strong>perl run_test.pl</strong>运行perl脚本，能正常收发数据即可</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ul>
<li>Java实例会有很多JNI的输出，长得和异常信息差不多，但实际上没有出错，只要最后提示<strong>test passed</strong>就是成功的</li>
<li>第三步编译OpenDDS时候经常会出现找不到文件的错误，大多数和环境变量有关系，configure后生成的解决方案对文件的链接出错，在命令行中执行<strong>setenv.cmd</strong>设置环境变量，然后使用<code>devenv DDS_**.sln</code>命令打开新生成的<strong>sln</strong>文件</li>
<li>可能会提示缺少 jni_md.h，该文件位于 <strong>%JAVA_HOME%\include\win32</strong> 目录下，复制到 <strong>%OPENDDS_HOME%\java\idl2jni\runtime</strong> 目录下即可</li>
</ul>
]]></content>
      <categories>
        <category>OpenDDS</category>
      </categories>
  </entry>
  <entry>
    <title>使用nvm管理node版本</title>
    <url>/2021/04/24/npm/%E4%BD%BF%E7%94%A8nvm%E7%AE%A1%E7%90%86node%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>最近在处理一个两年前的后端项目时，npm跑不起来，根据报错是版本依赖问题，要不更改node版本，要不更新npm依赖，有一串依赖需要更新。担心更新了新的依赖后，源代码也需要更改，所以考虑直接使用nvm,下载老版本的node，然后使用老版本的node运行。</p>
<a id="more"></a>

<ol>
<li><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz" title="https://github.com/coreybutler/nvm-windows/releases">nvm-windows下载<i class="fa fa-external-link"></i></span> nvm实际上只能在linux/mac系统上运行，如果windows系统需要下载这个nvm-setup.zip，安装时会自动配好环境变量。</p>
</li>
<li><p>安装nvm 直接安装即可，第一个目录是以后个版本nodejs的安装目录，第二个目录实际上是第一个目录的快捷方式.</p>
</li>
</ol>
<p>更改setting.txt文件，修改nodejs的镜像和npm的镜像,注意这里阿里淘宝镜像源已经都更新为<strong>https</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root: D:\env\nvm</span><br><span class="line">path: D:\env\nvm\nodejs</span><br><span class="line">node_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;node&#x2F;</span><br><span class="line">npm_mirror: https:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;npm&#x2F;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>通过nvm安装node<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm -v // 查看nvm版本</span><br><span class="line">nvm install 8.12.0 // 下载指定版本 </span><br><span class="line">nvm install latest安装最新版本</span><br><span class="line">nvm use 8.12.0 // 使用指定版本</span><br><span class="line">nvm ls // 查看已经安装的nodejs版本</span><br><span class="line">node -v // 查看nodejs版本</span><br></pre></td></tr></table></figure></li>
<li>安装全局npm<br>　　安装node的时候，npm其实也已经一起安装了。因为nvm可以管理多个版本的node，如果每次添加一个node版本都要安装一堆的包很麻烦,如果有一个npm可以让各个版本的node共用，就不会这么麻烦了，这就是为什么我们要配置一个全局的npm的原因。简单的三步就可以配置一个全局的npm。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1.  npm config <span class="built_in">set</span> prefix <span class="string">"D:\env\nvm"</span>//配置用npm下载包时全局安装的包路径</span><br><span class="line">2.  npm install npm -g//安装全局npm,不同的node都使用这个npm，想更新全局的npm的话首先删除全局路径(就是上一行命令的地址,可以使用npm config ls查看)下的npm,再执行一次这个命令即可</span><br><span class="line">3.  在用户变量中添加 NPM_HOME=D:\env\nvm，path中添加%NPM-HOME%</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>node</category>
      </categories>
      <tags>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Anaconda修改清华镜像源(全)</title>
    <url>/2021/04/24/python/Anaconda%E4%BF%AE%E6%94%B9%E6%B8%85%E5%8D%8E%E9%95%9C%E5%83%8F%E6%BA%90(%E5%85%A8)/</url>
    <content><![CDATA[<h1 id="全部镜像源"><a href="#全部镜像源" class="headerlink" title="全部镜像源"></a>全部镜像源</h1><blockquote>
<p>参考<span class="exturl" data-url="aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2hlbHAvYW5hY29uZGEv" title="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">Anaconda 镜像使用帮助<i class="fa fa-external-link"></i></span>，配置还是要看官网呀。</p>
</blockquote>
<p>大家在安装anaconda之后都会配置镜像源，但是网上好多教程都只是配置</p>
<p><strong>但这是不够的</strong>。</p>
<p>以下为半错配置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main</span><br><span class="line">- https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free</span><br></pre></td></tr></table></figure>

<p>刚才在安装pytorch时候发现速度很慢。</p>
<a id="more"></a>

<p><img src="/2021/04/24/python/Anaconda%E4%BF%AE%E6%94%B9%E6%B8%85%E5%8D%8E%E9%95%9C%E5%83%8F%E6%BA%90(%E5%85%A8)/TG0Z0%7B3NQI7%60T$IXJ@RIQUT.png" alt="img"></p>
<p>回看之前的提示，pytorch的本体的源并不是清华的。</p>
<p>下载速度感人。</p>
<p><img src="/2021/04/24/python/Anaconda%E4%BF%AE%E6%94%B9%E6%B8%85%E5%8D%8E%E9%95%9C%E5%83%8F%E6%BA%90(%E5%85%A8)/suduganren.png" alt="img"></p>
<p>直接去清华镜像源网站上看看吧。</p>
<p><img src="/2021/04/24/python/Anaconda%E4%BF%AE%E6%94%B9%E6%B8%85%E5%8D%8E%E9%95%9C%E5%83%8F%E6%BA%90(%E5%85%A8)/image-20201021152433721.png" alt="image-20201021152433721"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - defaults</span><br><span class="line">show_channel_urls: true</span><br><span class="line">channel_alias: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda</span><br><span class="line">default_channels:</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;main</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;free</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;r</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;pro</span><br><span class="line">  - https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;pkgs&#x2F;msys2</span><br><span class="line">custom_channels:</span><br><span class="line">  conda-forge: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  msys2: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  bioconda: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  menpo: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  pytorch: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br><span class="line">  simpleitk: https:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;anaconda&#x2F;cloud</span><br></pre></td></tr></table></figure>

<p>问题是这个channels的配置文件保存在哪那？各系统都可以通过修改用户目录下的 <code>.condarc</code> 文件。Windows 用户无法直接创建名为 <code>.condarc</code> 的文件，可先执行 <code>conda config --set show_channel_urls yes</code> 生成该文件之后再修改。</p>
<ul>
<li><p>Windows：<code>‪C:\Users\{你的用户名}\.condarc</code></p>
</li>
<li><p>Linux/Mac：<code>~/.condarc</code></p>
</li>
</ul>
<p>说白了还是用户文件下，编辑这个文件将内容粘贴即可。</p>
<p>接着根据清华镜像源的说明。</p>
<ul>
<li><p>运行 <code>conda clean -i</code> 清除索引缓存，保证用的是镜像站提供的索引。</p>
</li>
<li><p>运行 <code>conda create -n myenv numpy</code> 测试一下吧。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>cmder的使用</title>
    <url>/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/cmder%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>更换了windows电脑，感觉有点开倒车，安装各种娱乐软件确实很爽，但是一到写代码各种环境又开始麻烦了。</p>
<p>终端没有什么好的方案，wsl感觉需要学习成本，那么这里直接用cmder吧。感觉界面还可以。</p>
<ol>
<li>下载cmder，在<span class="exturl" data-url="aHR0cHM6Ly9jbWRlci5uZXQv" title="https://cmder.net/">cmder官网<i class="fa fa-external-link"></i></span>下载就可以，因为已经有git了，所以下载min版本即可。</li>
<li>因为是win版本，所以要进行一些基本配置。一个是环境变量，一个是在任意位置右键出现<code>Cmder Here</code>这个功能。<ol>
<li>在系统环境变量的path中增加Cmd.exe的路径（路径指它所在的文件夹）</li>
<li>以管理员身份打开cmd，执行以下命令即可，完了以后在任意地方点击右键即可使用cmder<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 设置任意地方鼠标右键启动Cmder</span><br><span class="line">Cmder.exe /REGISTER ALL</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li>vscode的配置，参考<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NtZGVyZGV2L2NtZGVyL3dpa2kvU2VhbWxlc3MtVlMtQ29kZS1JbnRlZ3JhdGlvbiN1c2UtY21kZXItZW1iZWRkZWQtZ2l0LWluLXZzY29kZQ==" title="https://github.com/cmderdev/cmder/wiki/Seamless-VS-Code-Integration#use-cmder-embedded-git-in-vscode">cmder github上的说明<i class="fa fa-external-link"></i></span>,在setting.json加入。 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;terminal.integrated.shell.windows&quot;: &quot;C:\\Windows\\System32\\cmd.exe&quot;,</span><br><span class="line">&quot;terminal.integrated.shellArgs.windows&quot;: [&quot;&#x2F;k&quot;, &quot;D:\\cmder\\vendor\\init.bat&quot;],</span><br></pre></td></tr></table></figure>
 这个方式实际上是先打开windows的cmd，然后再通过<code>cmd \k D:\\cmder\\vendor\\init.bat</code>这个命令打开cmder。曲线救国。</li>
<li>JetBrains家族软件的配置，这个等我用到了再整理。。。</li>
</ol>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>cmder</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下找到linux的感觉</title>
    <url>/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>对于开发人员来说，mac系统无疑是最受欢迎的。但是由于某些原因，比如游戏，娱乐，qiong，我们不想舍弃windows带来的方便，又不想双设备进行开发时，在windows下开发也就难免了。为了提升windows环境下的开发，找到linux带给我们便利的感觉。可以使用以下工具，找到开发的幸福感。</p>
<ul>
<li>WSL 适用于linux的windows子系统</li>
<li>升级到wsl2</li>
<li>windows terminal</li>
<li>zsh</li>
</ul>
<a id="more"></a>

<h2 id="1-安装WSl"><a href="#1-安装WSl" class="headerlink" title="1. 安装WSl"></a>1. 安装WSl</h2><p>WSL是在windows下进行开发，并使用linux中的bash等功能的最好的解决方案之一。</p>
<h2 id="1-1-打开系统功能"><a href="#1-1-打开系统功能" class="headerlink" title="1.1 打开系统功能"></a>1.1 打开系统功能</h2><p><strong>控制面板\所有控制面板项\程序和功能</strong> 中选择 <strong>启用或者关闭Windows功能</strong></p>
<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912150736512.png" alt="image-20200912150736512"></p>
<p>然后勾选 <strong>适用于Linux的Windows子系统</strong> </p>
<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912150852217.png" alt="image-20200912150852217"></p>
<p>经过系统一段时间的自动下载后，重启计算机。</p>
<!-- more -->

<h2 id="1-2-下载Ubuntu"><a href="#1-2-下载Ubuntu" class="headerlink" title="1.2 下载Ubuntu"></a>1.2 下载Ubuntu</h2><h3 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1 下载"></a>1.2.1 下载</h3><p>直接在<strong>Microsoft store</strong>中搜索<strong>Ubuntu</strong>，并启动即可。我使用的是18.04版本。</p>
<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912151114333.png" alt="image-20200912151114333"></p>
<h3 id="1-2-2-设置新分发版"><a href="#1-2-2-设置新分发版" class="headerlink" title="1.2.2 设置新分发版"></a>1.2.2 设置新分发版</h3><p>首次启动新安装的 Linux 分发版时，将打开一个控制台窗口，系统会要求你等待一分钟或两分钟，以便文件解压缩并存储到电脑上。 未来的所有启动时间应不到一秒。然后，需要为新的 Linux 分发版创建用户帐户和密码。</p>
<p><img src="https://docs.microsoft.com/zh-cn/windows/wsl/media/ubuntuinstall.png" alt="Windows 控制台中的 Ubuntu 解包"></p>
<h2 id="1-3-更新WSL到WSL2"><a href="#1-3-更新WSL到WSL2" class="headerlink" title="1.3 更新WSL到WSL2"></a>1.3 更新WSL到WSL2</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvd3NsMi1pbmRleA==" title="https://docs.microsoft.com/zh-cn/windows/wsl/wsl2-index">参考微软官方文档<i class="fa fa-external-link"></i></span></p>
<h3 id="1-3-1-启用“虚拟机平台”可选组件"><a href="#1-3-1-启用“虚拟机平台”可选组件" class="headerlink" title="1.3.1 启用“虚拟机平台”可选组件"></a>1.3.1 启用“虚拟机平台”可选组件</h3><p>安装 WSL 2 之前，必须启用“虚拟机平台”可选功能。</p>
<p>以管理员身份打开 PowerShell 并运行：</p>
<p>PowerShell复制</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p><strong>重新启动</strong>计算机，以完成 WSL 安装并更新到 WSL 2。</p>
<h3 id="1-3-2-将-WSL-2-设置为默认版本"><a href="#1-3-2-将-WSL-2-设置为默认版本" class="headerlink" title="1.3.2 将 WSL 2 设置为默认版本"></a>1.3.2 将 WSL 2 设置为默认版本</h3><p>以管理员的身份打开 PowerShell，然后在安装新的 Linux 发行版时运行以下命令，将 WSL 2 设置为默认版本：</p>
<p>PowerShell复制</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>运行该命令后，你可能会看到此消息：<code>WSL 2 requires an update to its kernel component. For information please visit https://aka.ms/wsl2kernel</code>。 跟随链接（<span class="exturl" data-url="aHR0cHM6Ly9ha2EubXMvd3NsMmtlcm5lbO+8ie+8jOWcqOaWh+aho+S4reWuieijheadpeiHquivpemhtemdoueahA==" title="https://aka.ms/wsl2kernel），在文档中安装来自该页面的">https://aka.ms/wsl2kernel），在文档中安装来自该页面的<i class="fa fa-external-link"></i></span> MSI，以便在计算机上安装 Linux 内核供 WSL 2 使用。 安装内核后，请再次运行该命令，该命令应会成功完成而不显示消息。</p>
<p> 备注</p>
<p>从 WSL 1 更新到 WSL 2 可能需要几分钟才能完成，具体取决于目标分发版的大小。 如果从 Windows 10 周年更新或创意者更新运行 WSL 1 的旧（历史）安装，可能会遇到更新错误。 按照这些说明<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vemgtY24vd2luZG93cy93c2wvaW5zdGFsbC1sZWdhY3kjdW5pbnN0YWxsaW5ncmVtb3ZpbmctdGhlLWxlZ2FjeS1kaXN0cm8=" title="https://docs.microsoft.com/zh-cn/windows/wsl/install-legacy#uninstallingremoving-the-legacy-distro">卸载并删除任何旧分发<i class="fa fa-external-link"></i></span>。</p>
<p>如果 <code>wsl --set-default-version</code> 结果为无效命令，请输入 <code>wsl --help</code>。 如果 <code>--set-default-version</code> 未列出，则表示你的 OS 不支持它，你需要更新到版本 1903（内部版本 18362）或更高版本。</p>
<h3 id="1-3-3-将分发版版本设置为-WSL-1-或-WSL-2"><a href="#1-3-3-将分发版版本设置为-WSL-1-或-WSL-2" class="headerlink" title="1.3.3 将分发版版本设置为 WSL 1 或 WSL 2"></a>1.3.3 将分发版版本设置为 WSL 1 或 WSL 2</h3><p>可打开 PowerShell 命令行并输入以下命令（仅在 <span class="exturl" data-url="bXMtc2V0dGluZ3M6d2luZG93c3VwZGF0ZQ==" title="ms-settings:windowsupdate">Windows 内部版本 18362 或更高版本<i class="fa fa-external-link"></i></span>中可用），检查分配给每个已安装的 Linux 分发版的 WSL 版本：<code>wsl -l -v</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-list</span> -<span class="literal">-verbose</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912151921601.png" alt="image-20200912151921601"></p>
<p>若要将分发版设置为受某一 WSL 版本支持，请运行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> &lt;distribution name&gt; &lt;versionNumber&gt;</span><br></pre></td></tr></table></figure>

<p>请确保将 <code>&lt;distribution name&gt;</code> 替换为你的分发版的实际名称，并将 <code>&lt;versionNumber&gt;</code> 替换为数字“1”或“2”。 可以随时更改回 WSL 1，方法是运行与上面相同的命令，但将“2”替换为“1”。</p>
<p><strong>我这里就是运行:</strong></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-version</span> Ubuntu<span class="literal">-18</span>.<span class="number">04</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>此外，如果要使 WSL 2 成为你的默认体系结构，可以通过此命令执行该操作：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这会将安装的任何新分发版的版本设置为 WSL 2。</p>
<h2 id="1-4-配置Ubuntu默认镜像源"><a href="#1-4-配置Ubuntu默认镜像源" class="headerlink" title="1.4 配置Ubuntu默认镜像源"></a>1.4 配置Ubuntu默认镜像源</h2><h3 id="1-4-1-备份并更新"><a href="#1-4-1-备份并更新" class="headerlink" title="1.4.1 备份并更新"></a>1.4.1 备份并更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/apt  <span class="comment">#进入配置文件所在目录</span></span><br><span class="line">cp sources.list sources.list.bak  <span class="comment">#备份配置文件</span></span><br><span class="line">vim sources.list  <span class="comment">#编辑配置文件</span></span><br></pre></td></tr></table></figure>

<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9taXJyb3IvdWJ1bnR1P3NwbT1hMmM2aC4xMzY1MTEwMi4wLjAuM2UyMjFiMTFReGFMYkY=" title="https://developer.aliyun.com/mirror/ubuntu?spm=a2c6h.13651102.0.0.3e221b11QxaLbF">参考阿里云Ubuntu镜像源配置方法<i class="fa fa-external-link"></i></span></p>
<p>将对应的代码粘贴进去。</p>
<p><strong>ubuntu 18.04(bionic) 配置如下</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>这里如果在vim直接粘贴会出错。要不检查错误，还可以打开ubuntu的实际硬盘位置</p>
<p><code>C:\Users\%USERNAME%\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs</code></p>
<p>这个就是 <strong>Ubuntu</strong> WSL版的根目录,接着到 <strong>etc\apt</strong> 下找到 <strong>sources.list</strong> 用之前贴的配置文件覆盖即可.接着更新数据源</p>
<h3 id="1-4-2-更新了镜像源之后，更新apt和其他软件："><a href="#1-4-2-更新了镜像源之后，更新apt和其他软件：" class="headerlink" title="1.4.2 更新了镜像源之后，更新apt和其他软件："></a>1.4.2 更新了镜像源之后，更新apt和其他软件：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update  <span class="comment">#更新源  </span></span><br><span class="line">sudo apt-get upgrade  <span class="comment">#更新软件</span></span><br></pre></td></tr></table></figure>

<h2 id="1-5-更改Ubuntu实际位置到d盘"><a href="#1-5-更改Ubuntu实际位置到d盘" class="headerlink" title="1.5 更改Ubuntu实际位置到d盘"></a>1.5 更改Ubuntu实际位置到d盘</h2><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xlZV9qYWNrZ2cvYXJ0aWNsZS9kZXRhaWxzLzEwNjczODg3OA==" title="https://blog.csdn.net/lee_jackgg/article/details/106738878">此步骤参考CSDN我的大神666Windows10子系统(WSL)修改安装目录<i class="fa fa-external-link"></i></span></p>
<p>只要把ubuntu版本改成对应的即可。</p>
<h3 id="1-5-1-首先查看所有分发版本"><a href="#1-5-1-首先查看所有分发版本" class="headerlink" title="1.5.1 首先查看所有分发版本"></a>1.5.1 首先查看所有分发版本</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">-l</span> -<span class="literal">-all</span>  <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>  NAME STATE VERSION</p>
<p> * Ubuntu-20.04 Running 2</p>
</blockquote>
<h3 id="1-5-2-导出分发版为tar文件到d盘"><a href="#1-5-2-导出分发版为tar文件到d盘" class="headerlink" title="1.5.2 导出分发版为tar文件到d盘"></a>1.5.2 导出分发版为tar文件到d盘</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-export</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> d:\ubuntu20.<span class="number">04</span>.tar</span><br></pre></td></tr></table></figure>

<h5 id="注销当前分发版"><a href="#注销当前分发版" class="headerlink" title="注销当前分发版"></a>注销当前分发版</h5><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-unregister</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-3-重新导入并安装分发版在d-ubuntu"><a href="#1-5-3-重新导入并安装分发版在d-ubuntu" class="headerlink" title="1.5.3 重新导入并安装分发版在d:\ubuntu"></a>1.5.3 重新导入并安装分发版在d:\ubuntu</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl -<span class="literal">-import</span> Ubuntu<span class="literal">-20</span>.<span class="number">04</span> d:\ubuntu d:\ubuntu20.<span class="number">04</span>.tar -<span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="1-5-4-设置默认登陆用户为安装时用户名"><a href="#1-5-4-设置默认登陆用户为安装时用户名" class="headerlink" title="1.5.4 设置默认登陆用户为安装时用户名"></a>1.5.4 设置默认登陆用户为安装时用户名</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ubuntu2004 config -<span class="literal">-default</span><span class="literal">-user</span> Username</span><br></pre></td></tr></table></figure>

<h3 id="1-5-5-删除tar文件-可选"><a href="#1-5-5-删除tar文件-可选" class="headerlink" title="1.5.5 删除tar文件(可选)"></a>1.5.5 删除tar文件(可选)</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">del d:\ubuntu20.<span class="number">04</span>.tar</span><br></pre></td></tr></table></figure>

<h2 id="2-Windows-Terminal中使用WSL"><a href="#2-Windows-Terminal中使用WSL" class="headerlink" title="2. Windows Terminal中使用WSL"></a>2. Windows Terminal中使用WSL</h2><h3 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h3><p>直接在Microsoft Store中搜索并安装即可。</p>
<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912153621967.png" alt="image-20200912153621967"></p>
<p>安装后应该可以识别到wsl，如果没有识别，可以在设置中进行如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">"list":</span><br><span class="line">        [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"guid"</span>: <span class="string">"&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;"</span>,</span><br><span class="line">                <span class="attr">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"Ubuntu-18.04"</span>,</span><br><span class="line">                <span class="attr">"source"</span>: <span class="string">"Windows.Terminal.Wsl"</span>,</span><br><span class="line">                <span class="attr">"startingDirectory"</span>: <span class="string">"//wsl$/Ubuntu-18.04/root"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            ...其他配置</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure>

<p>这样就可以检测到wsl系统了，点击即可打开。</p>
<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912153808770.png" alt="image-20200912153808770"></p>
<h3 id="2-2-配置zsh"><a href="#2-2-配置zsh" class="headerlink" title="2.2 配置zsh"></a>2.2 配置zsh</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~$ sudo apt-get install zsh <span class="comment">#首先下载</span></span><br><span class="line">/mnt/c/Users/User$ <span class="built_in">which</span> zsh <span class="comment">#查看下载是否成功</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912154357630.png" alt="image-20200912154357630"></p>
<p>如果可以出现如下目录，即为安装成功。</p>
<h3 id="2-3-配置oh-my-zsh"><a href="#2-3-配置oh-my-zsh" class="headerlink" title="2.3 配置oh my zsh"></a>2.3 配置oh my zsh</h3><p>根据<span class="exturl" data-url="aHR0cHM6Ly9vaG15ei5zaC8=" title="https://ohmyz.sh/">https://ohmyz.sh/<i class="fa fa-external-link"></i></span>官网，可以输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>

<p>但是我在安装时出现了错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure>

<p>经查证，需要配置ssh。这里我直接把windows下的<strong>.ssh</strong>文件，复制到了wsl文件下根目录<strong>\\wsl$\Ubuntu-18.04</strong>的<strong>root</strong>文件里。</p>
<p>再次下载，成功。如果以前没有配置过github的ssh，我不知道是否还会报这个错误，如果抱着个错误了，请参考<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM3Nzg5MDUvYXJ0aWNsZS9kZXRhaWxzLzgzNTAxMjA0" title="https://blog.csdn.net/u013778905/article/details/83501204">如何生成ssh公私钥并将公钥放到github上<i class="fa fa-external-link"></i></span>。</p>
<h3 id="2-4-美化工作"><a href="#2-4-美化工作" class="headerlink" title="2.4 美化工作"></a>2.4 美化工作</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~ <span class="comment">#进入root根目录</span></span><br><span class="line">vim .zshrc <span class="comment">#编辑.zshrc</span></span><br></pre></td></tr></table></figure>

<p>将主题设置为：</p>
<p>ZSH_THEME=”agnoster”</p>
<p>将windows terminal的默认字体设置为<code>Cascadia Code PL</code>，就是开启powerline功能的意思，agnoster的箭头需要开启此功能。</p>
<p><img src="/2021/04/24/windows%E7%B3%BB%E7%BB%9F%E5%B7%A5%E5%85%B7/windows%E4%B8%8B%E6%89%BE%E5%88%B0linux%E7%9A%84%E6%84%9F%E8%A7%89/image-20200912155336231.png" alt="image-20200912155336231"></p>
<p>并在下面schemes中添加如下配置：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"schemes": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Solarized Dark"</span>,</span><br><span class="line">          <span class="attr">"black"</span>: <span class="string">"#002831"</span>,</span><br><span class="line">          <span class="attr">"red"</span>: <span class="string">"#d11c24"</span>,</span><br><span class="line">          <span class="attr">"green"</span>: <span class="string">"#738a05"</span>,</span><br><span class="line">          <span class="attr">"yellow"</span>: <span class="string">"#a57706"</span>,</span><br><span class="line">          <span class="attr">"blue"</span>: <span class="string">"#2176c7"</span>,</span><br><span class="line">          <span class="attr">"purple"</span>: <span class="string">"#c61c6f"</span>,</span><br><span class="line">          <span class="attr">"cyan"</span>: <span class="string">"#259286"</span>,</span><br><span class="line">          <span class="attr">"white"</span>: <span class="string">"#eae3cb"</span>,</span><br><span class="line">          <span class="attr">"brightBlack"</span>: <span class="string">"#475b62"</span>,</span><br><span class="line">          <span class="attr">"brightRed"</span>: <span class="string">"#bd3613"</span>,</span><br><span class="line">          <span class="attr">"brightGreen"</span>: <span class="string">"#475b62"</span>,</span><br><span class="line">          <span class="attr">"brightYellow"</span>: <span class="string">"#536870"</span>,</span><br><span class="line">          <span class="attr">"brightBlue"</span>: <span class="string">"#708284"</span>,</span><br><span class="line">          <span class="attr">"brightPurple"</span>: <span class="string">"#5956ba"</span>,</span><br><span class="line">          <span class="attr">"brightCyan"</span>: <span class="string">"#819090"</span>,</span><br><span class="line">          <span class="attr">"brightWhite"</span>: <span class="string">"#fcf4dc"</span>,</span><br><span class="line">          <span class="attr">"background"</span>: <span class="string">"#001e27"</span>,</span><br><span class="line">          <span class="attr">"foreground"</span>: <span class="string">"#708284"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"Solarized Darcula"</span>,</span><br><span class="line">          <span class="attr">"black"</span>: <span class="string">"#25292a"</span>,</span><br><span class="line">          <span class="attr">"red"</span>: <span class="string">"#f24840"</span>,</span><br><span class="line">          <span class="attr">"green"</span>: <span class="string">"#629655"</span>,</span><br><span class="line">          <span class="attr">"yellow"</span>: <span class="string">"#b68800"</span>,</span><br><span class="line">          <span class="attr">"blue"</span>: <span class="string">"#2075c7"</span>,</span><br><span class="line">          <span class="attr">"purple"</span>: <span class="string">"#797fd4"</span>,</span><br><span class="line">          <span class="attr">"cyan"</span>: <span class="string">"#15968d"</span>,</span><br><span class="line">          <span class="attr">"white"</span>: <span class="string">"#d2d8d9"</span>,</span><br><span class="line">          <span class="attr">"brightBlack"</span>: <span class="string">"#25292a"</span>,</span><br><span class="line">          <span class="attr">"brightRed"</span>: <span class="string">"#f24840"</span>,</span><br><span class="line">          <span class="attr">"brightGreen"</span>: <span class="string">"#629655"</span>,</span><br><span class="line">          <span class="attr">"brightYellow"</span>: <span class="string">"#b68800"</span>,</span><br><span class="line">          <span class="attr">"brightBlue"</span>: <span class="string">"#2075c7"</span>,</span><br><span class="line">          <span class="attr">"brightPurple"</span>: <span class="string">"#797fd4"</span>,</span><br><span class="line">          <span class="attr">"brightCyan"</span>: <span class="string">"#15968d"</span>,</span><br><span class="line">          <span class="attr">"brightWhite"</span>: <span class="string">"#d2d8d9"</span>,</span><br><span class="line">          <span class="attr">"background"</span>: <span class="string">"#3d3f41"</span>,</span><br><span class="line">          <span class="attr">"foreground"</span>: <span class="string">"#d2d8d9"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br></pre></td></tr></table></figure>

<p>这些配置是在<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21iYWRvbGF0by9pVGVybTItQ29sb3ItU2NoZW1lcy90cmVlL21hc3Rlci93aW5kb3dzdGVybWluYWw=" title="https://github.com/mbadolato/iTerm2-Color-Schemes/tree/master/windowsterminal">iTerm2-Color-Schemes<i class="fa fa-external-link"></i></span>中复制的，大家可以根据自己的喜好定制。并在对应的终端开启主题，这里我直接默认使用该主题了。</p>
<h3 id="2-5-安装zsh插件"><a href="#2-5-安装zsh插件" class="headerlink" title="2.5 安装zsh插件"></a>2.5 安装zsh插件</h3><p>参考<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xMDg2MzY2Mjk=" title="https://zhuanlan.zhihu.com/p/108636629">一些常用的zsh插件<i class="fa fa-external-link"></i></span>这篇文章，写的非常详细了。</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
  </entry>
  <entry>
    <title>Spring Boot 整合 Security 实现 JWT</title>
    <url>/2021/05/06/springboot/jwt/</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3psYXRhbmxvbmcvc3ByaW5nYm9vdC1zdHVkeS90cmVlL21hc3Rlci9zYi0wOS1qd3Q=" title="https://github.com/zlatanlong/springboot-study/tree/master/sb-09-jwt">项目代码 已经加入到Github Spring Boot Study学习项目中<i class="fa fa-external-link"></i></span></p>
<h2 id="一、TokenProvider"><a href="#一、TokenProvider" class="headerlink" title="一、TokenProvider"></a>一、TokenProvider</h2><p>对于JWT本身的学习可以参照百度到的内容，在项目中使用时，我们主要需要两个方法，一个是创建token，一个是解析token。我们保存的token相当于Spring Security中当前认证信息的一种序列化。</p>
<ol>
<li><p>继承<strong>InitializingBean</strong>类，主要为了初始化一些配置项的参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] keyBytes = Decoders.BASE64.decode(jwtProperties.getBase64Secret());</span><br><span class="line">    <span class="keyword">this</span>.key = Keys.hmacShaKeyFor(keyBytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>jwtProperties.getBase64Secret()</strong>实际是从配置项中获取一段密码，生成的token会用这个密码加密。</p>
</li>
<li><p>创建token</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">createToken</span><span class="params">(Authentication authentication)</span> </span>&#123;</span><br><span class="line">    String authorities = authentication.getAuthorities().stream()</span><br><span class="line">            .map(GrantedAuthority::getAuthority)</span><br><span class="line">            .collect(Collectors.joining(<span class="string">","</span>));</span><br><span class="line"></span><br><span class="line">	Date validity = <span class="keyword">new</span> Date(<span class="keyword">new</span> Date().getTime() + jwtProperties.getTokenValidityInSeconds());</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> Jwts.builder()</span><br><span class="line">            .signWith(key, SignatureAlgorithm.HS512)</span><br><span class="line">            .claim(AUTHORITIES_KEY, authorities)</span><br><span class="line">            .setSubject(authentication.getName())</span><br><span class="line">            .setExpiration(validity)</span><br><span class="line">            .compact();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>解析token</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Authentication <span class="title">getAuthentication</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">    Claims claims = Jwts.parser()</span><br><span class="line">            .setSigningKey(key)</span><br><span class="line">            .parseClaimsJws(token)</span><br><span class="line">            .getBody();</span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; authorities =</span><br><span class="line">            Arrays.stream(claims.get(AUTHORITIES_KEY).toString().split(<span class="string">","</span>))</span><br><span class="line">                    .map(SimpleGrantedAuthority::<span class="keyword">new</span>)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">    User principal = <span class="keyword">new</span> User(claims.getSubject(), <span class="string">"******"</span>, authorities);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UsernamePasswordAuthenticationToken(principal, token, authorities);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<a id="more"></a>

<h2 id="二、配置过滤器"><a href="#二、配置过滤器" class="headerlink" title="二、配置过滤器"></a>二、配置过滤器</h2><p>通过添加过滤器，截取每次请求中的header对应的jwt的键值对信息，判断登录情况。</p>
<ol>
<li>过滤器类<strong>JWTFilter</strong>， 继承<strong>GenericFilter</strong>类，重写<code>doFilter()</code>方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从请求中获取到token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request httpRequest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response httpResponse</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> chain filterChain</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    <span class="comment">// 获得我们token对应开头的</span></span><br><span class="line">    String token = resolveToken((HttpServletRequest) request);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(token) &amp;&amp; tokenProvider.validateToken(token)) &#123;</span><br><span class="line">        <span class="comment">// 如果成功获取了就保存在SecurityContextHolder中</span></span><br><span class="line">        Authentication authentication = tokenProvider.getAuthentication(token);</span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">        log.info(<span class="string">"set Authentication to security context for '&#123;&#125;'"</span>, authentication.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        log.info(<span class="string">"no valid JWT token found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 以“Bearer ”开头</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">resolveToken</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    String bearerToken = request.getHeader(jwtProperties.getHeader());</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(bearerToken) &amp;&amp; bearerToken.startsWith(jwtProperties.getTokenStartWith())) &#123;</span><br><span class="line">        <span class="keyword">return</span> bearerToken.substring(<span class="number">7</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>将过滤器添加</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.addFilterBefore(customFilter, UsernamePasswordAuthenticationFilter<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<h2 id="三、UserDetailsService实现类"><a href="#三、UserDetailsService实现类" class="headerlink" title="三、UserDetailsService实现类"></a>三、UserDetailsService实现类</h2><p>创建UserDetailsService的实现类UserModelDetailsService，重写loadUserByUsername()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"userDetailsService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserModelDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(UserModelDetailsService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserModelDetailsService</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.userRepository = userRepository;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(<span class="keyword">final</span> String username)</span> </span>&#123;</span><br><span class="line">      log.debug(<span class="string">"Authenticating user '&#123;&#125;'"</span>, username);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 邮箱查询</span></span><br><span class="line">      <span class="keyword">if</span> (Validator.isEmail(username)) &#123;</span><br><span class="line">         <span class="keyword">return</span> userRepository.findOneWithAuthoritiesByEmailIgnoreCase(username)</span><br><span class="line">            .map(user -&gt; createSpringSecurityUser(username, user))</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"User with email "</span> + username + <span class="string">" was not found in the database"</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 用户名查询</span></span><br><span class="line">      String lowercaseLogin = username.toLowerCase(Locale.ENGLISH);</span><br><span class="line">      <span class="keyword">return</span> userRepository.findOneWithAuthoritiesByUsername(lowercaseLogin)</span><br><span class="line">         .map(user -&gt; createSpringSecurityUser(lowercaseLogin, user))</span><br><span class="line">         .orElseThrow(() -&gt; <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"User "</span> + lowercaseLogin + <span class="string">" was not found in the database"</span>));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将数据库中的user转化为SpringSecurity中的user</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> lowercaseUsername</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> org.springframework.security.core.userdetails.<span class="function">User <span class="title">createSpringSecurityUser</span><span class="params">(String lowercaseUsername, User user)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!user.isActivated()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> UserNotActivatedException(<span class="string">"User "</span> + lowercaseUsername + <span class="string">" was not activated"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      List&lt;GrantedAuthority&gt; grantedAuthorities = user.getAuthorities().stream()</span><br><span class="line">         .map(authority -&gt; <span class="keyword">new</span> SimpleGrantedAuthority(authority.getName()))</span><br><span class="line">         .collect(Collectors.toList());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> org.springframework.security.core.userdetails.User(user.getUsername(),</span><br><span class="line">         user.getPassword(),</span><br><span class="line">         grantedAuthorities);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>loadUserByUsername实际上就是通过用户名/邮箱，从数据库中获取真实的用户，并且获取到权限。然后将用户以及权限转化为Spring Security中的类，交给Spring Security进行后续处理。</p>
<h2 id="四、其他配置"><a href="#四、其他配置" class="headerlink" title="四、其他配置"></a>四、其他配置</h2><ol>
<li><p>0Configure BCrypt password encoder </p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>放行静态资源</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> </span>&#123;</span><br><span class="line">	web.ignoring()</span><br><span class="line">			.antMatchers(HttpMethod.OPTIONS, <span class="string">"/**"</span>)</span><br><span class="line">            <span class="comment">// allow anonymous resource requests</span></span><br><span class="line">            .antMatchers(</span><br><span class="line">                    <span class="string">"/"</span>,</span><br><span class="line">                    <span class="string">"/*.html"</span>,</span><br><span class="line">                    <span class="string">"/favicon.ico"</span>,</span><br><span class="line">                    <span class="string">"/**/*.html"</span>,</span><br><span class="line">                    <span class="string">"/**/*.css"</span>,</span><br><span class="line">                    <span class="string">"/**/*.js"</span>,</span><br><span class="line">                    <span class="string">"/h2-console/**"</span></span><br><span class="line">            );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>no session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">httpSecurity</span><br><span class="line">    .sessionManagement()</span><br><span class="line">    .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br></pre></td></tr></table></figure>
</li>
<li><p>异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">httpSecurity.</span><br><span class="line">    .exceptionHandling()</span><br><span class="line">    .authenticationEntryPoint(authenticationErrorHandler)</span><br><span class="line">    .accessDeniedHandler(jwtAccessDeniedHandler)</span><br></pre></td></tr></table></figure>
<p>JwtAuthenticationEntryPoint类，处理认证失败（未登录）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title">AuthenticationEntryPoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commence</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                        HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                        AuthenticationException authException)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// This is invoked when user tries to access a secured REST resource without supplying any credentials</span></span><br><span class="line">      <span class="comment">// We should just send a 401 Unauthorized response because there is no 'login page' to redirect to</span></span><br><span class="line">      <span class="comment">// Here you can place any message you want</span></span><br><span class="line">      response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JwtAccessDeniedHandler类，处理没有权限的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title">AccessDeniedHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      <span class="comment">// This is invoked when user tries to access a secured REST resource without the necessary authorization</span></span><br><span class="line">      <span class="comment">// We should just send a 403 Forbidden response because there is no 'error' page to redirect to</span></span><br><span class="line">      <span class="comment">// Here you can place any message you want</span></span><br><span class="line">      response.sendError(HttpServletResponse.SC_FORBIDDEN, accessDeniedException.getMessage());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ol>
<h2 id="五、登陆写法"><a href="#五、登陆写法" class="headerlink" title="五、登陆写法"></a>五、登陆写法</h2><p>登陆可以直接放在controller中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/authenticate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity&lt;JWTToken&gt; <span class="title">authorize</span><span class="params">(@Valid @RequestBody LoginDto loginDto)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      UsernamePasswordAuthenticationToken authenticationToken =</span><br><span class="line">      <span class="keyword">new</span> UsernamePasswordAuthenticationToken(loginDto.getUsername(), loginDto.getPassword());</span><br><span class="line"></span><br><span class="line">      Authentication authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);</span><br><span class="line">   SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> rememberMe = (loginDto.isRememberMe() == <span class="keyword">null</span>) ? <span class="keyword">false</span> : loginDto.isRememberMe();</span><br><span class="line">   String jwt = tokenProvider.createToken(authentication);</span><br><span class="line"></span><br><span class="line">      HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">   httpHeaders.add(jwtProperties.getHeader(), <span class="string">"Bearer "</span> + jwt);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> JWTToken(jwt), httpHeaders, HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、认证究竟在哪里执行"><a href="#六、认证究竟在哪里执行" class="headerlink" title="六、认证究竟在哪里执行"></a>六、认证究竟在哪里执行</h2><p>可以从controller中开始找</p>
<ol>
<li><p><code>Authentication authentication =</code></p>
<p>​                    <code>authenticationManagerBuilder.getObject().authenticate(authenticationToken);</code></p>
<p><strong>authenticate()</strong>方法传入前端传递的用户名和密码构成的<strong>UsernamePasswordAuthenticationToken</strong>类对象，Spring Security接管认证。</p>
</li>
<li><p><strong>WebSecurityConfigurerAdapter</strong>类的<strong>init()</strong>方法中的<code>final HttpSecurity http = getHttp();</code>获取<strong>HttpSecurity</strong>类对象，</p>
<p>在<strong>getHttp()</strong>方法中<code>AuthenticationManager authenticationManager = authenticationManager();</code></p>
<p>在<strong>authenticationManager()</strong>方法中<code>authenticationManager = authenticationConfiguration.getAuthenticationManager();</code></p>
<p>在<strong>getAuthenticationManager()</strong>方法中通过<strong>AuthenticationManagerBuilder</strong>类的对象的<strong>build()</strong>方法创建了一个<strong>AuthenticationManager</strong>的实现。</p>
<p><strong>AuthenticationManager</strong>接口如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationManager</span> </span>&#123;</span><br><span class="line">    <span class="function">Authentication <span class="title">authenticate</span><span class="params">(Authentication var1)</span> <span class="keyword">throws</span> AuthenticationException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>AuthenticationManager</strong>接口的实现类<strong>ProviderManager</strong>中对<strong>authenticate()</strong>方法的实现中 关注到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">,.....</span><br><span class="line"><span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        result = provider.authenticate(authentication);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            copyDetails(authentication, result);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ...</span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>对每个<strong>AuthenticationProvider</strong>对象进行认证。</p>
<p><strong>AuthenticationProvider</strong>  -&gt;  <strong>AbstractUserDetailsAuthenticationProvider</strong>  -&gt;  <strong>DaoAuthenticationProvider</strong></p>
<p><strong>AuthenticationProvider</strong> 类的后代<strong>AbstractUserDetailsAuthenticationProvider **中对</strong>authenticate()**方法进行了重写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">   ......</span><br><span class="line">   UserDetails user = <span class="keyword">this</span>.userCache.getUserFromCache(username);</span><br><span class="line">   <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">      cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         user = retrieveUser(username,</span><br><span class="line">               (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> ......</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 第一重验证</span></span><br><span class="line">      preAuthenticationChecks.check(user);</span><br><span class="line">      <span class="comment">// 第二重验证</span></span><br><span class="line">      additionalAuthenticationChecks(user,</span><br><span class="line">            (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> ......</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>其中<strong>retrieveUser()</strong>方法在<strong>AbstractUserDetailsAuthenticationProvider **是一个抽象方法，在</strong>DaoAuthenticationProvider**中实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> UserDetails <span class="title">retrieveUser</span><span class="params">(String username,</span></span></span><br><span class="line"><span class="function"><span class="params">		UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">	prepareTimingAttackProtection();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		UserDetails loadedUser = <span class="keyword">this</span>.getUserDetailsService().loadUserByUsername(username);</span><br><span class="line">		<span class="keyword">if</span> (loadedUser == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(</span><br><span class="line">					<span class="string">"UserDetailsService returned null, which is an interface contract viola</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		return loadedUser;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	catch ......</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到调用了我们重写的<strong>loadUserByUsername()</strong>方法，获取到一个正确的用户。</p>
<p>然后再进行第一重验证：locked/disabled/expired </p>
<p>与第二重验证：密码的验证:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">additionalAuthenticationChecks</span><span class="params">(UserDetails userDetails,</span></span></span><br><span class="line"><span class="function"><span class="params">		UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (authentication.getCredentials() == <span class="keyword">null</span>) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Authentication failed: no credentials provided"</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line">				<span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line">				<span class="string">"Bad credentials"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	String presentedPassword = authentication.getCredentials().toString();</span><br><span class="line">	<span class="keyword">if</span> (!passwordEncoder.matches(presentedPassword, userDetails.getPassword())) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Authentication failed: password does not match stored value"</span>);</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line">				<span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line">				<span class="string">"Bad credentials"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ol>
]]></content>
      <categories>
        <category>Spring Security</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Spring Security</tag>
      </tags>
  </entry>
  <entry>
    <title>简单理解KMP代码</title>
    <url>/2021/04/24/%E7%AE%97%E6%B3%95/kmp/</url>
    <content><![CDATA[<p>今天的每日一题是<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW1wbGVtZW50LXN0cnN0ci8=" title="https://leetcode-cn.com/problems/implement-strstr/">28. 实现 strStr()<i class="fa fa-external-link"></i></span>，这竟然是一道简单题，好吧学习一下KMP算法，对于KMP算法过程的讲解，在leetcode题解中<span class="exturl" data-url="aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW1wbGVtZW50LXN0cnN0ci9zb2x1dGlvbi9zaHVhLWNodWFuLWxjLXNodWFuZy1iYWktcG8tc3UtamllLWZhLWttLXRiODYv" title="https://leetcode-cn.com/problems/implement-strstr/solution/shua-chuan-lc-shuang-bai-po-su-jie-fa-km-tb86/">【宫水三叶】简单题学 KMP 算法<i class="fa fa-external-link"></i></span>的图解，还有知乎的回答<span class="exturl" data-url="aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTIzMDIxL2Fuc3dlci8xMDMyNjY1NDg2" title="https://www.zhihu.com/question/21923021/answer/1032665486">如何更好地理解和掌握 KMP 算法? - 阮行止的回答 - 知乎<i class="fa fa-external-link"></i></span>已经颇为详细，我这里只是简单对代码进行一下简述，方便理解(bèi sòng)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String ss, String pp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pp.isEmpty()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = ss.length(), m = pp.length();</span><br><span class="line">    	<span class="comment">// 前面加一个空格，后面匹配时下标表示个数，同时避免 j = next[j-1] 时 j-1=-1</span></span><br><span class="line">        ss = <span class="string">" "</span> + ss;</span><br><span class="line">        pp = <span class="string">" "</span> + pp;</span><br><span class="line">        <span class="keyword">char</span>[] s = ss.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] p = pp.toCharArray();</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[m + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下面两个过程很像，求next其实就是自己和自己匹配，</span></span><br><span class="line"><span class="comment">         * 无论如何 匹配失败 j=next[j];</span></span><br><span class="line"><span class="comment">         * 失败条件是(j &gt; 0 &amp;&amp; 数组[i] != p[j + 1])</span></span><br><span class="line"><span class="comment">         * 成功时将j向前移</span></span><br><span class="line"><span class="comment">         * 每次都要进行的是：</span></span><br><span class="line"><span class="comment">         *  求next： 对next数组进行赋值</span></span><br><span class="line"><span class="comment">         *  匹配： 判断是否匹配</span></span><br><span class="line"><span class="comment">         *  i++： 这一步在for循环中进行</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 求next自己与自己匹配，只有1位时不考虑，所以i从2开始</span></span><br><span class="line"><span class="comment">         * 匹配时 i 从 1开始</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 求next过程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">            next[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配过程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = next[j];</span><br><span class="line">            <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">            <span class="keyword">if</span> (j == m) <span class="keyword">return</span> i - m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
  </entry>
  <entry>
    <title>(转)Controller接收参数的几种常用方式</title>
    <url>/2018/09/03/springboot/web%E7%AC%94%E8%AE%B0/(%E8%BD%AC)Controller%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="第一类：请求路径参数"><a href="#第一类：请求路径参数" class="headerlink" title="第一类：请求路径参数"></a>第一类：请求路径参数</h1><h2 id="1、-RequestParam"><a href="#1、-RequestParam" class="headerlink" title="1、@RequestParam"></a>1、@RequestParam</h2><p>获取查询参数。即url?name=这种形式</p>
<h2 id="2、-PathVariable-REST风格"><a href="#2、-PathVariable-REST风格" class="headerlink" title="2、@PathVariable REST风格"></a>2、@PathVariable REST风格</h2><p>获取路径参数。即url/{id}这种形式。</p>
<a id="more"></a>

<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>GET</p>
<p><span class="exturl" data-url="aHR0cDovL2xvY2FsaG9zdDo4MDgwL2RlbW8vMTIzP25hbWU9c3VraV9yb25n" title="http://localhost:8080/demo/123?name=suki_rong">http://localhost:8080/demo/123?name=suki_rong<i class="fa fa-external-link"></i></span></p>
<p>对应的java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String id, @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"name"</span>)</span> String name) </span>&#123; </span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"id="</span>+id);</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"name="</span>+name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>id=123</p>
<p>name=suki_rong</p>
<h1 id="第二类：Body参数"><a href="#第二类：Body参数" class="headerlink" title="第二类：Body参数"></a>第二类：Body参数</h1><p>因为是POST请求，这里用Postman的截图结合代码说明</p>
<h2 id="1、-RequestBody"><a href="#1、-RequestBody" class="headerlink" title="1、@RequestBody"></a>1、@RequestBody</h2><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p><img src="/2018/09/03/springboot/web%E7%AC%94%E8%AE%B0/(%E8%BD%AC)Controller%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/t1.png" alt="t1"></p>
<p>对应的java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/demo1"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">(@RequestBody Person person)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">	System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>name:suki_rong;</p>
<p>age=18;</p>
<p>hobby:programing</p>
<p>也可以是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/demo1"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo1</span><span class="params">(@RequestBody Map&lt;String, String&gt; person)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">	System.out.println(person.get(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<p>suki_rong</p>
<h2 id="2、无注解-对应form-data"><a href="#2、无注解-对应form-data" class="headerlink" title="2、无注解 对应form-data"></a>2、无注解 对应form-data</h2><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><p><img src="/2018/09/03/springboot/web%E7%AC%94%E8%AE%B0/(%E8%BD%AC)Controller%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E7%9A%84%E5%87%A0%E7%A7%8D%E5%B8%B8%E7%94%A8%E6%96%B9%E5%BC%8F/t2.png" alt="t2"></p>
<p>对应的java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(path = <span class="string">"/demo2"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo2</span><span class="params">(Person person)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">	System.out.println(person.toString());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>输出结果：</p>
<p>name:suki_rong;</p>
<p>age=18;</p>
<p>hobby:programing</p>
<h2 id="Person类"><a href="#Person类" class="headerlink" title="Person类"></a>Person类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String hobby; </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"name:"</span>+name+<span class="string">";age="</span>+age+<span class="string">";hobby:"</span>+hobby; </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// getters and setters</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="第三类：请求头参数以及Cookie"><a href="#第三类：请求头参数以及Cookie" class="headerlink" title="第三类：请求头参数以及Cookie"></a>第三类：请求头参数以及Cookie</h1><h2 id="1、-RequestHeader"><a href="#1、-RequestHeader" class="headerlink" title="1、@RequestHeader"></a>1、@RequestHeader</h2><h2 id="2、-CookieValue"><a href="#2、-CookieValue" class="headerlink" title="2、@CookieValue"></a>2、@CookieValue</h2><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><p>java代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">(@RequestHeader(name = <span class="string">"myHeader"</span>)</span> String myHeader, </span></span><br><span class="line"><span class="function">@<span class="title">CookieValue</span><span class="params">(name = <span class="string">"myCookie"</span>)</span> String myCookie) </span>&#123; </span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"myHeader="</span> + myHeader); </span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"myCookie="</span> + myCookie); </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也可以这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/demo3"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">(HttpServletRequest request)</span> </span>&#123; </span><br><span class="line"></span><br><span class="line">    System.out.println(request.getHeader(<span class="string">"myHeader"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Cookie cookie : request.getCookies()) &#123; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"myCookie"</span>.equals(cookie.getName())) &#123; </span><br><span class="line"></span><br><span class="line">        System.out.println(cookie.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>转载自: <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1a2lfcm9uZy9hcnRpY2xlL2RldGFpbHMvODA0NDU4ODA=" title="https://blog.csdn.net/suki_rong/article/details/80445880">SpringBoot Controller接收参数的几种常用方式<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot整合swagger2</title>
    <url>/2020/02/29/springboot/swagger2%E7%AC%94%E8%AE%B0/springboot%E6%95%B4%E5%90%88swagger2%E7%94%9F%E6%88%90apidoc/</url>
    <content><![CDATA[<h1 id="swagger介绍"><a href="#swagger介绍" class="headerlink" title="swagger介绍"></a>swagger介绍</h1><p>swagger 提供了一套优秀的api生成，可以在springboot中进行简单配置后，利用响应的注解自动生成apidoc，并且还具有接口测试功能</p>
<a id="more"></a>

<h1 id="swagger整合进springboot"><a href="#swagger整合进springboot" class="headerlink" title="swagger整合进springboot"></a>swagger整合进springboot</h1><h2 id="1-新建springboot项目"><a href="#1-新建springboot项目" class="headerlink" title="1.新建springboot项目"></a>1.新建springboot项目</h2><p>这里新建一个springboot项目，勾选springboot-web即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">|____main</span><br><span class="line">| |____resources</span><br><span class="line">| | |____application-prod.yml</span><br><span class="line">| | |____application-dev.yml</span><br><span class="line">| | |____application.yml</span><br><span class="line">| |____java</span><br><span class="line">| | |____com</span><br><span class="line">| | | |____sblearning</span><br><span class="line">| | | | |____swagger2</span><br><span class="line">| | | | | |____Swagger2Application.java</span><br><span class="line">| | | | | |____config</span><br><span class="line">| | | | | | |____SwaggerConfig.java</span><br><span class="line">| | | | | |____entity</span><br><span class="line">| | | | | | |____User.java</span><br><span class="line">| | | | | |____controller</span><br><span class="line">| | | | | | |____HelloController.java</span><br></pre></td></tr></table></figure>

<p>并在建立相应文件，结构如上所示</p>
<h2 id="2-添加swagger依赖并注入"><a href="#2-添加swagger依赖并注入" class="headerlink" title="2.添加swagger依赖并注入"></a>2.添加swagger依赖并注入</h2><p>需要添加两个依赖，目前的稳定版本是2.9.2，可以在maven仓库中查找</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在<code>SwaggerConfig</code>中加上如下注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sblearning.swagger2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启后即可发现，swagger已经启动在了<code>http://localhost:8080/swagger-ui.html</code>之中，现在还是默认配置</p>
<h1 id="swagger配置"><a href="#swagger配置" class="headerlink" title="swagger配置"></a>swagger配置</h1><h2 id="1-配置swagger基本信息"><a href="#1-配置swagger基本信息" class="headerlink" title="1.配置swagger基本信息"></a>1.配置swagger基本信息</h2><p>这的配置主要是将<code>Docket</code>对象注入到springboot中</p>
<p>修改<code>SwaggerConfig</code>文件如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sblearning.swagger2.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Contact myContact = <span class="keyword">new</span> Contact(<span class="string">""</span>,<span class="string">""</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置首页信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">myApiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(<span class="string">"Api Documentation"</span>,</span><br><span class="line">                <span class="string">"Api Documentation"</span>,</span><br><span class="line">                <span class="string">"1.0"</span>,</span><br><span class="line">                <span class="string">"urn:tos"</span>,</span><br><span class="line">                myContact,</span><br><span class="line">                <span class="string">"Apache 2.0"</span>,</span><br><span class="line">                <span class="string">"http://www.apache.org/licenses/LICENSE-2.0"</span>,</span><br><span class="line">                <span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置 Swagger 的 Docket 的 bean 实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(myApiInfo());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-配置扫描接口"><a href="#2-配置扫描接口" class="headerlink" title="2.配置扫描接口"></a>2.配置扫描接口</h2><p>修改<code>Swagger</code>文件下的<code>docket()</code>，并且设置lcl分组只有在sprintboot在dev环境下才可用，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;spring.profiles.active&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String environment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置 Swagger 的 Docket 的 bean 实例</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">        .apiInfo(myApiInfo())</span><br><span class="line">        <span class="comment">// enable: 是否能访问swagger，可以通过flag使swagger只在生产环境下使用</span></span><br><span class="line">        .enable(<span class="keyword">this</span>.ifDevEnvironment())</span><br><span class="line">        .groupName(<span class="string">"lcl"</span>)</span><br><span class="line">        .select()</span><br><span class="line">        <span class="comment">// RequestHandlerSelectors 选择扫描方式</span></span><br><span class="line">        <span class="comment">// basePackage() 配置要扫描的包</span></span><br><span class="line">        .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.sblearning.swagger2"</span>))</span><br><span class="line">        <span class="comment">// path() 配置要扫描的路径</span></span><br><span class="line">        .build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">ifDevEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.environment.equals(<span class="string">"dev"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-配置api文档分组"><a href="#3-配置api文档分组" class="headerlink" title="3.配置api文档分组"></a>3.配置api文档分组</h2><p>在上面<code>Docket</code>对象的配置中，<code>groupName</code>就是当前分组名，如果为springboot注入多个<code>Docket</code>对象，那么将会有多个分组，这样做的好处是在多人共同开发时，可以按照各自的工作分组，对于各自的工作也都能清晰的看到了。</p>
<h1 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h1><h2 id="1-在entity中使用"><a href="#1-在entity中使用" class="headerlink" title="1.在entity中使用"></a>1.在entity中使用</h2><p>首先我们要知道的是，==只要我们的controller中映射的接口返回了一个实体类==，他都会在Models中出现，</p>
<p>但是如果只是实体类上标注了，但是controller并没有返回，就不会出现在models中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sblearning.swagger2.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModel;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiModelProperty;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModel</span>(<span class="string">"用户"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"用户名"</span>)</span><br><span class="line">    <span class="keyword">public</span> String username;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(<span class="string">"密码"</span>)</span><br><span class="line">    <span class="keyword">public</span> String password;</span><br><span class="line"></span><br><span class="line">    ...省略constructor，get，set</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要就是用到<code>@ApiModel</code>和<code>@ApiModelProperty</code>，分别是对实体类和字段进行说明。</p>
<h2 id="2-在controller中使用"><a href="#2-在controller中使用" class="headerlink" title="2.在controller中使用"></a>2.在controller中使用</h2><h3 id="Api"><a href="#Api" class="headerlink" title="@Api"></a>@Api</h3><p>对一个controller进行说明，一个controller表示一组，所以用tag标注</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tag = <span class="string">"API接口"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApiOperation"><a href="#ApiOperation" class="headerlink" title="@ApiOperation"></a>@ApiOperation</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"根据OV模型返回"</span>, response = UserTeacher<span class="class">.<span class="keyword">class</span>, <span class="title">notes</span> </span>= <span class="string">"一端注解"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/ov/&#123;teacherId&#125;/&#123;page&#125;/&#123;size&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> Page&lt;?&gt; getOA(<span class="meta">@PathVariable</span> Integer teacherId,</span><br><span class="line">                     <span class="meta">@PathVariable</span> Integer page,</span><br><span class="line">                     <span class="meta">@PathVariable</span> Integer size)&#123;</span><br><span class="line">    <span class="keyword">return</span> userService.seletOA(<span class="keyword">new</span> Page&lt;&gt;(page,size), teacherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ApiImplicitParam"><a href="#ApiImplicitParam" class="headerlink" title="@ApiImplicitParam"></a>@ApiImplicitParam</h3><p>对于这个注解在get请求中有两种用法</p>
<ul>
<li><p>通过url传参时用<code>@ApiImplicitParam(value = &quot;名字&quot;, name = &quot;te2&quot;)</code>，其中name要和<code>@RequestParam</code>的参数<code>name</code> 一致，后者默认为函数的形参名</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"你好2"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/hello2"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(value = <span class="string">"名字"</span>, name = <span class="string">"te2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">hello2</span><span class="params">(@RequestParam String te2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(te2, <span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>通过REST形式, 这里的<code>id</code>参数名要一致</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"你好3"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/hello3/&#123;id&#125;"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(value = <span class="string">"用户id"</span>, name = <span class="string">"id"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">hello3</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String parameter) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(parameter, <span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果多个参数可以用@ApiImplicitParams</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(),</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(),</span><br><span class="line">    ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="ApiParam"><a href="#ApiParam" class="headerlink" title="@ApiParam"></a>@ApiParam</h3><p>该注解的使用直接放到参数前面就可以，相对比较简单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"你好2"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/hello2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">hello2</span><span class="params">(@ApiParam(<span class="string">"名字"</span>)</span> @RequestParam String te2) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(te2, <span class="string">"123"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而且对于post请求，相对比较友好，因为在测试时会直接生成json字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/hellopost"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">hellopost</span><span class="params">(@ApiParam(<span class="string">"用户实体"</span>)</span> @RequestBody User u1) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="上两种方法对比"><a href="#上两种方法对比" class="headerlink" title="上两种方法对比"></a>上两种方法对比</h3><p>个人感觉<code>@ApiParam</code>注解对于测试api更加灵活好用。</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)注解@CrossOrigin解决跨域问题</title>
    <url>/2018/09/04/springboot/web%E7%AC%94%E8%AE%B0/(%E8%BD%AC)%E6%B3%A8%E8%A7%A3-CrossOrigin%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="注解-CrossOrigin"><a href="#注解-CrossOrigin" class="headerlink" title="注解@CrossOrigin"></a>注解@CrossOrigin</h1><p>　　出于安全原因，浏览器禁止Ajax调用驻留在当前原点之外的资源。例如，当你在一个标签中检查你的银行账户时，你可以在另一个选项卡上拥有EVILL网站。来自EVILL的脚本不能够对你的银行API做出Ajax请求（从你的帐户中取出钱！）使用您的凭据。</p>
<p>　　跨源资源共享（CORS）是由大多数浏览器实现的W3C规范，允许您灵活地指定什么样的跨域请求被授权，而不是使用一些不太安全和不太强大的策略，如IFRAME或JSONP。</p>
<h2 id="一、跨域-CORS-支持："><a href="#一、跨域-CORS-支持：" class="headerlink" title="一、跨域(CORS)支持："></a>一、跨域(CORS)支持：</h2><p>　　Spring Framework 4.2 GA为CORS提供了第一类支持，使您比通常的基于过滤器的解决方案更容易和更强大地配置它。所以springMVC的版本要在4.2或以上版本才支持@CrossOrigin</p>
<a id="more"></a>

<h2 id="二、使用方法："><a href="#二、使用方法：" class="headerlink" title="二、使用方法："></a>二、使用方法：</h2><h3 id="1、controller配置CORS"><a href="#1、controller配置CORS" class="headerlink" title="1、controller配置CORS"></a>1、controller配置CORS</h3><p>1.1、controller方法的CORS配置，您可以向@RequestMapping注解处理程序方法添加一个@CrossOrigin注解，以便启用CORS（默认情况下，@CrossOrigin允许在@RequestMapping注解中指定的所有源和HTTP方法）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>) <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>) <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中@CrossOrigin中的2个参数：</p>
<p><strong>origins</strong> ： 允许可访问的域列表</p>
<p><strong>maxAge</strong>：准备响应前的缓存持续的最大时间（以秒为单位）。</p>
<p>1.2、为整个controller启用@CrossOrigin</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://domain2.com"</span>, maxAge = <span class="number">3600</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>) <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>) <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，对于retrieve()和remove()处理方法都启用了跨域支持，还可以看到如何使用@CrossOrigin属性定制CORS配置。</p>
<p>1.3、同时使用controller和方法级别的CORS配置，Spring将合并两个注释属性以创建合并的CORS配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span>(maxAge = <span class="number">3600</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/account"</span>) <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span>(origins = <span class="string">"http://domain2.com"</span>)</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>) <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id&#125;"</span>) <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(@PathVariable Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.4、如果您正在使用Spring Security，请确保在Spring安全级别启用CORS，并允许它利用Spring MVC级别定义的配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.cors().and()...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2、全局CORS配置"><a href="#2、全局CORS配置" class="headerlink" title="2、全局CORS配置"></a>2、全局CORS配置</h3><p>　　除了细粒度、基于注释的配置之外，您还可能需要定义一些全局CORS配置。这类似于使用筛选器，但可以声明为Spring MVC并结合细粒度@CrossOrigin配置。默认情况下，所有origins and GET, HEAD and POST methods是允许的。</p>
<p>JavaConfig</p>
<p>使整个应用程序的CORS简化为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您正在使用Spring Boot，建议将WebMvcConfigurer bean声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">"/**"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以轻松地更改任何属性，以及仅将此CORS配置应用到特定的路径模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">"/api/**"</span>)</span><br><span class="line">        .allowedOrigins(<span class="string">"http://domain2.com"</span>)</span><br><span class="line">        .allowedMethods(<span class="string">"PUT"</span>, <span class="string">"DELETE"</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>, <span class="string">"header3"</span>)</span><br><span class="line">        .exposedHeaders(<span class="string">"header1"</span>, <span class="string">"header2"</span>)</span><br><span class="line">        .allowCredentials(<span class="keyword">false</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您正在使用Spring Security，请确保在Spring安全级别启用CORS，并允许它利用Spring MVC级别定义的配置。</p>
<h3 id="3、XML命名空间"><a href="#3、XML命名空间" class="headerlink" title="3、XML命名空间"></a>3、XML命名空间</h3><p>还可以将CORS与MVC XML命名空间配置。</p>
<p>a、如果整个项目所有方法都可以访问，则可以这样配置；此最小XML配置使CORS在/**路径模式具有与JavaConfig相同的缺省属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/**"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>其中 表示匹配到下一层；*****</em> 表示后面不管有多少层，都能匹配。**</p>
<p>如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/api/*"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这个可以匹配到的路径有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;api&#x2F;aaa</span><br><span class="line"></span><br><span class="line">&#x2F;api&#x2F;bbbb</span><br></pre></td></tr></table></figure>

<p>不能匹配的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;api&#x2F;aaa&#x2F;bbb</span><br></pre></td></tr></table></figure>

<p>因为* 只能匹配到下一层路径，如果想后面不管多少层都可以匹配，配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/api/**"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>注：其实就是一个(<em>)变成两个(*</em>)</p>
<p>b、也可以用定制属性声明几个CORS映射：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/api/**"</span> <span class="attr">allowed-origins</span>=<span class="string">"http://domain1.com, http://domain2.com"</span> <span class="attr">allowed-methods</span>=<span class="string">"GET, PUT"</span> <span class="attr">allowed-headers</span>=<span class="string">"header1, header2, header3"</span> <span class="attr">exposed-headers</span>=<span class="string">"header1, header2"</span> <span class="attr">allow-credentials</span>=<span class="string">"false"</span> <span class="attr">max-age</span>=<span class="string">"123"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/resources/**"</span> <span class="attr">allowed-origins</span>=<span class="string">"http://domain1.com"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>请求路径有/api/，方法示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/crossDomain"</span>)  </span><br><span class="line"><span class="meta">@ResponseBody</span> <span class="function"><span class="keyword">public</span> String <span class="title">crossDomain</span><span class="params">(HttpServletRequest req, HttpServletResponse res, String name)</span></span>&#123;  </span><br><span class="line">    ……  </span><br><span class="line">    ……  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>c、如果使用Spring Security，不要忘记<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctc2VjdXJpdHkvc2l0ZS9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWwvY29ycy5odG1s" title="https://docs.spring.io/spring-security/site/docs/current/reference/html/cors.html">在Spring安全级别启用CORS<i class="fa fa-external-link"></i></span>：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">http</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Default to Spring MVC's CORS configuration --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cors</span> /&gt;</span> ... <span class="tag">&lt;/<span class="name">http</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4、How-does-it-work"><a href="#4、How-does-it-work" class="headerlink" title="4、How does it work?"></a>4、How does it work?</h3><p>　　CORS请求（包括预选的带有选项方法）被自动发送到注册的各种HandlerMapping 。它们处理CORS准备请求并拦截CORS简单和实际请求，这得益于CorsProcessor实现（默认情况下默认<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NwcmluZy1wcm9qZWN0cy9zcHJpbmctZnJhbWV3b3JrL2Jsb2IvbWFzdGVyL3NwcmluZy13ZWIvc3JjL21haW4vamF2YS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb3JzL0RlZmF1bHRDb3JzUHJvY2Vzc29yLmphdmE=" title="https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/web/cors/DefaultCorsProcessor.java">DefaultCorsProcessor<i class="fa fa-external-link"></i></span>处理器），以便添加相关的CORS响应头（如Access-Control-Allow-Origin）。 <span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy80LjIueC9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb3JzL0NvcnNDb25maWd1cmF0aW9uLmh0bWw=" title="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">CorsConfiguration<i class="fa fa-external-link"></i></span> 允许您指定CORS请求应该如何处理：允许origins, headers, methods等。</p>
<p>a、<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy80LjIueC9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9zZXJ2bGV0L2hhbmRsZXIvQWJzdHJhY3RIYW5kbGVyTWFwcGluZy5odG1sI3NldENvcnNDb25maWd1cmF0aW9uLWphdmEudXRpbC5NYXAt" title="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/servlet/handler/AbstractHandlerMapping.html#setCorsConfiguration-java.util.Map-">AbstractHandlerMapping#setCorsConfiguration()<i class="fa fa-external-link"></i></span> 允许指定一个映射，其中有几个<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy80LjIueC9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb3JzL0NvcnNDb25maWd1cmF0aW9uLmh0bWw=" title="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">CorsConfiguration<i class="fa fa-external-link"></i></span> 映射在路径模式上，比如/api/**。</p>
<p>b、子类可以通过重写AbstractHandlerMapping类的getCorsConfiguration(Object, HttpServletRequest)方法来提供自己的CorsConfiguration。</p>
<p>c、处理程序可以实现 <a href="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfigurationSource.html" target="_blank" rel="noopener"><code>CorsConfigurationSource</code></a>接口（如<a href="https://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java" target="_blank" rel="noopener"><code>ResourceHttpRequestHandler</code></a>），以便为每个请求提供一个<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy80LjIueC9qYXZhZG9jLWFwaS9vcmcvc3ByaW5nZnJhbWV3b3JrL3dlYi9jb3JzL0NvcnNDb25maWd1cmF0aW9uLmh0bWw=" title="https://docs.spring.io/spring/docs/4.2.x/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">CorsConfiguration<i class="fa fa-external-link"></i></span>。</p>
<h3 id="5、基于过滤器的CORS支持"><a href="#5、基于过滤器的CORS支持" class="headerlink" title="5、基于过滤器的CORS支持"></a>5、基于过滤器的CORS支持</h3><p>　　作为上述其他方法的替代，Spring框架还提供了<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmcvZG9jcy9jdXJyZW50L2phdmFkb2MtYXBpL29yZy9zcHJpbmdmcmFtZXdvcmsvd2ViL2ZpbHRlci9Db3JzRmlsdGVyLmh0bWw=" title="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/filter/CorsFilter.html">CorsFilter<i class="fa fa-external-link"></i></span>。在这种情况下，不用使用<code>@CrossOrigin</code>或 <code>WebMvcConfigurer#addCorsMappings(CorsRegistry)</code>，例如，可以在Spring Boot应用程序中声明如下的过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration config = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        config.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        config.addAllowedOrigin(<span class="string">"http://domain1.com"</span>);</span><br><span class="line">        config.addAllowedHeader(<span class="string">"*"</span>);</span><br><span class="line">        config.addAllowedMethod(<span class="string">"*"</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, config);</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> CorsFilter(source));</span><br><span class="line">        bean.setOrder(<span class="number">0</span>); <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、spring注解-CrossOrigin不起作用的原因"><a href="#三、spring注解-CrossOrigin不起作用的原因" class="headerlink" title="三、spring注解@CrossOrigin不起作用的原因"></a>三、spring注解@CrossOrigin不起作用的原因</h2><p>1、是springMVC的版本要在4.2或以上版本才支持@CrossOrigin</p>
<p>2、非@CrossOrigin没有解决跨域请求问题，而是不正确的请求导致无法得到预期的响应，导致浏览器端提示跨域问题。</p>
<p>3、在Controller注解上方添加@CrossOrigin注解后，仍然出现跨域问题，解决方案之一就是：</p>
<p>在@RequestMapping注解中没有指定Get、Post方式，具体指定后，问题解决。</p>
<p>类似代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET) <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123; <span class="comment">// 若干代码</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>转载自 <span class="exturl" data-url="aHR0cHM6Ly93d3cubW16c2Jsb2cuY24vYXJ0aWNsZXMvMjAxOS8wOC8yMy8xNTY2NTI2NTk4ODg2Lmh0bWw=" title="https://www.mmzsblog.cn/articles/2019/08/23/1566526598886.html">淼淼之森<i class="fa fa-external-link"></i></span></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>跨域访问</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis Plus的使用</title>
    <url>/2020/03/17/springboot/mybatis-plus%E7%AC%94%E8%AE%B0/mybatis-plus/</url>
    <content><![CDATA[<h1 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis Plus"></a>Mybatis Plus</h1><p>mybatis plus 在 mybatis 基础上没有改变其本身，并做了增强。</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Jhb21pZG91L215YmF0aXMtcGx1cy1zYW1wbGVz" title="https://github.com/baomidou/mybatis-plus-samples">官方提供在Github的mybatis-plus-samples<i class="fa fa-external-link"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9tcC5iYW9taWRvdS5jb20v" title="https://mp.baomidou.com/">参考：MP官网<i class="fa fa-external-link"></i></span></p>
<p><img src="/2020/03/17/springboot/mybatis-plus%E7%AC%94%E8%AE%B0/mybatis-plus/relationship-with-mybatis.png" alt="官方宣传图"></p>
<a id="more"></a>

<h2 id="基本结构："><a href="#基本结构：" class="headerlink" title="基本结构："></a>基本结构：</h2><p>其中core是mybatis，</p>
<p><img src="/2020/03/17/springboot/mybatis-plus%E7%AC%94%E8%AE%B0/mybatis-plus/mybatis-plus-framework.jpg" alt></p>
<h2 id="配置基本："><a href="#配置基本：" class="headerlink" title="配置基本："></a>配置基本：</h2><h3 id="导入依赖："><a href="#导入依赖：" class="headerlink" title="导入依赖："></a>导入依赖：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">lcl123</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis?useSSl=false&amp;serverTimeZone=UTC&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>

<h3 id="添加扫描路径："><a href="#添加扫描路径：" class="headerlink" title="添加扫描路径："></a>添加扫描路径：</h3><ol>
<li>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.baomidou.mybatisplus.samples.quickstart.mapper"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(QuickStartApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>或者在每个Mapper类上加上<code>@Mapper</code>注解</li>
</ol>
<h2 id="基本方法："><a href="#基本方法：" class="headerlink" title="基本方法："></a>基本方法：</h2><h3 id="用户实体："><a href="#用户实体：" class="headerlink" title="用户实体："></a>用户实体：</h3><p>编写实体类 <code>User.java</code>（此处使用了 <span class="exturl" data-url="aHR0cHM6Ly93d3cucHJvamVjdGxvbWJvay5vcmcv" title="https://www.projectlombok.org/">Lombok<i class="fa fa-external-link"></i></span> 简化代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="编写Mapper类，并集成BaseMapper"><a href="#编写Mapper类，并集成BaseMapper" class="headerlink" title="编写Mapper类，并集成BaseMapper"></a>编写Mapper类，并集成BaseMapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="TableName"><a href="#TableName" class="headerlink" title="@TableName"></a>@TableName</h3><ul>
<li>描述：表名注解</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必须指定</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>表名</td>
</tr>
<tr>
<td>schema</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>schema</td>
</tr>
<tr>
<td>keepGlobalPrefix</td>
<td>boolean</td>
<td>否</td>
<td>false</td>
<td>是否保持使用全局的 tablePrefix 的值(如果设置了全局 tablePrefix 且自行设置了 value 的值)</td>
</tr>
<tr>
<td>resultMap</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>xml 中 resultMap 的 id</td>
</tr>
<tr>
<td>autoResultMap</td>
<td>boolean</td>
<td>否</td>
<td>false</td>
<td>是否自动构建 resultMap 并使用(如果设置 resultMap 则不会进行 resultMap 的自动构建并注入)</td>
</tr>
</tbody></table>
<h3 id="TableId"><a href="#TableId" class="headerlink" title="@TableId"></a>@TableId</h3><ul>
<li>描述：主键注解</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必须指定</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>主键字段名</td>
</tr>
<tr>
<td>type</td>
<td>Enum</td>
<td>否</td>
<td>IdType.NONE</td>
<td>主键类型</td>
</tr>
</tbody></table>
<h4 id="IdType"><a href="#IdType" class="headerlink" title="IdType"></a>IdType</h4><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>AUTO</td>
<td>数据库ID自增</td>
</tr>
<tr>
<td>NONE</td>
<td>无状态,该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</td>
</tr>
<tr>
<td>INPUT</td>
<td>insert前自行set主键值</td>
</tr>
<tr>
<td>ASSIGN_ID</td>
<td>分配ID(主键类型为Number(Long和Integer)或String)(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextId</code>(默认实现类为<code>DefaultIdentifierGenerator</code>雪花算法)</td>
</tr>
<tr>
<td>ASSIGN_UUID</td>
<td>分配UUID,主键类型为String(since 3.3.0),使用接口<code>IdentifierGenerator</code>的方法<code>nextUUID</code>(默认default方法)</td>
</tr>
<tr>
<td>ID_WORKER</td>
<td>分布式全局唯一ID 长整型类型(please use <code>ASSIGN_ID</code>)</td>
</tr>
<tr>
<td>UUID</td>
<td>32位UUID字符串(please use <code>ASSIGN_UUID</code>)</td>
</tr>
<tr>
<td>ID_WORKER_STR</td>
<td>分布式全局唯一ID 字符串类型(please use <code>ASSIGN_ID</code>)</td>
</tr>
</tbody></table>
<h3 id="TableField"><a href="#TableField" class="headerlink" title="@TableField"></a>@TableField</h3><ul>
<li>描述：字段注解(非主键)</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>必须指定</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>字段名</td>
</tr>
<tr>
<td>el</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>映射为原生 <code>#{ ... }</code> 逻辑,相当于写在 xml 里的 <code>#{ ... }</code> 部分</td>
</tr>
<tr>
<td>exist</td>
<td>boolean</td>
<td>否</td>
<td>true</td>
<td>是否为数据库表字段</td>
</tr>
<tr>
<td>condition</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>字段 <code>where</code> 实体查询比较条件,有值设置则按设置的值为准,没有则为默认全局的 <code>%s=#{\%s}</code></td>
</tr>
<tr>
<td>update</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>字段 <code>update set</code> 部分注入, 例如：update=”%s+1”：表示更新时会set version=version+1(该属性优先级高于 <code>el</code> 属性)</td>
</tr>
<tr>
<td>insertStrategy</td>
<td>Enum</td>
<td>N</td>
<td>DEFAULT</td>
<td>举例：NOT_NULL: <code>insert into table_a(&lt;if test=&quot;columnProperty != null&quot;&gt;column&lt;/if&gt;) values (&lt;if test=&quot;columnProperty != null&quot;&gt;#{columnProperty}&lt;/if&gt;)</code></td>
</tr>
<tr>
<td>updateStrategy</td>
<td>Enum</td>
<td>N</td>
<td>DEFAULT</td>
<td>举例：IGNORED: <code>update table_a set column=#{columnProperty}</code></td>
</tr>
<tr>
<td>whereStrategy</td>
<td>Enum</td>
<td>N</td>
<td>DEFAULT</td>
<td>举例：NOT_EMPTY: <code>where &lt;if test=&quot;columnProperty != null and columnProperty!=&#39;&#39;&quot;&gt;column=#{columnProperty}&lt;/if&gt;</code></td>
</tr>
<tr>
<td>fill</td>
<td>Enum</td>
<td>否</td>
<td>FieldFill.DEFAULT</td>
<td>字段自动填充策略</td>
</tr>
<tr>
<td>select</td>
<td>boolean</td>
<td>否</td>
<td>true</td>
<td>是否进行 select 查询</td>
</tr>
<tr>
<td>keepGlobalFormat</td>
<td>boolean</td>
<td>否</td>
<td>false</td>
<td>是否保持使用全局的 format 进行处理</td>
</tr>
<tr>
<td>jdbcType</td>
<td>JdbcType</td>
<td>否</td>
<td>JdbcType.UNDEFINED</td>
<td>JDBC类型 (该默认值不代表会按照该值生效)</td>
</tr>
<tr>
<td>typeHandler</td>
<td>Class&lt;? extends TypeHandler&gt;</td>
<td>否</td>
<td>UnknownTypeHandler.class</td>
<td>类型处理器 (该默认值不代表会按照该值生效)</td>
</tr>
<tr>
<td>numericScale</td>
<td>String</td>
<td>否</td>
<td>“”</td>
<td>指定小数点后保留的位数</td>
</tr>
</tbody></table>
<p>关于<code>jdbcType</code>和<code>typeHandler</code>以及<code>numericScale</code>的说明:</p>
<p><code>numericScale</code>只生效于 update 的sql. <code>jdbcType</code>和<code>typeHandler</code>如果不配合<code>@TableName#autoResultMap = true</code>一起使用,也只生效于 update 的sql. 对于<code>typeHandler</code>如果你的字段类型和set进去的类型为<code>equals</code>关系,则只需要让你的<code>typeHandler</code>让Mybatis加载到即可,不需要使用注解</p>
<h4 id="FieldStrategy"><a href="#FieldStrategy" class="headerlink" title="FieldStrategy"></a>FieldStrategy</h4><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>IGNORED</td>
<td>忽略判断</td>
</tr>
<tr>
<td>NOT_NULL</td>
<td>非NULL判断</td>
</tr>
<tr>
<td>NOT_EMPTY</td>
<td>非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断)</td>
</tr>
<tr>
<td>DEFAULT</td>
<td>追随全局配置</td>
</tr>
</tbody></table>
<h4 id="FieldFill"><a href="#FieldFill" class="headerlink" title="FieldFill"></a>FieldFill</h4><table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>DEFAULT</td>
<td>默认不处理</td>
</tr>
<tr>
<td>INSERT</td>
<td>插入时填充字段</td>
</tr>
<tr>
<td>UPDATE</td>
<td>更新时填充字段</td>
</tr>
<tr>
<td>INSERT_UPDATE</td>
<td>插入和更新时填充字段</td>
</tr>
</tbody></table>
<p>在更新时候遇到一个小发现</p>
<p>用Lambda方法进行更新时，用set()某个值不会进行自动填充，必须new一个新的对象才会进行自动填充update</p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Mybatis Plus</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)TCP三次握手四次挥手</title>
    <url>/2020/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/(%E8%BD%AC)TCP%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
    <content><![CDATA[<blockquote>
<p>本文转载于<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F6Y3N1" title="https://blog.csdn.net/qzcsu">小书go<i class="fa fa-external-link"></i></span>的<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F6Y3N1L2FydGljbGUvZGV0YWlscy83Mjg2MTg5MQ==" title="https://blog.csdn.net/qzcsu/article/details/72861891">两张动图-彻底明白TCP的三次握手与四次挥手<i class="fa fa-external-link"></i></span></p>
</blockquote>
<h2 id="背景描述"><a href="#背景描述" class="headerlink" title="背景描述"></a>背景描述</h2><blockquote>
<p>通过上一篇中网络模型中的<span class="exturl" data-url="aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXpjc3UvYXJ0aWNsZS9kZXRhaWxzLzcyODU5NDMx" title="http://blog.csdn.net/qzcsu/article/details/72859431">IP层的介绍<i class="fa fa-external-link"></i></span>，我们知道网络层，可以实现两个主机之间的通信。但是这并不具体，因为，真正进行通信的实体是在主机中的进程，是一个主机中的一个进程与另外一个主机中的一个进程在交换数据。IP协议虽然能把数据报文送到目的主机，但是并没有交付给主机的具体应用进程。而端到端的通信才应该是应用进程之间的通信。</p>
<p>UDP，在传送数据前不需要先建立连接，远地的主机在收到UDP报文后也不需要给出任何确认。虽然UDP不提供可靠交付，但是正是因为这样，省去和很多的开销，使得它的速度比较快，比如一些对实时性要求较高的服务，就常常使用的是UDP。对应的应用层的协议主要有 DNS,TFTP,DHCP,SNMP,NFS 等。</p>
<p>TCP，提供面向连接的服务，在传送数据之前必须先建立连接，数据传送完成后要释放连接。因此TCP是一种可靠的的运输服务，但是正因为这样，不可避免的增加了许多的开销，比如确认，流量控制等。对应的应用层的协议主要有 SMTP,TELNET,HTTP,FTP 等。</p>
</blockquote>
<hr>
<h3 id="常用的熟知端口号"><a href="#常用的熟知端口号" class="headerlink" title="常用的熟知端口号"></a>常用的熟知端口号</h3><table>
<thead>
<tr>
<th>应用程序</th>
<th>FTP</th>
<th>TFTP</th>
<th>TELNET</th>
<th>SMTP</th>
<th>DNS</th>
<th>HTTP</th>
<th>SSH</th>
<th>MYSQL</th>
</tr>
</thead>
<tbody><tr>
<td>熟知端口</td>
<td>21,20</td>
<td>69</td>
<td>23</td>
<td>25</td>
<td>53</td>
<td>80</td>
<td>22</td>
<td>3306</td>
</tr>
<tr>
<td>传输层协议</td>
<td>TCP</td>
<td>UDP</td>
<td>TCP</td>
<td>TCP</td>
<td>UDP</td>
<td>TCP</td>
<td>TCP</td>
<td>TCP</td>
</tr>
</tbody></table>
<hr>
<a id="more"></a>

<h2 id="TCP的概述"><a href="#TCP的概述" class="headerlink" title="TCP的概述"></a>TCP的概述</h2><blockquote>
<p>TCP把连接作为最基本的对象，每一条TCP连接都有两个端点，这种断点我们叫作套接字（socket），它的定义为端口号拼接到IP地址即构成了套接字，例如，若IP地址为192.3.4.16 而端口号为80，那么得到的套接字为192.3.4.16:80。</p>
</blockquote>
<h3 id="TCP报文首部"><a href="#TCP报文首部" class="headerlink" title="TCP报文首部"></a>TCP报文首部</h3><ol>
<li>源端口和目的端口，各占2个字节，分别写入源端口和目的端口；</li>
<li>序号，占4个字节，TCP连接中传送的字节流中的每个字节都按顺序编号。例如，一段报文的序号字段值是 301 ，而携带的数据共有100字段，显然下一个报文段（如果还有的话）的数据序号应该从401开始；</li>
<li>确认号，占4个字节，是期望收到对方下一个报文的第一个数据字节的序号。例如，B收到了A发送过来的报文，其序列号字段是501，而数据长度是200字节，这表明B正确的收到了A发送的到序号700为止的数据。因此，B期望收到A的下一个数据序号是701，于是B在发送给A的确认报文段中把确认号置为701；</li>
<li>数据偏移，占4位，它指出TCP报文的数据距离TCP报文段的起始处有多远；</li>
<li>保留，占6位，保留今后使用，但目前应都位0；</li>
<li>紧急URG，当URG=1，表明紧急指针字段有效。告诉系统此报文段中有紧急数据；</li>
<li>确认ACK，仅当ACK=1时，确认号字段才有效。TCP规定，在连接建立后所有报文的传输都必须把ACK置1；</li>
<li>推送PSH，当两个应用进程进行交互式通信时，有时在一端的应用进程希望在键入一个命令后立即就能收到对方的响应，这时候就将PSH=1；</li>
<li>复位RST，当RST=1，表明TCP连接中出现严重差错，必须释放连接，然后再重新建立连接；</li>
<li>同步SYN，在连接建立时用来同步序号。当SYN=1，ACK=0，表明是连接请求报文，若同意连接，则响应报文中应该使SYN=1，ACK=1；</li>
<li>终止FIN，用来释放连接。当FIN=1，表明此报文的发送方的数据已经发送完毕，并且要求释放；</li>
<li>窗口，占2字节，指的是通知接收方，发送本报文你需要有多大的空间来接受；</li>
<li>检验和，占2字节，校验首部和数据这两部分；</li>
<li>紧急指针，占2字节，指出本报文段中的紧急数据的字节数；</li>
<li>选项，长度可变，定义一些其他的可选的参数。</li>
</ol>
<h3 id="TCP连接的建立（三次握手）"><a href="#TCP连接的建立（三次握手）" class="headerlink" title="TCP连接的建立（三次握手）"></a>TCP连接的建立（三次握手）</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA3MjA1NzA5MzY3?x-oss-process=image/format,png" alt="这里写图片描述"></p>
<blockquote>
<p><strong>最开始的时候客户端和服务器都是处于CLOSED状态。主动打开连接的为客户端，被动打开连接的是服务器。</strong></p>
</blockquote>
<ol>
<li>TCP服务器进程先创建传输控制块TCB，时刻准备接受客户进程的连接请求，此时服务器就进入了LISTEN（监听）状态；</li>
<li>TCP客户进程也是先创建传输控制块TCB，然后向服务器发出连接请求报文，这是报文首部中的同部位SYN=1，同时选择一个初始序列号 seq=x ，此时，TCP客户端进程进入了 SYN-SENT（同步已发送状态）状态。TCP规定，SYN报文段（SYN=1的报文段）不能携带数据，但需要消耗掉一个序号。</li>
<li>TCP服务器收到请求报文后，如果同意连接，则发出确认报文。确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时也要为自己初始化一个序列号 seq=y，此时，TCP服务器进程进入了SYN-RCVD（同步收到）状态。这个报文也不能携带数据，但是同样要消耗一个序号。</li>
<li>TCP客户进程收到确认后，还要向服务器给出确认。确认报文的ACK=1，ack=y+1，自己的序列号seq=x+1，此时，TCP连接建立，客户端进入ESTABLISHED（已建立连接）状态。TCP规定，ACK报文段可以携带数据，但是如果不携带数据则不消耗序号。</li>
<li>当服务器收到客户端的确认后也进入ESTABLISHED状态，此后双方就可以开始通信了。<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA1MTEwNDA1NjY2?x-oss-process=image/format,png" alt="三次握手"></li>
</ol>
<h4 id="为什么TCP客户端最后还要发送一次确认呢？"><a href="#为什么TCP客户端最后还要发送一次确认呢？" class="headerlink" title="为什么TCP客户端最后还要发送一次确认呢？"></a>为什么TCP客户端最后还要发送一次确认呢？</h4><blockquote>
<p>一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</p>
<p>如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</p>
<p>如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</p>
</blockquote>
<h3 id="TCP连接的释放（四次挥手）"><a href="#TCP连接的释放（四次挥手）" class="headerlink" title="TCP连接的释放（四次挥手）"></a>TCP连接的释放（四次挥手）</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA3MjA1NzU2MjU1?x-oss-process=image/format,png" alt="这里写图片描述"></p>
<blockquote>
<p>数据传输完毕后，双方都可释放连接。最开始的时候，客户端和服务器都是处于ESTABLISHED状态，然后客户端主动关闭，服务器被动关闭。</p>
</blockquote>
<ol>
<li>客户端进程发出连接释放报文，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li>
<li>服务器收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</li>
<li>客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最后的数据）。</li>
<li>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</li>
<li>客户端收到服务器的连接释放报文后，必须发出确认，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗ *∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</li>
<li>服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltZy5ibG9nLmNzZG4ubmV0LzIwMTcwNjA2MDg0ODUxMjcy?x-oss-process=image/format,png" alt="四次挥手"></p>
<h4 id="为什么客户端最后还要等待2MSL？"><a href="#为什么客户端最后还要等待2MSL？" class="headerlink" title="为什么客户端最后还要等待2MSL？"></a>为什么客户端最后还要等待2MSL？</h4><blockquote>
<p>MSL（Maximum Segment Lifetime），TCP允许不同的实现可以设置不同的MSL值。</p>
<p>第一，保证客户端发送的最后一个ACK报文能够到达服务器，因为这个ACK报文可能丢失，站在服务器的角度看来，我已经发送了FIN+ACK报文请求断开了，客户端还没有给我回应，应该是我发送的请求断开报文它没有收到，于是服务器又会重新发送一次，而客户端就能在这个2MSL时间段内收到这个重传的报文，接着给出回应报文，并且会重启2MSL计时器。</p>
<p>第二，防止类似与“三次握手”中提到了的“已经失效的连接请求报文段”出现在本连接中。客户端发送完最后一个确认报文后，在这个2MSL时间中，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样新的连接中不会出现旧连接的请求报文。</p>
</blockquote>
<blockquote>
<p>为什么建立连接是三次握手，关闭连接确是四次挥手呢？</p>
<p>建立连接的时候， 服务器在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。<br>而关闭连接时，服务器收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，而自己也未必全部数据都发送给对方了，所以己方可以立即关闭，也可以发送一些数据给对方后，再发送FIN报文给对方来表示同意现在关闭连接，因此，己方ACK和FIN一般都会分开发送，从而导致多了一次。</p>
</blockquote>
<h4 id="如果已经建立了连接，但是客户端突然出现故障了怎么办？"><a href="#如果已经建立了连接，但是客户端突然出现故障了怎么办？" class="headerlink" title="如果已经建立了连接，但是客户端突然出现故障了怎么办？"></a>如果已经建立了连接，但是客户端突然出现故障了怎么办？</h4><blockquote>
<p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p>
</blockquote>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
  </entry>
</search>
